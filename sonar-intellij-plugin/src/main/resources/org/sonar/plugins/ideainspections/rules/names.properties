CyclomaticComplexity=Overly complex method
NestingDepth=Overly nested method
MethodWithMultipleLoops=Method with multiple loops
NonCommentSourceStatements=Overly long method
ThrownExceptionsPerMethod=Method with too many exceptions declared
ParametersPerMethod=Method with too many parameters
MultipleReturnPointsPerMethod=Method with multiple return points.
ThreeNegationsPerMethod=Method with more than three negations
MethodCoupling=Overly coupled method
SerialPersistentFieldsWithWrongSignature='serialPersistentFields' field not declared 'private static final ObjectStreamField[]'
SerializableWithUnconstructableAncestor=Serializable class with unconstructable ancestor
ReadResolveAndWriteReplaceProtected='readResolve()' or 'writeReplace()' not declared 'protected'
SerializableInnerClassWithNonSerializableOuterClass=Serializable non-static inner class without non-Serializable outer class
NonSerializableObjectPassedToObjectStream=Non-serializable object passed to ObjectOutputStream
NonSerializableWithSerialVersionUIDField=Non-serializable class with 'serialVersionUID'
ReadObjectAndWriteObjectPrivate='readObject()' or 'writeObject()' not declared 'private'
NonSerializableFieldInSerializableClass=Non-serializable field in a Serializable class
ExternalizableWithSerializationMethods=Externalizable class with 'readObject()' or 'writeObject()'
SerializableHasSerialVersionUIDField=Serializable class without 'serialVersionUID'
NonSerializableWithSerializationMethods=Non-serializable class with 'readObject()' or 'writeObject()'
SerializableHasSerializationMethods=Serializable class without 'readObject()' and 'writeObject()'
SerialVersionUIDNotStaticFinal='serialVersionUID' field not declared 'private static final long'
SerializableInnerClassHasSerialVersionUIDField=Serializable non-static inner class without 'serialVersionUID'
NonSerializableObjectBoundToHttpSession=Non-serializable object bound to HttpSession
ReadObjectInitialization=Instance variable may not be initialized by 'readObject()'
TransientFieldInNonSerializableClass=Transient field in non-serializable class
CheckEmptyScriptTag=Empty Script Tag
CheckValidXmlInScriptTagBody=XML Script Tag Content
HTML=Html tags and attributes conventions
RequiredAttributes=Required attributes
CheckImageSize=Image Size Mismatch
SingleCharacterStartsWith=Single character 'startsWith()' or 'endsWith()'
FieldRepeatedlyAccessed=Field repeatedly accessed in method
PrivateMemberAccessBetweenOuterAndInnerClass=Private member access between outer and inner classes
InterfaceWithOnlyOneDirectInheritor=Interface which has only one direct inheritor
AbstractClassWithOnlyOneDirectInheritor=Abstract class which has only one direct inheritor
AnonymousInnerClassMayBeStatic=Anonymous inner class may be a named static inner class
CheckForOutOfMemoryOnLargeArrayAllocation=Large array allocation with no OutOfMemoryError check
SimplifiableIfStatement=If statement may be replaced by && or || expression
ConnectionResource=Connection opened but not safely closed
MethodCallInLoopCondition=Method call in loop condition
ArrayLengthInLoopCondition=Array.length in loop condition
OverlyLargePrimitiveArrayInitializer=Overly large initializer for array of primitive type
RecordStoreResource=RecordStore opened but not safely closed
PersistenceModelErrorInspection=Persistence Model Errors
EjbDomInspection=EJB Descriptor Inspection
EjbQlInspection=EJB QL Problems
EjbWarnings=EJB Classes Warnings
WebProperties=Web properties
EjbErrors=EJB Classes Errors
ReferencesToClassesFromDefaultPackagesInJSPFile=References to classes from the default package in JSP files
SelfIncludingJspFiles=Self-including JSP files
PersistenceModelWarningInspection=Persistence Model Warnings
PersistenceQlInspection=Persistence QL Problems
PersistenceDomInspection=Persistence Descriptors Problems
SystemGetenv=Call to 'System.getenv()'
SystemExit=Call to 'System.exit()' or related methods
HardcodedLineSeparators=Hardcoded line separator
RuntimeExec=Call to 'Runtime.exec()'
UseOfAWTPeerClass=Use of AWT peer class
NativeMethods=Native method
UseOfProcessBuilder=Use of java.lang.ProcessBuilder class
UseOfSunClasses=Use of sun.* classes
HardcodedFileSeparators=Hardcoded file separator
UseOfJDBCDriverClass=Use of concrete JDBC driver class
RedundantThrowsDeclaration=Redundant throws declaration
JavaDoc=Declaration has javadoc problems
UNUSED_SYMBOL=Unused symbol
DefaultFileTemplate=Default File Template Usage
RedundantSuppression=Redundant suppression
UnnecessaryModuleDependencyInspection=Unnecessary module dependency
SSBasedInspection=Structural Search Inspection
Dependency=Illegal package dependencies
WrongPackageStatement=Wrong package statement
UNCHECKED_WARNING=Unchecked warning
BooleanMethodIsAlwaysInverted=Boolean method is always inverted
UNUSED_IMPORT=Unused import
AccessStaticViaInstance=Access static member via instance reference
SillyAssignment=Variable is assigned to itself
JavadocReference=Declaration has problems in javadoc references
EqualsAndHashcode=equals() and hashCode() not paired
UnusedDeclaration=Unused declaration
Deprecation=Deprecated API usage
StaticVariableUninitializedUse=Static variable used before initialization
InstanceVariableInitialization=Instance variable may not be initialized
NonThreadSafeLazyInitialization=Unsafe lazy initialization of static field
OverriddenMethodCallInConstructor=Overridden method call in constructor
AbstractMethodCallInConstructor=Abstract method call in constructor
OverridableMethodCallInConstructor=Overridable method call in constructor
ThisEscapedInConstructor='this' reference escaped in object construction
StaticVariableInitialization=Static variable may not be initialized
NonFinalStaticVariableUsedInClassInitialization=Non-final static variable is used during class initialization
InstanceVariableUninitializedUse=Instance variable used before initialized
GwtServiceNotRegistered=GWT Remote Service is not registered in web.xml
GWTStyleCheck=Unresolved references to CSS classes
NonSerializableServiceParameters=Non-serializable parameter type or return type of service method
GwtToHtmlReferences=Unresolved references to html tags
NonJREEmulationClassesInClientCode=Classes not from JRE Emulation Library in client code
GWTRemoteServiceAsyncCheck=Inconsistent GWT Remote Service
DeserializableClassInSecureContext=Deserializable class in secure context
CustomClassloader=Custom ClassLoader
SerializableClassInSecureContext=Serializable class in secure context
PublicStaticArrayField=Public static array field
UnsecureRandomNumberGeneration=Insecure random number generation
JDBCPrepareStatementWithNonConstantString=Call to 'Connection.prepareStatement()' or related method with non-constant string
JDBCExecuteWithNonConstantString=Call to 'Statement.execute()' or related method with non-constant string
SystemSetSecurityManager=Call to 'System.setSecurityManager()'
DesignForExtension=Design for extension
CloneableClassInSecureContext=Cloneable class in secure context
LoadLibraryWithNonConstantString=Call to 'System.loadLibrary()' with non-constant string
NonFinalClone=Non-final 'clone()' in secure context
RuntimeExecWithNonConstantString=Call to 'Runtime.exec()' with non-constant string
SystemProperties=Access of system properties
CustomSecurityManager=Custom SecurityManager
ClassLoaderInstantiation=!class.loader.instantiation.display.name!
NonStaticInnerClassInSecureContext=Non-static inner class in secure context
PublicStaticCollectionField=Public static collection field
ThreadDumpStack=Call to 'Thread.dumpStack()'
SuppressionAnnotation=Inspection suppression annotation
ObsoleteCollection=Use of obsolete collection type
ThrowablePrintStackTrace=Call to 'printStackTrace()'
ClassWithoutToString=Class without 'toString()'
SystemOutErr=Use of System.out or System.err
TodoComment=TODO comment
BoundFieldAssignment=Assignment to UI-bound field
NoScrollPane=Scrollable component not in JScrollPane
NoButtonGroup=Radio button not in a group
NoLabelFor=No label for component
OneButtonGroup=Button group with one button
MissingMnemonic=Missing Mnemonics
DuplicateMnemonic=Duplicate Mnemonics
ShiftOutOfRange=Shift operation by inappropriate constant
IncompatibleMask=Incompatible bitwise mask operation
PointlessBitwiseExpression=Pointless bitwise expression
ParameterOfConcreteClass=Method parameter of concrete class
CastToConcreteClass=Cast to a concrete class
MethodReturnOfConcreteClass=Method return of concrete class
MagicNumber='Magic number'
OverlyStrongTypeCast=Overly-strong type cast
LocalVariableOfConcreteClass=Local variable of concrete class
InstanceVariableOfConcreteClass=Instance variable of concrete class
DeclareCollectionAsInterface=Collection declared by class, not interface
MethodOnlyUsedFromInnerClass=Private method only used from inner class
InstanceofInterfaces='instanceof' a concrete class
ClassReferencesSubclass=Class references one of its subclasses
InstanceofChain=Chain of 'instanceof' checks
InstanceofThis='instanceof' check for 'this'
StaticMethodOnlyUsedInOneClass=Static method only used from one other class
StaticVariableOfConcreteClass=Static variable of concrete class
FeatureEnvy=Feature Envy
PublicMethodNotExposedInInterface=Public method not exposed in interface
HibernateResource=Hibernate resource opened but not safely closed
ChannelResource=Channel opened but not safely closed
JNDIResource=JNDI resource opened but not safely closed
SocketResource=Socket opened but not safely closed
JDBCResource=JDBC resource opened but not safely closed
DriverManagerGetConnection=Use of DriverManager to get JDBC connection
IOResource=I/O resource opened but not safely closed
DuplicateThrows=Duplicate throws
RedundantThrows=Redundant throws clause
CanBeFinal=Declaration can have final modifier
WeakerAccess=Declaration access can be weaker
SameReturnValue=Method returns the same value
SameParameterValue=Actual method parameter is the same constant
EmptyMethod=Empty method
UnusedParameters=Unused method parameters
UnusedReturnValue=Unused method return value
NoExplicitFinalizeCalls='finalize()' called explicitly
FinalizeNotProtected='finalize()' not declared 'protected'
Finalize='finalize()' declaration
FinalizeCallsSuperFinalize='finalize()' does not call 'super.finalize()'
ClassWithMultipleLoggers=Class with multiple loggers
ClassWithoutLogger=Class without logger
NonStaticFinalLogger=Non-constant logger
VarargParameter=Variable argument method
AutoUnboxing=Auto-unboxing
AssertStatement='assert' statement
Annotation=Annotation
AnnotationClass=Annotation class
ForeachStatement=Extended 'for' statement
AssertAsName=Use of 'assert' as identifier
EnumAsName=Use of 'enum' as identifier
EnumClass=Enumerated class
AutoBoxing=Auto-boxing
ReturnOfCollectionField=Return of Collection or array field
ProtectedField=Protected field
ReturnOfDateField=Return of Date or Calendar field
UseOfAnotherObjectsPrivateField=Accessing a non-public field of another object
PackageVisibleField=Package-visible field
PublicField=Public field
ProtectedInnerClass=Protected inner class
PublicInnerClass=Public inner class
PackageVisibleInnerClass=Package-visible inner class
AssignmentToDateFieldFromParameter=Assignment to Date or Calendar field from parameter
AssignmentToCollectionFieldFromParameter=Assignment to Collection or array field from parameter
IncrementDecrementUsedAsExpression=Value of ++ or -- used
AssignmentToForLoopParameter=Assignment to 'for' loop parameter
NestedAssignment=Nested assignment
AssignmentToMethodParameter=Assignment to method parameter
AssignmentToCatchBlockParameter=Assignment to catch block parameter
ReplaceAssignmentWithOperatorAssignment=Assignment replaceable with operator assignment
InfiniteLoopStatement=Infinite loop statement
UnnecessaryLabelOnBreakStatement=Unnecessary label on 'break' statement
PointlessBooleanExpression=Pointless boolean expression
BreakStatement='break' statement
LabeledStatement=Labeled statement
LoopStatementsThatDontLoop=Loop statement that does not loop
SwitchStatementWithTooManyBranches='switch' statement with too many branches
IfStatementWithTooManyBranches='if' statement with too many branches
UnnecessaryConditionalExpression=Redundant conditional expression
PointlessIndexOfComparison=Pointless 'indexOf()' comparison
FallthruInSwitchStatement=Fallthrough in 'switch' statement
SwitchStatement='switch' statement
NestedConditionalExpression=Nested conditional expression
DuplicateCondition=Duplicate condition in 'if' statement
NegatedIfElse='if' statement with negated condition
UnnecessaryContinue=Unnecessary 'continue' statement
UnusedLabel=Unused label
OverlyComplexBooleanExpression=Overly complex boolean expression
ContinueStatementWithLabel='continue' statement with label
SwitchStatementWithConfusingDeclaration=Local variable used and declared in different 'switch' branches
UnnecessaryReturn=Unnecessary 'return' statement
EnumSwitchStatementWhichMissesCases=Enum 'switch' statement that misses case
NestedSwitchStatement=Nested 'switch' statement
ConstantIfStatement=Constant if statement
SwitchStatementDensity='switch' statement with too low of a branch density
SwitchStatementWithTooFewBranches='switch' statement with too few branches
UnnecessaryLabelOnContinueStatement=Unnecessary label on 'continue' statement
TrivialIf=Redundant 'if' statement
IfStatementWithIdenticalBranches='if' statement with identical branches
BreakStatementWithLabel='break' statement with label
DuplicateBooleanBranch=Duplicate condition on '&&' or '||'
ForLoopReplaceableByWhile='for' loop may be replaced by 'while' loop
SwitchStatementsWithoutDefault='switch' statement without 'default' branch
ForLoopWithMissingComponent='for' loop with missing components
UnnecessaryDefault=Unnecessary 'default' for enum switch statement
SimplifiableConditionalExpression=Conditional that can be simplified to && or ||
ContinueStatement='continue' statement
ConditionalExpression=Conditional expression (?:)
DefaultNotLastCaseInSwitch='default' not last case in 'switch'
ConstantConditionalExpression=Constant conditional expression
ConfusingElse=Confusing 'else' branch
LoopConditionNotUpdatedInsideLoop=Loop variable not updated inside loop
NegatedConditional=Conditional expression with negated condition
ConditionalExpressionWithIdenticalBranches=Conditional expression with identical branches
RandomDoubleForRandomInteger=Using 'Random.nextDouble()' to get randominteger
StringBufferReplaceableByStringBuilder='StringBuffer' may be 'StringBuilder' (JDK5.0 only)
StringToString=Redundant 'String.toString()'
MultiplyOrDivideByPowerOfTwo=Multiply or divide by power of two
InstantiatingObjectToGetClassObject=Instantiating object to get Class object
LengthOneStringsInConcatenation=Single character string concatenation
StringConcatenationInsideStringBufferAppend=String concatenation inside 'StringBuffer.append()'
CallToSimpleSetterInClass=Call to simple setter from within class
UnnecessaryTemporaryOnConversionToString=Unnecessary temporary object in conversion to String
ManualArrayCopy=Manual array copy
SubstringZero=Redundant '.substring(0)'
StringBufferMustHaveInitialCapacity=StringBuffer or StringBuilder without initial capacity
MethodMayBeStatic=Method may be 'static'
LengthOneStringInIndexOf=Single character string parameter in 'String.indexOf()' call
InnerClassMayBeStatic=Inner class may be 'static'
StringBufferToStringInConcatenation='StringBuffer.toString()' in concatenation
ConstantStringIntern=Call to 'intern()' on String constant
CallToSimpleGetterInClass=Call to simple getter from within class
JavaLangReflect=Use of java.lang.reflect
UnnecessaryTemporaryOnConversionFromString=Unnecessary temporary object in conversion from String
StringBufferReplaceableByString=Constant StringBuffer may be String
TrivialStringConcatenation=Concatenation with empty string
StringConcatenationInLoops=String concatenation in loop
BooleanConstructor=Boolean constructor call
StringEqualsEmptyString='String.equals('')'
FieldMayBeStatic=Field may be 'static'
StringReplaceableByStringBuffer=Non-constant String should be StringBuffer
CollectionsMustHaveInitialCapacity=Collection without initial capacity
StringConstructor=Redundant String constructor call
SetReplaceableByEnumSet=Set replaceable by EnumSet
TailRecursion=Tail recursion
SizeReplaceableByIsEmpty='size() == 0' replaceable by 'isEmpty()'
MapReplaceableByEnumMap=Map replaceable by EnumMap
ObjectAllocationInLoop=Object allocation in loop
Since15=Usages of API documented as @since 1.5
UnnecessaryBoxing=Unnecessary boxing
UnnecessaryUnboxing=Unnecessary unboxing
IndexOfReplaceableByContains='indexOf()' expression is replaceable by 'contains()'
WhileCanBeForeach='while' loop replaceable by 'for each'
ForCanBeForeach='for' loop replaceable by 'for each'
RawUseOfParameterizedType=Raw use of parameterized class
StringConcatenation=String concatenation
StringTokenizer=Use of StringTokenizer
CharacterComparison=Character comparison
UnresolvedPropertyKey=Invalid property key
StringCompareTo=Call to 'String.compareTo()'
StringToUpperWithoutLocale=Call to 'String.toUpperCase()' or 'toLowerCase()' without a Locale
DuplicatePropertyInspection=Duplicate Property
StringEqualsIgnoreCase=Call to 'String.equalsIgnoreCase()'
TimeToString=Call to 'Time.toString()'
StringEquals=Call to 'String.equals()'
DateToString=Call to 'Date.toString()'
NumericToString=Call to Numeric 'toString()'
DuplicateStringLiteralInspection=Duplicate String Literal
HardCodedStringLiteral=Hard coded strings
MagicCharacter='Magic character'
SimpleDateFormatWithoutLocale=Instantiating a SimpleDateFormat without a Locale
ConstantNamingConvention=Constant naming convention
ExceptionNameDoesntEndWithException=Exception class name does not end with 'Exception'
TypeParameterNamingConvention=Type parameter naming convention
ParameterNamingConvention=Method parameter naming convention
InterfaceNamingConvention=Interface naming convention
EnumeratedClassNamingConvention=Enumerated class naming convention
InstanceMethodNamingConvention=Instance method naming convention
LocalVariableNamingConvention=Local variable naming convention
ClassNamingConvention=Class naming convention
MethodNameSameAsClassName=Method name same as class name
AnnotationNamingConvention=Annotation naming convention
StaticVariableNamingConvention=Static variable naming convention
OverloadedVarargsMethod=Overloaded variable argument method
MethodNamesDifferOnlyByCase=Method names differing only by case
ParameterNameDiffersFromOverriddenParameter=Parameter name differs from parameter in overridden method
OverloadedMethodsWithSameNumberOfParameters=Overloaded methods with same number of parameters
UpperCaseFieldNameNotConstant=Non-constant field with upper-case name
NonBooleanMethodNameMayNotStartWithQuestion=Non-boolean method name must not start with question word
QuestionableName=Questionable name
ClassNamePrefixedWithPackageName=Class name prefixed with package name
ConfusingMainMethod=Confusing 'main()' method
MethodNameSameAsParentName=Method name same as parent class name
BooleanMethodNameMustStartWithQuestion=Boolean method name must start with question word
ClassNameSameAsAncestorName=Class name same as ancestor name
StaticMethodNamingConvention=Static method naming convention
NonExceptionNameEndsWithException=Non-exception class name ends with 'Exception'
EnumeratedConstantNamingConvention=Enumerated constant naming convention
StandardVariableNames=Standard variable names
InstanceVariableNamingConvention=Instance variable naming convention
DollarSignInName=Use of '$' in identifier
FinalClass='final' class
UtilityClassWithoutPrivateConstructor=Utility class without private constructor
Singleton=Singleton
UtilityClass=Utility class
ClassInitializer=Non-static initializer
InnerClassOnInterface=Inner class of interface
StaticNonFinalField='static', non-'final' field
FinalStaticMethod='static' method declared 'final'
ConstantDeclaredInAbstractClass=Constant declared in abstract class
FinalPrivateMethod='private' method declared 'final'
FinalMethodInFinalClass='final' method in 'final' class
NoopMethodInAbstractClass=No-op method in abstract class
PublicConstructorInNonPublicClass='public' constructor in non-public class
UtilityClassWithPublicConstructor=Utility class with public constructor
MissingDeprecatedAnnotation=Missing @Deprecated annotation
ClassNameDiffersFromFileName=Class name differs from file name
ProtectedMemberInFinalClass='protected' member in 'final' class
LimitedScopeInnerClass=Limited-scope inner class
MarkerInterface=Marker interface
FieldCanBeLocal=Field can be local
MissingOverrideAnnotation=Missing @Override annotation
EmptyClass=Empty class
ClassMayBeInterface=Class may be interface
ClassInTopLevelPackage=Class without package statement
AnonymousInnerClass=Anonymous inner class
MultipleTopLevelClassesInFile=Multiple top level classes in single file
FinalMethod='final' method
ConstantDeclaredInInterface=Constant declared in interface
AnonymousClassMethodCount=Anonymous inner class with too many methods
ClassComplexity=Overly complex class
AnonymousClassComplexity=Overly complex anonymous inner class
ClassInheritanceDepth=Class too deep in inheritance tree
ClassCoupling=Overly coupled class
FieldCount=Class with too many fields
ClassNestingDepth=Inner class too deeply nested
ConstructorCount=Class with too many constructors
MethodCount=Class with too many methods
UnnecessaryQualifierForThis=Unnecessary qualifier for 'this'
MultipleDeclaration=Multiple variables in one declaration
UnnecessaryFullyQualifiedName=Unnecessary fully qualified name
ConstantOnLHSOfComparison=Constant on left side of comparison
ConstantOnRHSOfComparison=Constant on right side of comparison
MissortedModifiers=Missorted modifers
UnnecessaryFinalOnParameter=Unnecessary 'final' for method parameter
RedundantImplements=Redundant interface declaration
ReturnThis=Return of 'this'
UnnecessarySemicolon=Unnecessary semicolon
MultipleTypedDeclaration=Variables of different types in one declaration
UnnecessaryParentheses=Unnecessary parentheses
ChainedEquality=Chained equality comparisons
NestedMethodCall=Nested method call
CStyleArrayDeclaration=C-style array declaration
ControlFlowStatementWithoutBraces=Control flow statement without braces
UnnecessaryBlockStatement=Unnecessary code block
LiteralAsArgToStringEquals=expression.equals('literal') rather than 'literal'.equals(expression)
UnnecessaryFinalOnLocalVariable=Unnecessary 'final' for local variable
RedundantFieldInitialization=Redundant field initialization
LocalCanBeFinal=Local variable or parameter can be final
UnnecessaryInterfaceModifier=Unnecessary interface modifier
UnnecessaryConstructor=Redundant no-arg constructor
ImplicitCallToSuper=Implicit call to 'super()'
UnqualifiedStaticUsage=Unqualified static usage
UnnecessaryThis=Unnecessary 'this' qualifier
ChainedMethodCall=Chained method calls
TypeParameterExtendsObject=Type parameter explicitly extends 'java.lang.Object'
UnnecessarySuperConstructor=Unnecessary call to 'super()'
ConfusingOctalEscape=Confusing octal escape sequence
UnnecessarilyQualifiedStaticUsage=Unnecessarily qualified static usage
ExtendsObject=Class explicitly extends java.lang.Object
UnnecessaryEnumModifier=Unnecessary enum modifier
CssOverwrittenProperties=CSS overwritten properties
CssNoGenericFontName=CSS no generic font name
CssUnitlessNumber=CSS unitless number
ParameterHidingMemberVariable=Parameter hides member variable
MethodOverridesPrivateMethod=Method overrides private method of superclass
MethodOverloadsParentMethod=Method overloads method of superclass
InnerClassVariableHidesOuterClassVariable=Inner class field hides outer class field
TypeParameterHidesVisibleType=Type parameter hides visible type
ClassEscapesItsScope=Class escapes defined scope
LocalVariableHidingMemberVariable=Local variable hides member variable
MethodOverridesStaticMethod=Method overrides static method of superclass
MethodOverridesPackageLocalMethod=Method overrides package local method of superclass located in other package
FieldHidesSuperclassField=Field name hides field in superclass
StrutsTilesInspection=Tiles inspection
StrutsValidatorInspection=Validator inspection
StrutsInspection=Struts inspection
ComparisonOfShortAndChar=Comparison of 'short' and 'char' values
CachedNumberConstructorCall=Number constructor call with primitive argument
BadOddness=Suspicious test for oddness
IntegerDivisionInFloatingPointContext=Integer division in floating point context
ConfusingFloatingPointLiteral=Confusing floating-point literal
ComparisonToNaN=Comparison to Double.NaN or Float.NaN
PointlessArithmeticExpression=Pointless arithmetic expression
CastThatLosesPrecision=Numeric cast that loses precision
LongLiteralsEndingWithLowercaseL=Long literal ending with 'l' instead of 'L'
OverlyComplexArithmeticExpression=Overly complex arithmetic expression
FloatingPointEquality=Floating point equality comparison
ConstantMathCall=Constant call to java.lang.Math or StrictMath
ImplicitNumericConversion=Implicit numeric conversion
OctalLiteral=Octal integer
BigDecimalEquals='equals()' called on BigDecimal
IntegerMultiplicationImplicitCastToLong=Integer multiplication or shift implicitly cast to long
DivideByZero=Division by zero
NonReproducibleMathCall=Non-reproducible call to java.lang.Math
UnaryPlus=Unary plus
OnDemandImport=* import
RedundantImport=Redundant import
UnusedImport=Unused import
JavaLangImport=java.lang import
SamePackageImport=Import from same package
SingleClassImport=Single class import
StaticImport=Static import
UnhandledExceptionInJSP=Unhandled Exception in JSP
BadExceptionDeclared=Prohibited exception declared
ThrowCaughtLocally='throw' caught by containing 'try' statement
ExceptionFromCatchWhichDoesntWrap='throw' inside 'catch' block which ignores the caught exception
ThreadDeathRethrown=java.lang.ThreadDeath not rethrown
ReturnFromFinallyBlock='return' inside 'finally' block
CheckedExceptionClass=Checked exception class
ThrowFromFinallyBlock='throw' inside 'finally' block
CatchGenericClass='catch' generic class
TooBroadCatch=Overly broad 'catch' block
NonFinalFieldOfException=Non-final field of exception class
NestedTryStatement=Nested 'try' statement
EmptyFinallyBlock=Empty 'finally' block
InstanceofCatchParameter='instanceof' on 'catch' parameter
EmptyCatchBlock=Empty 'catch' block
UncheckedExceptionClass=Unchecked exception class
ErrorRethrown=java.lang.Error not rethrown
BadExceptionCaught=Prohibited exception caught
EmptyTryBlock=Empty 'try' block
UnusedCatchParameter=Unused 'catch' parameter
FinallyBlockCannotCompleteNormally='finally' block which can not complete normally
BadExceptionThrown=Prohibited exception thrown
ContinueOrBreakFromFinallyBlock='continue' or 'break' inside 'finally' block
CloneCallsSuperClone='clone()' does not call 'super.clone()'
CloneInNonCloneableClass='clone()' method in non-Cloneable class
CloneCallsConstructors='clone()' instantiates objects with constructor
CloneDeclaresCloneNotSupported='clone()' does not declare 'CloneNotSupportedException'
CloneableImplementsClone=Cloneable class without 'clone()'
UnusedMessageFormatParameter=Missing message format parameter
UnusedProperty=Unused Property
JSUnresolvedVariable=Unresolved Java Script Variables
JSUndeclaredVariable=Implicitly Declared Java Script Variables
JSUnresolvedFunction=Unresolved Java Script Functions
RedundantTypeArguments=Redundant type arguments
RedundantCast=Redundant type cast
RedundantArrayCreation=Redundant array creation
ClassWithoutConstructor=Class without constructor
ClassWithoutNoArgConstructor=Class without no-arg constructor
FieldHasSetterButNoGetter=Field has setter but no getter
TooBroadScope=Scope of variable is too broad
ReuseOfLocalVariable=Reuse of local variable
UnnecessaryLocalVariable=Redundant local variable
ComponentNotRegistered=Component/Action not registered
ComponentRegistrationProblems=Component type mismatch
NonProtectedConstructorInAbstractClass=Constructor not 'protected' in 'abstract' class
ExtendsUtilityClass=Class extends utility class
RedundantMethodOverride=Method is identical to its super method
AbstractClassExtendsConcreteClass=Abstract class extends concrete class
InterfaceNeverImplemented=Interface which has no concrete subclass
AbstractMethodOverridesAbstractMethod=Abstract method overrides abstract method
ExtendsAnnotation=Class extends annotation interface
RefusedBequest=Refused bequest
AbstractMethodOverridesConcreteMethod=Abstract method overrides concrete method
StaticInheritance=Static inheritance
AbstractClassWithoutAbstractMethods=Abstract class without abstract methods
ExtendsConcreteCollection=Class explicitly extends a Collection class
AbstractMethodWithMissingImplementations=Abstract method with missing implementations
AbstractClassNeverImplemented=Abstract class which has no concrete subclass
AssignmentUsedAsCondition=Assignment used as condition
StaticCallOnSubclass=Static method referenced via subclass
MisspelledEquals='equal()' instead of 'equals()'
NullArgumentToVariableArgMethod=Confusing 'null' argument to var-arg method
ResultSetIndexZero=Use of index 0 in JDBC ResultSet
EqualsUsesNonFinalVariable=Non-final field referenced in 'equals()'
ObjectEquality=Object comparison using ==, instead of 'equals()'
EqualsWhichDoesntCheckParameterClass='equals()' method which does not check class of parameter
ConstantConditions=Constant conditions & exceptions
SubtractionInCompareTo=Subtraction in compareTo()
AssignmentToStaticFieldFromInstanceMethod=Assignment to static field from instance method
CollectionAddedToSelf=Collection added to self
UnusedAssignment=Unused assignment
CovariantEquals=Covariant 'equals()'
NonShortCircuitBoolean=Non-short-circuit boolean expression
OctalAndDecimalIntegersMixed=Octal and decimal integers in same array
HashCodeUsesNonFinalVariable=Non-final field referenced in 'hashCode()'
CastToIncompatibleInterface=Casting to incompatible interface
IgnoreResultOfCall=Result of method call ignored
SuspiciousMethodCalls=Suspicious collections method calls
ResultOfObjectAllocationIgnored=Result of object allocation ignored
InstanceofIncompatibleInterface='instanceof' with incompatible interface
EqualsBetweenInconvertibleTypes='equals()' between objects of inconvertible types
MisspelledHashcode='hashcode()' instead of 'hashCode()'
NullableProblems=@NotNull/@Nullable problems
InstantiationOfUtilityClass=Instantiation of utility class
ObjectEqualsNull=Object.equals(null)
ObjectToString=Call to default 'toString()'
MismatchedCollectionQueryUpdate=Mismatched query and update of collection
EmptyStatementBody=Statement with empty body
StringEquality=String comparison using '==', instead of 'equals()'
ReflectionForUnavailableAnnotation=Reflective access to a source-only annotation
TextLabelInSwitchStatement=Text label in 'switch' statement
SuspiciousSystemArraycopy=Suspicious 'System.arraycopy()' call
InfiniteRecursion=Infinite recursion
CompareToUsesNonFinalVariable=Non-final field referenced in 'compareTo()'
MisspelledToString='tostring()' instead of 'toString()'
MisspelledCompareTo='compareto()' instead of 'compareTo()'
StaticFieldReferenceOnSubclass=Static field referenced via subclass
CastConflictsWithInstanceof=Cast conflicts with 'instanceof'
SuspiciousNameCombination=Suspicious variable/parameter name combination
CovariantCompareTo=Covariant 'compareTo()'
MalformedRegex=Malformed regular expression
ReplaceAllDot=Call to String.replaceAll('.', ...)
ForLoopThatDoesntUseLoopVariable='for' loop where update or condition does not use loop variable
ComparingReferences=== used instead of equals()
UseOfPropertiesAsHashtable=Use of Properties object as a Hashtable
MalformedFormatString=Malformed format string
SuspiciousToArrayCall=Suspicious 'Collections.toArray()' call
MalformedXPath=Malformed XPath expression
EmptyInitializer=Empty class initializer
IteratorHasNextCallsIteratorNext='Iterator.hasNext()' which calls 'next()'
MismatchedArrayReadWrite=Mismatched read and write of array
AssignmentToNull=Assignment to 'null'
ComparatorNotSerializable=Comparator class not declared Serializable
PrimitiveArrayArgumentToVariableArgMethod=Confusing primitive array argument to var-arg method
ReturnNull=Return of 'null'
IteratorNextDoesNotThrowNoSuchElementException='Iterator.next()' which can't throw 'NoSuchElementException'
ArchaicSystemPropertyAccess=Use of archaic system property accessors
ArrayEquals='equals()' called on array type
FacesModelInspection=Faces Model Inspection
AssertsWithoutMessages=Message missing on JUnit assertion
TestMethodWithoutAssertion=JUnit test method without any assertions
TestMethodInProductCode=!test.method.in.product.code.display.name!
JUnitAbstractTestClassNamingConvention=JUnit abstract test class naming convention
TestCaseInProductCode=JUnit TestCase in product source
MisspelledTearDown='teardown()' instead of 'tearDown()'
TestCaseWithConstructor=JUnit TestCase with non-trivial constructors
SetupCallsSuperSetup='setUp()' does not call 'super.setUp()'
UnconstructableTestCase=Unconstructable JUnit TestCase
BeforeOrAfterIsPublicVoidNoArg=Malformed @Before or @After method
TestMethodIsPublicVoidNoArg=Test method with incorrect signature
StaticSuite='suite()' method not declared 'static'
MisorderedAssertEqualsParameters=Misordered 'assertEquals()' parameters
SimplifiableJUnitAssertion=Simplifiable JUnit assertion
MisspelledSetUp='setup()' instead of 'setUp()'
SetupIsPublicVoidNoArg='setUp()' with incorrect signature
TeardownIsPublicVoidNoArg='tearDown()' with incorrect signature
BeforeClassOrAfterClassIsPublicStaticVoidNoArg=Malformed @BeforeClass or @AfterClass method
TeardownCallsSuperTeardown='tearDown()' does not call 'super.tearDown()'
JUnitTestClassNamingConvention=JUnit test class naming convention
TestCaseWithNoTestMethods=JUnit test case with no tests
Weblogic=WebLogic
StaticCollection=Static collection
StringBufferField=StringBuffer field
ZeroLengthArrayInitialization=Zero-length array allocation
SystemGC=Calls to 'System.gc()' or 'Runtime.gc()'
ThreadPriority=Call to 'Thread.setPriority()'
NotifyWithoutCorrespondingWait='notify()' without corresponding 'wait()'
UnconditionalWait=Unconditional 'wait()' call
NotifyCalledOnCondition='notify()'  or 'notifyAll()' called on Condition object
ThreadRun=Call to 'Thread.run()'
NonSynchronizedMethodOverridesSynchronizedMethod=Non-synchronized method overrides synchronized method
SynchronizeOnThis=Synchronization on 'this'
SleepWhileHoldingLock=Call to 'Thread.sleep()' while synchronized
BusyWait=Busy wait
ThreadYield=Call to 'Thread.yield()'
WaitNotInLoop='wait()' not in loop
CallToNativeMethodWhileLocked=Call to a native method while locked
AwaitWithoutCorrespondingSignal='await()' without corresponding 'signal()'
FieldAccessedSynchronizedAndUnsynchronized=Field accessed in both synchronized and unsynchronized contexts
AwaitNotInLoop='await()' not in loop
WaitOrAwaitWithoutTimeout='wait()' or 'await()' without timeout
ExtendsThread=Class explicitly extends java.lang.Thread
VolatileLongOrDoubleField=Volatile long or double field
NakedNotify='notify()' or 'notifyAll()' without corresponding state change
SynchronizeOnNonFinalField=Synchronization on a non-final field
ConditionSignal=Call to 'signal()' instead of 'signalAll()'
SignalWithoutCorrespondingAwait='signal()' without corresponding 'await()'
ThreadWithDefaultRunMethod=Instantiating a Thread with default 'run()' method
WhileLoopSpinsOnField=While loop spins on field
ThreadStopSuspendResume=Call to 'Thread.stop()', 'suspend()' or 'resume()'
VolatileArrayField=Volatile array field
WaitNotInSynchronizedContext='wait()' while not synced
ObjectNotify=Call to 'notify()' instead of 'notifyAll()'
ThreadStartInConstruction=Call to 'Thread.start()' during object construction
WaitWithoutCorrespondingNotify='wait()' without corresponding 'notify()'
NotifyNotInSynchronizedContext='notify()' or 'notifyAll()' while not synced
SafeLock=Lock acquired but not safely unlocked
SystemRunFinalizersOnExit=Call to 'System.runFinalizersOnExit()'
DoubleCheckedLocking=Double-checked locking
AccessToStaticFieldLockedOnInstance=Access to static field locked on instance data
WaitWhileHoldingTwoLocks='wait()' while holding two locks
EmptySynchronizedStatement=Empty 'synchronized' statement
SynchronizeOnLock=Synchronization on a java.util.concurrent.locks.Lock object
NestedSynchronizedStatement=Nested 'synchronized' statement
PublicFieldAccessedInSynchronizedContext=Non-private field accessed in synchronized context
ArithmeticOnVolatileField=Arithmetic operation on volatile field
SynchronizedMethod='synchronized' method
WaitCalledOnCondition='wait()' called on Condition object
