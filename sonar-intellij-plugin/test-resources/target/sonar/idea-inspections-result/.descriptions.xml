<inspections profile="ideainspections">
  <group name="">
    <inspection shortName="EqualsAndHashcode" displayName="equals() and hashCode() not paired">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports classes that override method
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;equals()&lt;/font&gt;&lt;/b&gt; but do not override method
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;hashCode()&lt;/font&gt;&lt;/b&gt;, or vice versa, which could potentially lead to problems
when class is added to a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Collection&lt;/font&gt;&lt;/b&gt;.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BooleanMethodIsAlwaysInverted" displayName="Boolean method is always inverted">&lt;html&gt;
&lt;body&gt;
This inspection reports methods with &lt;b&gt;boolean&lt;/b&gt; return type
which usages are always occur in negated context.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;class&lt;/b&gt; C {
  &lt;b&gt;boolean&lt;/b&gt; inverted() {
    &lt;b&gt;return&lt;/b&gt; &lt;b&gt;true&lt;/b&gt;;
  }

  &lt;b&gt;void&lt;/b&gt; f() {
    &lt;b&gt;if&lt;/b&gt; (!inverted()) {
      &lt;b&gt;return&lt;/b&gt;;
    }
  }
  &lt;b&gt;boolean&lt;/b&gt; member = !inverted();
}  
&lt;/pre&gt;&lt;/code&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Deprecation" displayName="Deprecated API usage">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports where deprecated code is used in the specified inspection scope.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="Dependency" displayName="Illegal package dependencies">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection detects violations of rules specified for dependency validation.&lt;br&gt;&lt;br&gt;
Use the &quot;Configure dependency rules&quot; button below to customize validation rules.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UNCHECKED_WARNING" displayName="Unchecked warning">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;b&gt;JDK 5.0 only.&lt;/b&gt;&lt;/font&gt;&lt;br&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Signals places where an unchecked warning is issued
by the compiler, for example:&lt;/font&gt;
&lt;pre&gt;&lt;code&gt;void f(HashMap map) {
      map.put(&quot;key&quot;, &quot;value&quot;);
}
  &lt;/code&gt;
    &lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SillyAssignment" displayName="Variable is assigned to itself">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Detects assignments of a variable to itself, like:&lt;br&gt;
&lt;br&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;a = a;&lt;/font&gt;&lt;/b&gt;&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WrongPackageStatement" displayName="Wrong package statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Detects package statements that do not correspond to the project directory structure.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AccessStaticViaInstance" displayName="Access static member via instance reference">&lt;html&gt;
&lt;body&gt;
Shows references to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;static&lt;/font&gt;&lt;/b&gt; methods and fields
via class instance rather than a class itself.
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Method metrics">
    <inspection shortName="MethodCoupling" displayName="Overly coupled method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods which are highly coupled, i.e. that reference too many other classes.
Methods with too high a coupling can be very fragile, and should probably be broken up. References to system classes
(those in the &lt;b&gt;java.&lt;/b&gt;or &lt;b&gt;javax.&lt;/b&gt; packages), are not
counted for purposes of this inspection.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable coupling a method might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodWithMultipleLoops" displayName="Method with multiple loops">&lt;html&gt;
&lt;body&gt;
This inspection reports methods containing multiple loop statements.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleReturnPointsPerMethod" displayName="Method with multiple return points.">&lt;html&gt;
&lt;body&gt;
This inspection reports methods with too many return points. Methods
with too many return points may be confusing, and hard to refactor.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of return points a method might have.
Use the check boxes below to specify if guard clause and/or return points inside 
&lt;b&gt;equals()&lt;/b&gt; methods should be ignored.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreeNegationsPerMethod" displayName="Method with more than three negations">&lt;html&gt;
&lt;body&gt;
This inspection reports methods with three or more negation operations (&lt;b&gt;!&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt;).
Such methods may be unnecessarily confusing.
&lt;p&gt;
Use the checkbox below to disable this inspection within &apos;equals()&apos; methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrownExceptionsPerMethod" displayName="Method with too many exceptions declared">&lt;html&gt;
&lt;body&gt;
This inspection reports methods that are declared as throwing too many
different types of exceptions. Methods with too many exceptions declared
are a good sign that your error handling code is getting overly complex.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of throw clauses a method might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestingDepth" displayName="Overly nested method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods whose bodies are too deeply nested. Methods with too much statement
nesting may be confusing, and are a good sign that refactoring may be necessary.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable nesting depth a method might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonCommentSourceStatements" displayName="Overly long method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods that are too long. Methods that are too long
may be confusing, and are a good sign that refactoring is necessary.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of non-comment source statements a method might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParametersPerMethod" displayName="Method with too many parameters">&lt;html&gt;
&lt;body&gt;
This inspection reports methods with too many parameters. Methods with too many parameters
can be a good sign that refactoring is necessary. Methods whose signatures are inherited from
library classes are ignored by this inspection.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of parameters a method might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CyclomaticComplexity" displayName="Overly complex method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods that have too high a cyclomatic complexity. Cyclomatic
complexity is basically a measurement of the number of branching points in a method. Methods with too high
a cyclomatic complexity may be confusing and difficult to test.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable cyclomatic complexity a method might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParametersPerConstructor" displayName="Constructor with too many parameters">&lt;html&gt;
&lt;body&gt;
This inspection reports constructors with too many parameters. Constructors
with too many parameters can be a good sign that refactoring is necessary.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of parameters a constructor might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Control Flow">
    <inspection shortName="GroovyUnnecessaryReturn" displayName="Unnecessary &apos;return&apos; statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports on any unnecessary Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements at the end of constructors and methods returning
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt;.  These may be safely removed.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovySwitchStatementWithNoDefault" displayName="Switch statement with no default case">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements that do not contain
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;default&lt;/font&gt;&lt;/b&gt;  labels.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyLoopStatementThatDoesntLoop" displayName="Loop statement that doesn&apos;t loop">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instance of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; or
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt; statements whose
bodies are guaranteed to execute at most once.  Normally, this is an indication of a bug.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConstantIfStatement" displayName="Constant if statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements of the form
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if(true)...&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if(false)...&lt;/font&gt;&lt;/b&gt;.
These statements sometimes occur due to automatic refactorings, and may obviously
be simplified.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyBreak" displayName="Break statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt; statements in a Groovy script, other than in switch statements.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyContinue" displayName="Continue statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements in a Groovy script.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyIfStatementWithIdenticalBranches" displayName="If statement with identical branches">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;
statements with identical &quot;then&quot; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;else&lt;/font&gt;&lt;/b&gt; branches.  Such statements are almost certainly
programmer error.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyTrivialConditional" displayName="Redundant conditional expression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy ternary conditional operators of the form &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;x?true:false&lt;/font&gt;&lt;/b&gt;
    or similar, which can be trivially simplified.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConditionalWithIdenticalBranches" displayName="Conditional expression with identical branches">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy conditional expressions
with identical &quot;then&quot; and &quot;else&quot; branches.  Such expressions are almost certainly
programmer error.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConditionalCanBeElvis" displayName="Conditional expression can be elvis">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any uses of the ternary condition operator in Groovy which can be replaced by the simpler
&quot;elvis&quot; operator.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConditionalCanBeConditionalCall" displayName="Conditional expression can be conditional call">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy ternary conditional expressions which can be replaced by the conditional
    call (?.) operation.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyFallthrough" displayName="Fallthrough in switch statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of &apos;fallthrough&apos; in a Groovy switch statement.  While occasionally useful,
  fallthrough is often unintended, and may lead to surpising bugs.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyTrivialIf" displayName="Redundant &apos;if&apos; statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements which can be simplified to single assignment or
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements.  For example:
&lt;pre&gt;
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;(foo())
    {
       &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return true&lt;/font&gt;&lt;/b&gt;;
    }
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;else&lt;/font&gt;&lt;/b&gt;
    {
       &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return false&lt;/font&gt;&lt;/b&gt;;
    }
&lt;/pre&gt;
can be simplified to
&lt;pre&gt;
    &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; foo();
&lt;/pre&gt;
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyIfStatementWithTooManyBranches" displayName="If statement with too many branches">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements with too many branches.
Such statements may be confusing, and are often the sign of inadequate levels of design
abstraction.
&lt;p&gt;
Use the field provided below to specify the maximum number of branches expected.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyReturnFromClosureCanBeImplicit" displayName="&apos;return&apos; statement can be implicit">&lt;html&gt;
&lt;body&gt;

                This inspection reports any return statements at the end of Groovy closures which can be made implicit.
                Groovy closures
                implicitly return the value of the last statement in them.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnnecessaryContinue" displayName="Unnecessary &apos;continue&apos; statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports on any unnecessary Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements at the end of loops.
These may be safely removed.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConstantConditional" displayName="Constant conditional expression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy conditional expressions of the form
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/font&gt;&lt;/b&gt;.
These expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Serialization issues">
    <inspection shortName="SerialVersionUIDNotStaticFinal" displayName="&apos;serialVersionUID&apos; field not declared &apos;private static final long&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; classes whose &lt;b&gt;serialVersionUID&lt;/b&gt; field.
is not declared &lt;b&gt;private static final long&lt;/font &gt;&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableWithSerialVersionUIDField" displayName="Non-serializable class with &apos;serialVersionUID&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;Serializable&lt;/b&gt; classes which define a &lt;b&gt;serialVersionUID&lt;/b&gt;
field. This is usually an indication of a programmer error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableHasSerializationMethods" displayName="Serializable class without &apos;readObject()&apos; and &apos;writeObject()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; classes
which do not provide &lt;b&gt;readObject&lt;/b&gt; and
&lt;b&gt;writeObject&lt;/b&gt; methods. If &lt;b&gt;readObject&lt;/b&gt;
and &lt;b&gt;writeObject&lt;/b&gt; methods are not provided, the default serialization
algorithms are used, which may be sub-optimal in many environments for performance and compatibility
purposes.
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReadObjectInitialization" displayName="Instance field may not be initialized by &apos;readObject()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports variables which are not guaranteed to be initialized after the object is
deserialized by the &lt;b&gt;readObject()&lt;/b&gt; method.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report instance variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableFieldInSerializableClass" displayName="Non-serializable field in a Serializable class">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;Serializable&lt;/b&gt;
fields in &lt;b&gt;Serializable&lt;/b&gt; classes. Such fields will result
in runtime exceptions if the object is serialized. Fields declared
&lt;b&gt;transient&lt;/b&gt; or &lt;b&gt;static&lt;/b&gt;
are not reported, nor are fields of classes which have defined a &lt;b&gt;writeObject&lt;/b&gt;
method. For purposes of this inspection, fields with
&lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt; types are assumed to be
&lt;b&gt;Serializable&lt;/b&gt;, unless the types
they are declared to contain are non-&lt;b&gt;Serializable&lt;/b&gt;.
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableObjectPassedToObjectStream" displayName="Non-serializable object passed to ObjectOutputStream">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;Serializable&lt;/b&gt; objects used as arguments to
&lt;b&gt;java.io.ObjectOutputStream.write()&lt;/b&gt;. Such calls will result in runtime exceptions.
For purposes of this inspection, objects with &lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt; types are assumed to be &lt;b&gt;Serializable&lt;/b&gt;, unless the types
they are declared to contain are non-&lt;b&gt;Serializable&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableHasSerialVersionUIDField" displayName="Serializable class without &apos;serialVersionUID&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;Serializable&lt;/b&gt; classes which do not provide a &lt;b&gt;serialVersionUID&lt;/b&gt; field.
Without a &lt;b&gt;serialVersionUID&lt;/b&gt; field, any change to a class will make previously serialized versions unreadable.
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableInnerClassHasSerialVersionUIDField" displayName="Serializable non-static inner class without &apos;serialVersionUID&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; non-static
inner classes which do not provide a &lt;b&gt;serialVersionUID&lt;/b&gt; field.
Without a &lt;b&gt;serialVersionUID&lt;/b&gt; field, any change to a class will make previously serialized versions unreadable.
It is strongly recommended that &lt;b&gt;Serializable&lt;/b&gt; non-static inner classes have
a &lt;b&gt;serialVersionUID&lt;/b&gt; field, otherwise the default serialization algorithm
may result in serialized versions being incompatible between compilers, due to differences in synthetic
accessor methods.
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TransientFieldNotInitialized" displayName="Transient field is not initialized on deserialization">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;transient&lt;/b&gt; fields which
are initialized during normal object construction, but whose class does not have a
&lt;b&gt;readObject&lt;/b&gt; method.
Because &lt;b&gt;transient&lt;/b&gt; fields are not serialized they need
to be initialized separately in a &lt;b&gt;readObject&lt;/b&gt; method
during deserialization. Any &lt;b&gt;transient&lt;/b&gt; fields which 
are not initialized during normal object construction are considered to use the default
initialization and are not reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparatorNotSerializable" displayName="Comparator class not declared Serializable">&lt;html&gt;
&lt;body&gt;
This inspection reports on subclasses of &lt;b&gt;java.lang.Comparator&lt;/b&gt; which are not
also &lt;b&gt;Serializable&lt;/b&gt;. Objects of &lt;b&gt;java.util.TreeMap&lt;/b&gt;
or &lt;b&gt;java.util.TreeSet&lt;/b&gt; will become non-&lt;b&gt;Serializable&lt;/b&gt;
if instantiated with such &lt;b&gt;Comparator&lt;/b&gt;s. This can result in unexpected and difficult-to-diagnose
bugs. Since subclasses of &lt;b&gt;java.lang.Comparator&lt;/b&gt; are often stateless, simply marking
them &lt;b&gt;Serializable&lt;/b&gt; is a small cost to avoid such issues.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReadObjectAndWriteObjectPrivate" displayName="&apos;readObject()&apos; or &apos;writeObject()&apos; not declared &apos;private&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; classes where the &lt;b&gt;readObject&lt;/b&gt;
and &lt;b&gt;writeObject()&lt;/b&gt; methods are not declared &lt;b&gt;private&lt;/b&gt;. There is no reason these methods should ever
have greater visibility than that.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableInnerClassWithNonSerializableOuterClass" displayName="Serializable non-static inner class with non-Serializable outer class">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; non-static
inner classes whose outer classes are non-&lt;b&gt;Serializable&lt;/b&gt;. Such classes
are unlikely to serialize correctly, due to implicit references from the inner to outer class.
&lt;p&gt;
Use the table below to specify what specific classes and inheritors should be excluded
from being checked by this inspection. This is meant for those classes which, although they inherit
Serializable from a superclass, are not intended for serialization. Such classes would lead this
inspection to report unnecessarily.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableWithUnconstructableAncestor" displayName="Serializable class with unconstructable ancestor">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; classes whose closest non-serializable ancestor lacks
a no-argument constructor. Such classes can not be deserialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TransientFieldInNonSerializableClass" displayName="Transient field in non-serializable class">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;transient&lt;/b&gt; fields in non-&lt;b&gt;Serializable&lt;/b&gt; classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableObjectBoundToHttpSession" displayName="Non-serializable object bound to HttpSession">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;Serializable&lt;/b&gt; objects used as arguments to
&lt;b&gt;javax.servlet.http.HttpSession.setAttribute()&lt;/b&gt; or
&lt;b&gt;javax.servlet.http.HttpSession.putValue()&lt;/b&gt;.
Such objects will not be serialized if the HttpSession is passivated or migrated, and may result in difficult-to-diagnose
bugs. For purposes of this inspection, objects with &lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt; types are assumed to be &lt;b&gt;Serializable&lt;/b&gt;, unless the types
they are declared to contain are non-&lt;b&gt;Serializable&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerialPersistentFieldsWithWrongSignature" displayName="&apos;serialPersistentFields&apos; field not declared &apos;private static final ObjectStreamField[]&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; classes whose &lt;b&gt;serialPersistentFields&lt;/b&gt; field.
is not declared &lt;b&gt;private static final ObjectStreamField&lt;/font &gt;&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSerializableWithSerializationMethods" displayName="Non-serializable class with &apos;readObject()&apos; or &apos;writeObject()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;Serializable&lt;/b&gt; classes which define &lt;b&gt;readObject()&lt;/b&gt;
or &lt;b&gt;writeObject()&lt;/b&gt; methods. Such methods normally indicate programmer error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExternalizableWithSerializationMethods" displayName="Externalizable class with &apos;readObject()&apos; or &apos;writeObject()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Externalizable&lt;/b&gt; classes which define &lt;b&gt;readObject()&lt;/b&gt;
or &lt;b&gt;writeObject()&lt;/b&gt; methods. These methods are not called for serialization of
&lt;b&gt;Externalizable&lt;/b&gt; objects.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReadResolveAndWriteReplaceProtected" displayName="&apos;readResolve()&apos; or &apos;writeReplace()&apos; not declared &apos;protected&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Serializable&lt;/b&gt; classes where the &lt;b&gt;readResolve()&lt;/b&gt;
and &lt;b&gt;writeReplace()&lt;/b&gt; methods are not declared &lt;b&gt;protected&lt;/b&gt;. Note: in the case
of classes declared &lt;b&gt;final&lt;/b&gt;, these methods may be
declared &lt;b&gt;private&lt;/b&gt;, instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Annotations verifying">
    <inspection shortName="GroovyImmutableAnnotation" displayName="Check &apos;@Immutable&apos; annotation conventions">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
Checks that classes annotated by @Immutable annotation are final
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySingletonAnnotation" displayName="Check &apos;@Singleton&apos; annotation conventions">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
Checks that classes annotated by @Singleton have private constructors
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="toString() issues">
    <inspection shortName="ClassHasNoToStringMethod" displayName="Class does not overwrite toString() method">&lt;html&gt;
    &lt;body&gt;
        &lt;table height=&quot;170&quot;&gt; &lt;tr height=&quot;150&quot;&gt; &lt;td valign=&quot;top&quot;&gt;
        &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
            This inspection reports any classes with no toString() method.
        &lt;/font&gt;
        &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldNotUsedInToString" displayName="Field not used in toString() method">&lt;html&gt;
    &lt;body&gt;
        &lt;table height=&quot;170&quot;&gt; &lt;tr height=&quot;150&quot;&gt; &lt;td valign=&quot;top&quot;&gt;
        &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
          This inspection reports any fields which are not used in the toString() method of the class. This can be useful to discover
          fields that were added after the toString() method was created and for which the toString() method was not correctly adjusted.
          It is possible to exclude fields from this check in the settings accessible via the Generate &gt; toString() dialog.
            &lt;p&gt;
            This inspection will also check for problems with getter methods if &apos;enable getters in code generation&apos; is enabled
            in settings.
        &lt;/font&gt;
        &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="J2ME issues">
    <inspection shortName="MultiplyOrDivideByPowerOfTwo" displayName="Multiply or divide by power of two">&lt;html&gt;
&lt;body&gt;
This inspection reports multiplication of an integer value by a constant power of 2. These
expressions may be replaced by right or left shift operations, to some possible performance improvement.
&lt;p&gt;
Use the check box below to enable the inspection for divisions by a power of two also. Note that replacing
a power of two division by a shift does not work for negative numbers.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConnectionResource" displayName="Connection opened but not safely closed">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports any J2ME Connection resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RecordStoreResource" displayName="RecordStore opened but not safely closed">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports any J2ME RecordStore resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SingleCharacterStartsWith" displayName="Single character &apos;startsWith()&apos; or &apos;endsWith()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports any calls to &lt;b&gt;String.startsWith()&lt;/b&gt; or
&lt;b&gt;String.endsWith()&lt;/b&gt; which are passed single character string
literals as parameter. Such calls may be more efficiently implemented with
&lt;b&gt;String.charAt()&lt;/b&gt;. Because the performance gain is
minimal, the needed extra check for non-zero length, and the negative effect on
code clarity, it is recommended to do so only inside tight loops.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyLargePrimitiveArrayInitializer" displayName="Overly large initializer for array of primitive type">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports array initializer expressions for primitive
arrays which contain too many elements. Such initializers may result in overly large
class files, as code must be generated to initialize each array element. In memory
or bandwidth constrained environments, it may be more efficient to load large arrays
of primitives from resource files.
&lt;p&gt;
Use the field below to specify the maximum number of elements to allow in
primitive array initializers.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldRepeatedlyAccessed" displayName="Field repeatedly accessed in method">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports fields which are accessed three or more times by a given method,
or which are accessed in a loop. While such field access may be logically correct, it is often more performant
to replace such accesses with local variables, copying the fields to a temporary local and copying back if necessary.
&lt;p&gt;
Use the checkbox below to ignore &lt;b&gt;final&lt;/b&gt; fields being repeatedly accessed, as many compilers and JVMs
can optimize that case without explicit creation of a temporary local variable. Constant fields are always ignored by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PrivateMemberAccessBetweenOuterAndInnerClass" displayName="Private member access between outer and inner classes">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
An inner class and its containing class are compiled to separate
class files. The virtual machine normally prohibits access from a class to private fields and methods of
another class. To enable access from an inner class to private members of a
containing class or the other way around javac and other compilers create package private
synthetic accessor methods. Less use of memory and greater performance may be achieved by making the
member package local, thus allowing direct access without the creation of synthetic accessor methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayLengthInLoopCondition" displayName="Array.length in loop condition">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports any access to the &lt;b&gt;.length&lt;/b&gt; of an array in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousInnerClassMayBeStatic" displayName="Anonymous inner class may be a named static inner class">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports any anonymous inner classes which may safely be made into a named
&lt;b&gt;static&lt;/b&gt; inner class. An inner class may be static if it doesn&apos;t reference
its enclosing class instance or local variables. A static inner class uses slightly less memory.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableIfStatement" displayName="&apos;if&apos; statement may be replaced with &amp;&amp; or || expression">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports if statements of the form
&lt;b&gt;if (&lt;i&gt;condition&lt;/i&gt;) return true else return &lt;i&gt;foo&lt;/i&gt;&lt;/b&gt;
or &lt;b&gt;if (&lt;i&gt;condition&lt;/i&gt;) return false else return &lt;i&gt;foo&lt;/i&gt;&lt;/b&gt;.
These expressions may be safely simplified to
&lt;b&gt;return &lt;i&gt;condition&lt;/i&gt; &amp;&amp; &lt;i&gt;foo&lt;/i&gt;&lt;/b&gt; or
&lt;b&gt;return !&lt;i&gt;condition&lt;/i&gt; || &lt;i&gt;foo&lt;/i&gt;&lt;/b&gt;, respectively.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodCallInLoopCondition" displayName="Method call in loop condition">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports method calls in the condition part of a
loop statement. In highly resource constrained environments, such calls may
have adverse performance implications
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassWithOnlyOneDirectInheritor" displayName="Abstract class which has only one direct inheritor">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports abstract classes which have precisely one
direct inheritor. While such classes may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments, they needlessly increase
the total footprint of the application. Consider merging the abstract class with it&apos;s inheritor.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckForOutOfMemoryOnLargeArrayAllocation" displayName="Large array allocation with no OutOfMemoryError check">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports large array allocations which do not check
for &lt;b&gt;java.lang.OutOfMemoryError&lt;/b&gt;. In memory
constrained environments, allocations of large data objects should probably
be checked for memory depletion.
&lt;p&gt;
Use the field below to specify the maximum number of elements to allow in
unchecked array allocations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InterfaceWithOnlyOneDirectInheritor" displayName="Interface which has only one direct inheritor">&lt;html&gt;
&lt;body&gt;
This inspection is intended for J2ME and other highly resource constrained environments.
Applying the results of this inspection without consideration might have negative effects on code clarity and design.
&lt;p&gt;
This inspection reports interfaces which have precisely one
direct inheritor. While such interfaces may offer admirable clarity of design,
in memory-constrained or bandwidth-limited environments,
they needlessly increase the total footprint of the application. Consider
merging the interface with it&apos;s inheritor.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Declaration redundancy">
    <inspection shortName="RedundantThrows" displayName="Redundant throws clause">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports exceptions that are declared in a method&apos;s signature but never
thrown by the method itself or its implementations/derivatives. Since this inspection requires global code analysis,
it is only available in batch inspection mode. A limited version for use in editor highlighting is available as
&lt;nobr&gt;&lt;i&gt;General | Redundant throws declaration&lt;/i&gt;.&lt;/nobr&gt;&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantThrowsDeclaration" displayName="Redundant throws declaration">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports exceptions that are declared in a method&apos;s signature but never thrown by the method itself.
Only final, private or static methods are analyzed. For other methods, global code analysis is required.
For batch inspections, this can be achieved using &lt;nobr&gt;&lt;i&gt;Declaration Redundancy | Redundant throws clause&lt;/i&gt;.&lt;/nobr&gt;&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedDeclaration" displayName="Unused declaration">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports classes, methods or fields in the specified inspection scope that
are not used or not reachable from entry points.&lt;br&gt;&lt;br&gt;
Use check boxes in the inspection options below, to specify what should be automatically assumed entry points. You will
also have a possibility to add entry points manually when inspection results are ready.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SameParameterValue" displayName="Actual method parameter is the same constant">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports methods where a value being passed to a particular parameter
appears to be always the same constant.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryModuleDependencyInspection" displayName="Unnecessary module dependency">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection lists modules which contain redundant dependencies on other modules.
  These dependencies can be safely removed.

&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedParameters" displayName="Unused method parameters">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports parameters that are not used by their methods and all method
implementations/overriders.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UNUSED_SYMBOL" displayName="Unused symbol">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
Detects local variables and private members that are declared but not used,
never accessed for reading or not initialized in a class.
&lt;br&gt;Can ignore members that are annotated in a special way, for example, by EJB annotation javax.ejb.EJB.
Additional annotations can be configured below.
&lt;br&gt;
  The &lt;b&gt;Report unused parameters in non-private method&lt;/b&gt; setting is used to
  detect unused parameters of public/protected/package local methods which are neither overridden nor override other method.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantSuppression" displayName="Redundant suppression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports usages of
  &lt;ul&gt;
    &lt;li&gt;&lt;code&gt;@SuppressWarning&lt;/code&gt; annotation, or&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;// noinspection&lt;/code&gt; line comment, or&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;/** noinspection */&lt;/code&gt; JavaDoc comment&lt;/li&gt;
  &lt;/ul&gt;

  which can be safely removed because inspection they affect is no longer applicable in this context.
 &lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;public class&lt;/font&gt;&lt;/b&gt; C {
 // symbol is already private,
 // but annotation is still around
  @SuppressWarnings({&quot;WeakerAccess&quot;})
 &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;private boolean&lt;/font&gt;&lt;/b&gt; CONST = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true&lt;/font&gt;&lt;/b&gt;;
 &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; f() {
    CONST = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false&lt;/font&gt;&lt;/b&gt;;
  }
}
&lt;/pre&gt;&lt;/code&gt;

&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WeakerAccess" displayName="Declaration access can be weaker">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports all fields, methods or classes, found in the specified inspection
scope, that may have their access modifier narrowed down.&lt;br&gt;&lt;br&gt;
Use check boxes in the inspection options below, to define rules for the modifier change suggestions.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CanBeFinal" displayName="Declaration can have final modifier">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports all fields, methods or classes, found in the specified inspection
scope, that may have a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;final&lt;/font&gt;&lt;/b&gt; modifier added to their declarations.&lt;br&gt;&lt;br&gt;
Use check boxes in the inspection options below, to define which declarations are to be reported.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedLibrary" displayName="Unused library">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports libraries attached to the specified inspection scope that
are not used directly from code.&lt;br&gt;&lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SameReturnValue" displayName="Method returns the same value">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports methods and method hierarchies where the return value appears to
be always the same constant.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedReturnValue" displayName="Unused method return value">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports methods which return values are never used in corresponding
method calls.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EmptyMethod" displayName="Empty method">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports methods where:&lt;br&gt;&lt;br&gt;
&amp;nbsp;- method is empty OR&lt;br&gt;
&amp;nbsp;- all implementations of interface method are empty OR&lt;br&gt;
&amp;nbsp;- method is empty itself and is overridden only by empty methods&lt;br&gt;&lt;br&gt;
Note that a method containing only the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;super()&lt;/font&gt;&lt;/b&gt;
call and passing its own parameter is also considered empty.
&lt;br&gt;&lt;br&gt;
This inspection is automatically suppressed for methods annotated with special annotations,
for example, EJB annotations javax.ejb.Init and javax.ejb.Remove. Additional annotations
can be configured below.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DuplicateThrows" displayName="Duplicate throws">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports duplicate classes in the method throws list.
&lt;br&gt;For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; f() &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;throws&lt;/font&gt;&lt;/b&gt; Exception, &lt;b&gt;&lt;font color=&quot;#800000&quot;&gt;Exception&lt;/font&gt;&lt;/b&gt; {
}
&lt;/pre&gt;&lt;/code&gt;
&lt;br&gt;
Also, inspection warns if you have declared two exceptions one of which subclasses another.
 E.g.:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;void&lt;/font&gt;&lt;/b&gt; f() &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;throws&lt;/font&gt;&lt;/b&gt; &lt;b&gt;&lt;font color=&quot;#800000&quot;&gt;IOException&lt;/font&gt;&lt;/b&gt;, Exception {
}
&lt;/pre&gt;&lt;/code&gt;
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Portability issues">
    <inspection shortName="UseOfJDBCDriverClass" displayName="Use of concrete JDBC driver class">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of concrete JDBC driver classes. Use of such classes will
bind your project to a specific database and driver, defeating the purpose of JDBC and
resulting in loss of portability.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RuntimeExec" displayName="Call to &apos;Runtime.exec()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports the calls to &lt;b&gt;Runtime.exec()&lt;/b&gt; or any
of its variants. Calls to &lt;b&gt;Runtime.exec()&lt;/b&gt; are inherently unportable
between operating systems.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemGetenv" displayName="Call to &apos;System.getenv()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports the calls to &lt;b&gt;System.getenv()&lt;/b&gt;.
Calls to &lt;b&gt;System.getenv()&lt;/b&gt; are inherently unportable.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfSunClasses" displayName="Use of sun.* classes">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of classes from the &lt;b&gt;&lt;i&gt;sun.*&lt;/i&gt;&lt;/b&gt; hierarchy.
Such classes are non-portable between different JVM&apos;s.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemExit" displayName="Call to &apos;System.exit()&apos; or related methods">&lt;html&gt;
&lt;body&gt;
This inspection reports the calls to &lt;b&gt;System.exit()&lt;/b&gt;,
&lt;b&gt;Runtime.exit()&lt;/b&gt;, or &lt;b&gt;Runtime.halt()&lt;/b&gt;.
Calls to these methods make the calling code unportable to most application servers.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfProcessBuilder" displayName="Use of java.lang.ProcessBuilder class">&lt;html&gt;
&lt;body&gt;
This inspection reports the uses of &lt;b&gt;java.lang.ProcessBuilder&lt;/b&gt;.
Uses of &lt;b&gt;ProcessBuilder&lt;/b&gt; are inherently unportable between operating systems.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HardcodedLineSeparators" displayName="Hardcoded line separator">&lt;html&gt;
&lt;body&gt;
This inspection reports the newline (&lt;b&gt;\n&lt;/b&gt;) or return (&lt;b&gt;\r&lt;/b&gt;) characters in a string or
character literal. These characters are commonly used as line separators, and portability may suffer they are hardcoded.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HardcodedFileSeparators" displayName="Hardcoded file separator">&lt;html&gt;
&lt;body&gt;
This inspection reports the forward (/) or backward (\) slash in a string or
character literal. These characters are commonly used as file separators, and portability may suffer if their use is hardcoded.
This will not report a forward slash immediately following a &apos;&amp;lt;&apos; character,
or immediately preceding a &apos;&amp;gt;&apos; character, as those often indicate XML or HTML tags rather than file names,
strings representing a &lt;b&gt;java.util.TimeZone&lt;/b&gt; ID, strings that are a valid regular expression or strings that equal an IANA-registered MIME media type.
&lt;p&gt;
Normally, usage of the &lt;b&gt;example/*&lt;/b&gt; MIME media type outside of an example (&lt;em&gt;e.g.&lt;/em&gt; in a &lt;b&gt;Content-Type&lt;/b&gt;
header) is an error. Use the checkbox below to include &lt;b&gt;example/*&lt;/b&gt; in the set of recognized media types.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfAWTPeerClass" displayName="Use of AWT peer class">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of concrete AWT peer classes. Such classes represent
native windowing system widgets, and will be non-portable between different windowing
systems.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NativeMethods" displayName="Native method">&lt;html&gt;
&lt;body&gt;
This inspection reports the methods declared &lt;b&gt;native&lt;/b&gt;. Native methods are inherently unportable.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="General">
    <inspection shortName="TestOnlyProblems" displayName="@TestOnly method call in production code">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
  This inspection reports usages of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@TestOnly&lt;/font&gt;&lt;/b&gt;-annotated methods in production code.
  &lt;br&gt;The problems are not reported if such method is called from
  &lt;ul&gt;
    &lt;li&gt;code under &apos;Test Sources&apos; folder
    &lt;li&gt;test-class (JUnit/TestNG)
    &lt;li&gt;another &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@TestOnly&lt;/font&gt;&lt;/b&gt;-annotated method
  &lt;/ul&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SyntaxError" displayName="Syntax error">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Allows to see syntax errors in the results of Analyze | Inspect Code.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Annotator" displayName="Annotator">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Allows to see problems reported by language annotators in the results of Analyze | Inspect Code.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlHighlighting" displayName="Xml Highlighting">&lt;html&gt;
&lt;body&gt;
Highlights XML validation problems in the results of Analyze | Inspect Code.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DefaultFileTemplate" displayName="Default File Template Usage">&lt;html&gt;
&lt;body&gt;
This inspections reports usages of the default file templates for
  &lt;ul&gt;
    &lt;li&gt;File Header,&lt;/li&gt;
    &lt;li&gt;Overridden/implemented ot created method body, and&lt;/li&gt;
    &lt;li&gt;Generated Catch block section.&lt;/li&gt;
  &lt;/ul&gt;
 &lt;p&gt;
Also, the inspection proposes to change default file template usages to the actual file templates configured in Settings|IDE|File Templates. 
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Language Injection">
    <inspection shortName="InjectionNotApplicable" displayName="Injection Annotation not applicable">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        &lt;p&gt;
          Checks whether a language-injection annotation (&lt;code&gt;@Language&lt;/code&gt; or derived ones)
          is valid to be applied to the annotated element. Only elements of type &lt;code&gt;String&lt;/code&gt;
          and &lt;code&gt;String[]&lt;/code&gt; may be annotated.
        &lt;/p&gt;
      &lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LanguageMismatch" displayName="Language Mismatch">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        &lt;p&gt;
          Checks whether the language of a reference matches the expected language of the usage context.
        &lt;/p&gt;

        &lt;p&gt;Example:&lt;/p&gt;
        &lt;pre&gt;
        @Language(&quot;JavaScript&quot;)
        String JS_CODE = &quot;var x;&quot;;

        @Language(&quot;XPath&quot;)
        String XPATH_CODE = JS_CODE;
        &lt;/pre&gt;
      &lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnknownLanguage" displayName="Unknown Language ID">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        &lt;p&gt;
          Checks whether the ID of the language used in an &lt;code&gt;@Language&lt;/code&gt; annotation refers to an
          existing language implementation.
        &lt;/p&gt;
      &lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Spelling">
    <inspection shortName="SpellCheckingInspection" displayName="Typo">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
  Spellchecker inspection helps locate typos and misspelling in your code, comments and literals, and fix them in one click.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Maven">
    <inspection shortName="MavenDuplicateDependenciesInspection" displayName="Duplicate Dependencies">&lt;html&gt;
&lt;body&gt;
&lt;span style=&quot;font-family: verdana,serif; font-size: smaller;&quot;&gt;Maven Duplicate Dependencies Inspection&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MavenModelInspection" displayName="Maven Model Inspection">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
  Inspects a Maven model for resolution problems.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="HTML">
    <inspection shortName="HtmlUnknownAttribute" displayName="Unknown HTML tag attribute">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection highlights unknown HTML tag attributes as invalid, and lets mark such attributes as Custom to avoid highlighting them as invalid.&lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RequiredAttributes" displayName="Missing required attribute">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports XML/HTML tags with missing mandatory attributes.
  You can specify attribute names that should not be reported. 
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="HtmlExtraClosingTag" displayName="Extra closing tag for empty element">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection spots extra closing tag for the empty elements like IMG or BR.&lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckValidXmlInScriptTagBody" displayName="Malformed content of &lt;script&gt; tag">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection checks that the &lt;b&gt;script&lt;/b&gt; tag content is valid XML.&lt;br&gt;
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlUnknownTag" displayName="Unknown HTML tag">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection highlights unknown HTML tags, and lets mark such tags as Custom to avoid highlighting them as unknown in future.&lt;br&gt;
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckEmptyScriptTag" displayName="Empty tag">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Reports empty tags (like &lt;b&gt;script&lt;/b&gt;) that do not work in some browsers.
  The validation works in html or jsp file types.&lt;br&gt;
&lt;/font&gt;


&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Naming Conventions">
    <inspection shortName="GroovyStaticMethodNamingConvention" displayName="Static method naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy static methods whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for static method names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyStaticVariableNamingConvention" displayName="Static variable naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;static&lt;/font&gt;&lt;/b&gt;  variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.   Constants, i.e. variables of immutable type declared &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;static final&lt;/font&gt;&lt;/b&gt;,
are not checked by this inspection
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for static variable names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConstantNamingConvention" displayName="Constant naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy constants whose names are either too short, too long, or do not follow
the specified regular expression pattern.   Constants are variables of immutable type declared &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;static final&lt;/font&gt;&lt;/b&gt;.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for constant names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyLocalVariableNamingConvention" displayName="Local variable naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy local variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for local variables names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyAnnotationNamingConvention" displayName="Annotation naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy annotation classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for annotation names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyEnumerationNamingConvention" displayName="Enumeration naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy enumerated classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for enumerated class names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyInstanceMethodNamingConvention" displayName="Instance method naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy instance methods whose names are either too short, too long, or do not follow
the specified regular expression pattern. Instance methods that override library
methods are ignored by this inspection.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for instance method names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyClassNamingConvention" displayName="Class naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for class names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyInterfaceNamingConvention" displayName="Interface naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy interfaces whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for interface names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyInstanceVariableNamingConvention" displayName="Instance variable naming convention">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy instance variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify mininum length, maximum length and regular expression expected for
instance variable names.
(Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyParameterNamingConvention" displayName="Method parameter naming convention">&lt;html&gt;
&lt;body&gt;

                This inspection reports instances of Groovy method parameters whose names are either too short, too
                long, or do not follow
                the specified regular expression pattern.
                &lt;p&gt;
                    Use the fields provided below to specify mininum length, maximum length and regular expression
                    expected for method parameter names.
                    (Regular expressions are in standard &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.regex&lt;/font&gt;&lt;/b&gt; format.)
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Initialization issues">
    <inspection shortName="StaticVariableUninitializedUse" displayName="Static field used before initialization">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;static&lt;/b&gt; variables which are read prior to initialization.
&lt;p&gt;
Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report static variables
used uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NonThreadSafeLazyInitialization" displayName="Unsafe lazy initialization of static field">&lt;html&gt;
&lt;body&gt;
This inspection reports static variables being lazily initialized
in an non-thread-safe manner. Lazy initialization of static variables should be done
in an appropriate synchronization construct, to prevent different threads from
performing conflicting initialization.&lt;br&gt;
If applicable, quick-fix is suggested
which introduces static holder pattern described in
&lt;a href=&quot;http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom&quot;&gt;
http://en.wikipedia.org/wiki/Initialization_on_demand_holder_idiom
&lt;/a&gt;
where the JVM guarantees thread-safety of such initializations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticVariableInitialization" displayName="Static field may not be initialized">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;static&lt;/b&gt; variables which are not guaranteed to be initialized upon class initialization.
&lt;p&gt;
Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report static variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverriddenMethodCallDuringObjectConstruction" displayName="Overridden method call during object construction">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls of overridden methods of the current class during object construction.
An object is constructed inside a constructor, an instance initializer or
inside a &lt;b&gt;clone()&lt;/b&gt;, &lt;b&gt;readObject()&lt;/b&gt; or &lt;b&gt;readObjectNoData()&lt;/b&gt; method.
Such calls may result in subtle bugs, as the object is not guaranteed to be initialized
before the method call occurs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalStaticVariableUsedInClassInitialization" displayName="Non-final static field is used during class initialization">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of non-&lt;b&gt;final&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; variables during initialization
of a class. Such uses may make the semantics of the code dependent on order of class
creation, may cause variables to be used before initialized, and generally cause
extremely difficult and confusing bugs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceVariableUninitializedUse" displayName="Instance field used before initialization">&lt;html&gt;
&lt;body&gt;
This inspection reports reads of instance variables which are not yet initialized.
&lt;p&gt;
Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report instance variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="InstanceVariableInitialization" displayName="Instance field may not be initialized">&lt;html&gt;
&lt;body&gt;
This inspection reports instance variables which are not guaranteed to be initialized upon object initialization.
&lt;p&gt;
Use the checkbox below to indicate whether you want uninitialized primitive fields to be reported.
&lt;p&gt;
Note: This inspection uses a very conservative dataflow algorithm, and may report instance variables
as uninitialized incorrectly. Variables reported as initialized will always be initialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverridableMethodCallDuringObjectConstruction" displayName="Overridable method call during object construction">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls of overridable methods of the current class during object construction.
An object is constructed inside a constructor, an instance initializer or
inside a &lt;b&gt;clone()&lt;/b&gt;, &lt;b&gt;readObject()&lt;/b&gt; or &lt;b&gt;readObjectNoData()&lt;/b&gt; method.
Methods are overridable if they are not declared &lt;b&gt;final&lt;/b&gt;,
&lt;b&gt;static&lt;/b&gt; or &lt;b&gt;private&lt;/b&gt;.
Such calls may result in subtle bugs, as the object is not guaranteed to be initialized
before the method call occurs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThisEscapedInConstructor" displayName="&apos;this&apos; reference escaped in object construction">&lt;html&gt;
&lt;body&gt;
This inspection reports possible escapes of &lt;b&gt;this&lt;/b&gt;
during object construction. Escapes occur when &lt;b&gt;this&lt;/b&gt;
is used as a method argument or the object of an assignment in a constructor or
initializer. Such escapes may result in subtle bugs, as the object is now
available in a context in which it is not guaranteed to be initialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AbstractMethodCallInConstructor" displayName="Abstract method call in constructor">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls of abstract methods within a constructor of an
abstract class. Such calls may result in subtle bugs, as the object is not guaranteed to be initialized
before the method call occurs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Code maturity issues">
    <inspection shortName="TodoComment" displayName="TODO comment">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;TODO&quot; comments in your code. Format of
&quot;TODO&quot; comments is configurable via the &lt;i&gt;Settings | TODO&lt;/i&gt; panel. Since IDEA already
provides syntax highlighting for &quot;TODO&quot; comments, it is expected that this will largely
be used in batch mode.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObsoleteCollection" displayName="Use of obsolete collection type">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of &lt;b&gt;java.util.Vector&lt;/b&gt;
or &lt;b&gt;java.util.Hashtable&lt;/b&gt;. While still supported,
these classes were made obsolete by the JDK1.2 collection classes, and should probably
not be used in new development.
&lt;p&gt;
Use the checkbox below to ignore any cases where the obsolete collections are used
as an argument to a method or assigned to a variable that requires the obsolete type.
Enabling this option is potentially quite processor intensive.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuppressionAnnotation" displayName="Inspection suppression annotation">&lt;html&gt;
&lt;body&gt;
This inspection reports any inspection suppression comments or annotations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowablePrintStackTrace" displayName="Call to &apos;printStackTrace()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses &lt;b&gt;Throwable.printStackTrace()&lt;/b&gt; without arguments.
These are often temporary debugging statements, and should probably be either removed from production code,
or replaced by a more robust logging facility.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemOutErr" displayName="Use of System.out or System.err">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of &lt;b&gt;System.out&lt;/b&gt; or &lt;b&gt;System.err&lt;/b&gt;.
These are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust
logging facility.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadDumpStack" displayName="Call to &apos;Thread.dumpStack()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses &lt;b&gt;Thread.dumpStack()&lt;/b&gt;.
These are often temporary debugging statements, and should probably be either removed from production code,
or replaced by a more robust logging facility.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Security issues">
    <inspection shortName="NonFinalClone" displayName="Non-final &apos;clone()&apos; in secure context">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;clone()&lt;/b&gt; methods which
are not declared &lt;b&gt;final&lt;/b&gt;. Since &lt;b&gt;clone()&lt;/b&gt; may
be used to instantiate objects without using a constructor, allowing the &lt;b&gt;clone()&lt;/b&gt;
method to be overridden may result in corrupted objects, and possible security
exploits. This may be prevented by making the &lt;b&gt;clone()&lt;/b&gt;
method &lt;b&gt;final&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoadLibraryWithNonConstantString" displayName="Call to &apos;System.loadLibrary()&apos; with non-constant string">&lt;html&gt;
&lt;body&gt;
This inspection reports the calls to &lt;b&gt;java.lang.System.loadLibrary()&lt;/b&gt;
which take a dynamically-constructed string as the execution strings.
Constructed library location strings are a common source of security breaches.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RuntimeExecWithNonConstantString" displayName="Call to &apos;Runtime.exec()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports the calls to &lt;b&gt;Runtime.exec()&lt;/b&gt; or any
of its variants which take a dynamically-constructed string as the statement to execute.
Constructed execution strings are a common source of security breaches.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CustomClassloader" displayName="Custom ClassLoader">&lt;html&gt;
&lt;body&gt;
This inspection reports any user-defined subclasses of &lt;b&gt;java.lang.ClassLoader&lt;/b&gt;.
While not necessarily representing a security hole, such classes should be thoroughly
and professionally inspected for possible security issues.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneableClassInSecureContext" displayName="Cloneable class in secure context">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which may be cloned. A class
may be cloned if it supports the &lt;b&gt;Cloneable&lt;/b&gt; interface,
and its &lt;b&gt;clone()&lt;/b&gt; method is not defined to immediately
throw an error. Cloneable classes may be dangerous in code intended for secure use.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicStaticCollectionField" displayName="&apos;public static&apos; collection field">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;public&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; Collection fields. Often used
to store collections of constant values, these fields nonetheless represent a security
hazard, as their contents may be modified, even if the field is declared as &lt;b&gt;final&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemProperties" displayName="Access of system properties">&lt;html&gt;
&lt;body&gt;
This inspection reports any accesses of the System properties. While accessing the
System properties is not a security risk in it self, it is often found in malicious code.
Accesses to System properties should be closely examined in any security audit.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CustomSecurityManager" displayName="Custom SecurityManager">&lt;html&gt;
&lt;body&gt;
This inspection reports any user-defined subclasses of &lt;b&gt;java.lang.SecurityManager&lt;/b&gt;.
While not necessarily representing a security hole, such classes should be thoroughly
and professionally inspected for possible security issues.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonStaticInnerClassInSecureContext" displayName="Non-static inner class in secure context">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;static&lt;/b&gt; inner classes.
Compilation of such classes causes the creation of hidden, package-visible methods on the parent class, which may
compromise security.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemSetSecurityManager" displayName="Call to &apos;System.setSecurityManager()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;System.setSecurityManager()&lt;/b&gt;.
While often benign, any call to &lt;b&gt;System.setSecurityManager()&lt;/b&gt; should be closely examined in any security audit.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JDBCExecuteWithNonConstantString" displayName="&apos;Statement.execute()&apos; call with non-constant string">&lt;html&gt;
&lt;body&gt;
This inspection reports the calls to &lt;b&gt;java.sql.Statement.execute()&lt;/b&gt; or any
of its variants which take a dynamically-constructed string as the query to execute.
Constructed SQL statements are a common source of security breaches.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassLoaderInstantiation" displayName="ClassLoader instantiation">&lt;html&gt;
&lt;body&gt;
This inspection reports any instantiations of &lt;b&gt;java.lang.ClassLoader&lt;/b&gt; objects.
While often benign, any instantiations to &lt;b&gt;ClassLoader&lt;/b&gt; should be closely examined in any security audit.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JDBCPrepareStatementWithNonConstantString" displayName="&apos;Connection.prepare*()&apos; call with non-constant string">&lt;html&gt;
&lt;body&gt;
This inspection reports the calls to &lt;b&gt;java.sql.Connection.prepareStatement()&lt;/b&gt;,
&lt;b&gt;java.sql.Connection.prepareCall()&lt;/b&gt;or any
of their variants which take a dynamically-constructed string as the statement to prepare.
Constructed SQL statements are a common source of security breaches.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DesignForExtension" displayName="Design for extension">&lt;html&gt;
&lt;body&gt;
This inspection reports any methods which are not &lt;b&gt;static&lt;/b&gt;,
&lt;b&gt;private&lt;/b&gt;, &lt;b&gt;final&lt;/b&gt; or &lt;b&gt;abstract&lt;/b&gt;,
and whose bodies are not empty. Coding in a style that avoids such methods protects
the contracts of classes from being broken by their subclasses. The benefit of this style is that
subclasses cannot corrupt the state of the superclass by forgetting to call the super method.
The cost is that subclasses are limited in their flexibility, in particular they cannot prevent
execution of code in the superclass.
&lt;p&gt;
This inspection is intended for code to be used in secure environments, and is probably not
appropriate for less restrictive environments.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicStaticArrayField" displayName="&apos;public static&apos; array field">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;public&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; array fields. Often used
to store arrays of constant values, these fields nonetheless represent a security
hazard, as their contents may be modified, even if the field is declared as &lt;b&gt;final&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SerializableClassInSecureContext" displayName="Serializable class in secure context">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which may be serialized. A class
may be serialized if it supports the &lt;b&gt;Serializable&lt;/b&gt; interface,
and its &lt;b&gt;writeObject()&lt;/b&gt; method is not defined to immediately
throw an error. Serializable classes may be dangerous in code intended for secure use.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnsecureRandomNumberGeneration" displayName="Insecure random number generation">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of &lt;b&gt;java.lang.Random&lt;/b&gt; or
&lt;b&gt;java.lang.math.Random()&lt;/b&gt;. In secure environments,
&lt;b&gt;java.secure.SecureRandom&lt;/b&gt; is a better choice, offering cryptographically secure
random number generation.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DeserializableClassInSecureContext" displayName="Deserializable class in secure context">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which may be deserialized. A class
may be deserialized if it supports the &lt;b&gt;Serializable&lt;/b&gt; interface,
and its &lt;b&gt;readObject()&lt;/b&gt; method is not defined to immediately
throw an error. Deserializable classes may be dangerous in code intended for secure use.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Bitwise operation issues">
    <inspection shortName="ShiftOutOfRange" displayName="Shift operation by inappropriate constant">&lt;html&gt;
&lt;body&gt;
This inspection reports shift operations
where the value shifted by is constant and outside of the reasonable range. Integer
shift operations outside of the range &lt;b&gt;0..31&lt;/b&gt; and long shift operations outside of the
range &lt;b&gt;0..63&lt;/b&gt; are reported. Shifting by negative or overly large values is almost certainly
a coding error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IncompatibleMask" displayName="Incompatible bitwise mask operation">&lt;html&gt;
&lt;body&gt;
This inspection reports bitwise mask expressions which are guaranteed to
evaluate to &lt;b&gt;true&lt;/b&gt; or &lt;b&gt;false&lt;/b&gt;.
Expressions checked are of the form &lt;b&gt;&lt;i&gt;(var &amp; constant1) == constant2&lt;/i&gt;&lt;/b&gt; or
&lt;b&gt;&lt;i&gt;(var | constant1) == constant2&lt;/i&gt;&lt;/b&gt;, where &lt;b&gt;&lt;i&gt;constant1&lt;/i&gt;&lt;/b&gt;
and &lt;b&gt;&lt;i&gt;constant2&lt;/i&gt;&lt;/b&gt; are incompatible bitmask constants.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PointlessBitwiseExpression" displayName="Pointless bitwise expression">&lt;html&gt;
&lt;body&gt;
This inspection reports pointless bitwise
expressions. Such expressions include &lt;b&gt;and&lt;/b&gt;ing with zero, &lt;b&gt;or&lt;/b&gt;ing by zero,
and shift by zero. Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="UI Form Problems">
    <inspection shortName="BoundFieldAssignment" displayName="Assignment to UI-bound field">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports assignments to fields which are bound to components
  in UI Designer forms. Such assignments will cause the component setup code generated by UI Designer
  for such fields to be ignored.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NoButtonGroup" displayName="Radio button not in a group">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JRadioButton&lt;/font&gt;&lt;/b&gt; components which are not placed in a
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;ButtonGroup&lt;/font&gt;&lt;/b&gt;. A quick fix is available to group radio
  buttons placed in adjacent grid cells.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NoScrollPane" displayName="Scrollable component not in JScrollPane">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Scrollable&lt;/font&gt;&lt;/b&gt; components,
  except for &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JTextField&lt;/font&gt;&lt;/b&gt;, which are not placed in a
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JScrollPane&lt;/font&gt;&lt;/b&gt;. The quickfix surrounds the problematic
  component with a scroll pane.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="OneButtonGroup" displayName="Button group with one button">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;ButtonGroup&lt;/font&gt;&lt;/b&gt; instances which contain only one
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;JRadioButton&lt;/font&gt;&lt;/b&gt;.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DuplicateMnemonic" displayName="Duplicate Mnemonics">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports components which have the same mnemonic
  character. The quickfix allows to assign unique mnemonic characters to each of the components.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NoLabelFor" displayName="No label for component">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports components which do not have any static
  text and do not have any label which is marked with &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;setLabelFor&lt;/font&gt;&lt;/b&gt;
  for this component. Components which do not have static text include edit fields and combo boxes.
  Such components cannot be activated with a keyboard shortcut. The quickfix for this inspection
  allows to automatically associate an adjacent label with the problematic component.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MissingMnemonic" displayName="Missing Mnemonics">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports focusable components with the
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;text&lt;/font&gt;&lt;/b&gt; property or labels with assigned
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;labelFor&lt;/font&gt;&lt;/b&gt; property which do not have a mnemonic
  character. The quickfix allows to assign a unique mnemonic to such a component.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Data Flow Issues">
    <inspection shortName="GroovyMissingReturnStatement" displayName="Missing Return Statement">&lt;html&gt;
&lt;body&gt;

              This inspection reports on missing Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statement at the end of methods returning
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnusedAssignment" displayName="Unused Assignment">&lt;html&gt;
&lt;body&gt;

              This inspection reports on unnecessary Groovy assignment statement
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyVariableNotAssigned" displayName="Variable Not Assigned">&lt;html&gt;
&lt;body&gt;


              This inspection indicates that Groovy variable might not has been initialized
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="TestNG">
    <inspection shortName="ConvertAnnotations" displayName="Convert TestNG annotations to javadocs">&lt;p&gt;
    This inspection will convert your TestNG tests from JDK annotations to Javadoc annotations.
&lt;/p&gt;</inspection>
    <inspection shortName="UndeclaredTests" displayName="Undeclared test">&lt;p&gt;
    This inspection checks if none of your testng.xml files contains current test class.
&lt;/p&gt;</inspection>
    <inspection shortName="dependsOnMethodTestNG" displayName="dependsOnMethods problem">&lt;P&gt;
    This inspection checks that the dependsOnMethod attribute points to a valid, accessable
    @Test annotated method in the current class, or any of its parent classes.
&lt;/P&gt;
        </inspection>
    <inspection shortName="ConvertJavadoc" displayName="Convert TestNG Javadoc to 1.5 annotations">&lt;p&gt;
    This inspection asserts your TestNG tests with Javadoc annotations and allows to convert them to JDK annotations.
&lt;/p&gt;</inspection>
    <inspection shortName="ConvertOldAnnotations" displayName="Convert old @Configuration TestNG annotations">&lt;p&gt;
    This inspection will assert to convert your older @Configuration TestNG annotions to the new
    @BeforeXXX/@AfterXXX style annotations.
&lt;/p&gt;</inspection>
    <inspection shortName="groupsTestNG" displayName="Groups problem">&lt;p&gt;
    This inspection checks that group name is acceptable according to a list of known groups.
&lt;/p&gt;</inspection>
    <inspection shortName="JUnitTestNG" displayName="Convert JUnit Tests to TestNG">&lt;p&gt;
    This inspection will convert your existing JUnit based unit tests into TestNG based unit tests.
&lt;/p&gt;</inspection>
  </group>
  <group name="Abstraction issues">
    <inspection shortName="InstanceVariableOfConcreteClass" displayName="Type of instance field is concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports any instance variables whose type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DeclareCollectionAsInterface" displayName="Collection declared by class, not interface">&lt;html&gt;
&lt;body&gt;
This inspection reports on declarations of Collection variables made by using the collection class as the type,
rather than an appropriate interface.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastToConcreteClass" displayName="Cast to a concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports casting a value to a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOnlyUsedFromInnerClass" displayName="Private method only used from inner class">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;private&lt;/b&gt; methods, which
are only called from an inner class of the class containing the method. Such
methods could be safely moved into that inner class.
&lt;p&gt;
Use the first checkbox below to ignore &lt;b&gt;private&lt;/b&gt;
methods which are called from an anonymous class.
&lt;p&gt;
Use the second checkbox to ignore &lt;b&gt;private static&lt;/b&gt;
methods which are accessed from a non-static inner class.
&lt;p&gt;
Use the third checkbox to only report &lt;b&gt;static&lt;/b&gt; methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassReferencesSubclass" displayName="Class references one of its subclasses">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which contain references to one of their subclasses.
Such references may be confusing, and violate several rules of object-oriented design.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyStrongTypeCast" displayName="Overly-strong type cast">&lt;html&gt;
&lt;body&gt;
This inspection reports type casts which are overly strong. For instance,
casting an object to &lt;b&gt;ArrayList&lt;/b&gt; when casting it to
&lt;b&gt;List&lt;/b&gt; would do just as well. &lt;b&gt;Note:&lt;/b&gt; much like the &lt;i&gt;Redundant type cast&lt;/i&gt;
inspection, applying the fix for this inspection may change the semantics of your program, if you are
intentionally using an overly strong cast to cause a &lt;b&gt;ClassCastException&lt;/b&gt; to be generated. Use caution.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofChain" displayName="Chain of &apos;instanceof&apos; checks">&lt;html&gt;
&lt;body&gt;
This inspection reports any chains of if-else statements all of whose conditions are &lt;b&gt;instanceof&lt;/b&gt; expressions
(or combinations of such expressions). Such constructions usually indicate a failure of object-oriented design, which
dictates that such type-based dispatch should be done via polymorphic method calls rather than explicit chains
of type tests.
&lt;p&gt;
Use the checkbox below to ignore instanceof expressions on library classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofThis" displayName="&apos;instanceof&apos; check for &apos;this&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on uses of &lt;b&gt;instanceof&lt;/b&gt; where the
expression checked is &lt;b&gt;this&lt;/b&gt;. Such expressions
are indicative of a failure of object-oriented design, and should be replaced by
polymorphic constructions.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofInterfaces" displayName="&apos;instanceof&apos; a concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports on uses of &lt;b&gt;instanceof&lt;/b&gt; where the type checked for is a concrete class,
rather than an interface. Such uses often indicate excessive coupling to concrete implementations, rather
than abstractions. &lt;b&gt;instanceof&lt;/b&gt; expressions whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FeatureEnvy" displayName="Feature envy">&lt;html&gt;
&lt;body&gt;
This inspection reports the &quot;Feature Envy&quot; code smell. Feature
envy is defined as occurring when a method calls methods on another class three
or more times. Calls to library classes, parent classes, contained or containing
classes are not counted for purposes of this inspection. Feature
envy is often an indication that functionality is located in the wrong class.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterOfConcreteClass" displayName="Method parameter of concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports any method parameters whose type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodReturnOfConcreteClass" displayName="Method return of concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports any methods whose return type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MagicNumber" displayName="&quot;Magic number&quot;">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;magic numbers&quot;, literal numeric constants used without declaration.
&quot;Magic numbers&quot; can result in code whose intention is extremely unclear, and may result in errors if a &quot;magic
number&quot; is changed in one code location but not another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0L, 1L, 2L,
0.0, 1.0, 0.0F and 1.0F are not reported by this inspection.
&lt;p&gt;
Use the checkbox below to disable this inspection within &apos;hashCode()&apos; methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicMethodNotExposedInInterface" displayName="&apos;public&apos; method not exposed in interface">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;public&lt;/b&gt; methods in classes
which are not exposed as in interface. Exposing all &lt;b&gt;public&lt;/b&gt; methods via interface is important for
maintaining loose coupling, and may be necessary for certain component-based programming styles.
&lt;p&gt;
Use the checkbox below to ignore methods of which the containing class does not
implement a non-library interface.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticVariableOfConcreteClass" displayName="Static field of concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;static&lt;/b&gt; variables whose type is declared to be a concrete class, rather than an interface.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalVariableOfConcreteClass" displayName="Local variable of concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports any local variables whose type is declared to be a concrete class.
Such declarations may represent a failure of abstraction, and may make testing more difficult.
Declarations whose classes come from system or third-party libraries will not be reported by this inspection.
Catch-block parameters of concrete exception type will also not be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeMayBeWeakened" displayName="Type may be weakened">&lt;html&gt;
&lt;body&gt;
This inspection reports any variables which may be declared with a weaker type. For instance,
a variable may be of type &lt;b&gt;ArrayList&lt;/b&gt;, and only the method
&lt;b&gt;isEmpty()&lt;/b&gt; is called on it. In this case the type
&lt;b&gt;List&lt;/b&gt; would do just as well.
&lt;p&gt;
Enable the first checkbox below to prevent weakening the left side of assignments when the right side is not
a type cast or new expression. When storing the result of a method call in a variable, it is
useful to retain the type of the method call result instead of unnecessarily weakening it.
&lt;p&gt;
Enable the second checkbox below to use the parameterized type of the collection as weakest type when
the object evaluated is used as an argument to a collection method with a parameter type of
&lt;b&gt;java.lang.Object&lt;/b&gt;. Use this option to prevent weakening to
&lt;b&gt;Object&lt;/b&gt; when passing an object to the collection methods
&lt;b&gt;get()&lt;/b&gt;, &lt;b&gt;remove()&lt;/b&gt;,
&lt;b&gt;contains()&lt;/b&gt;, &lt;b&gt;indexOf()&lt;/b&gt;,
&lt;b&gt;lastIndexOf()&lt;/b&gt;, &lt;b&gt;containsKey()&lt;/b&gt;
and &lt;b&gt;containsValue()&lt;/b&gt;.
&lt;p&gt;
Use the third checkbox below to specify if this inspection should warn when a type can be
weakened to &lt;b&gt;java.lang.Object&lt;/b&gt;. Weakening to
&lt;b&gt;java.lang.Object&lt;/b&gt; is often not very useful.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticMethodOnlyUsedInOneClass" displayName="Static method only used from one other class">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;static&lt;/b&gt; methods which
are only called from one class which is not the same as the class containing the
method. Such methods could be moved into that class.
&lt;p&gt;
This inspection may be cpu intensive.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Resource management issues">
    <inspection shortName="SocketResource" displayName="Socket opened but not safely closed">
&lt;html&gt;
&lt;body&gt;
This inspection reports any Socket resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. Socket resources reported
by this inspection include &lt;b&gt;java.net.Socket&lt;/b&gt;,
&lt;b&gt;java.net.DatagramSocket&lt;/b&gt;,
and &lt;b&gt;java.net.ServerSocket&lt;/b&gt;.
&lt;p&gt;
Use the checkbox below to specify if a Socket is allowed to be opened inside a try
block. This style is less desirable because it is more verbose than opening a Socket
in front of a try block.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IOResource" displayName="I/O resource opened but not safely closed">
&lt;html&gt;
&lt;body&gt;
This inspection reports any I/O resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. I/O resources checked
by this inspection include &lt;b&gt;java.io.InputStream&lt;/b&gt;,
&lt;b&gt;java.io.OutputStream&lt;/b&gt;,
&lt;b&gt;java.io.Reader&lt;/b&gt;,
&lt;b&gt;java.io.Writer&lt;/b&gt; and
&lt;b&gt;java.io.RandomAccessFile&lt;/b&gt;. I/O resources which are wrapped by other I/O resources
are not reported, as the wrapped resource will be closed by the wrapping resource.
&lt;p&gt;
Use the table below to specify which I/O resources should be ignored by this inspection.
Specify I/O resource classes here which do not need to be closed.
Use the checkbox below to specify if a I/O resource is allowed to be opened inside a try
block. This style is less desirable because it is more verbose than opening a resource in front of a try
block.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HibernateResource" displayName="Hibernate resource opened but not safely closed">
&lt;html&gt;
&lt;body&gt;
This inspection reports any Hibernate resource which is not opened in a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. Hibernate resources reported
by this inspection include &lt;b&gt;org.hibernate.Session&lt;/b&gt;.
&lt;p&gt;
Use the checkbox below to specify if a Hibernate resource is allowed to be opened inside a try
block. This style is less desirable because it is more verbose than opening a resource
in front of a try block.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JDBCResource" displayName="JDBC resource opened but not safely closed">&lt;html&gt;
&lt;body&gt;
This inspection reports any JDBC resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. JDBC resources reported
by this inspection include &lt;b&gt;java.sql.Connection&lt;/b&gt;,
&lt;b&gt;java.sql.Statement&lt;/b&gt;,
&lt;b&gt;java.sql.PreparedStatement&lt;/b&gt;,
&lt;b&gt;java.sql.CallableStatement&lt;/b&gt;,
and &lt;b&gt;java.sql.ResultSet&lt;/b&gt;.
&lt;p&gt;
Use the checkbox below to specify if a JDBC resource is allowed to be opened inside a try
block. This style is less desirable because it is more verbose than opening a resource
in front of a try block.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DriverManagerGetConnection" displayName="Use of DriverManager to get JDBC connection">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses to &lt;b&gt;javax.sql.DriverManager&lt;/b&gt;
to acquire a JDBC connection. The &lt;b&gt;javax.sql.DriverManager&lt;/b&gt;
has been superseded by &lt;b&gt;javax.sql.Datasource&lt;/b&gt;, which
allows for connection pooling and other optimizations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JNDIResource" displayName="JNDI resource opened but not safely closed">
&lt;html&gt;
&lt;body&gt;
This inspection reports any JNDI resource which is not opened in front of a &lt;b&gt;try&lt;/b&gt;
block and closed in the corresponding &lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed. JNDI resources reported
by this inspection include &lt;b&gt;javax.naming.InitialContext&lt;/b&gt;,
and &lt;b&gt;javax.naming.NamingEnumeration&lt;/b&gt;.
&lt;p&gt;
Use the checkbox below to specify if a JNDI Resource is allowed to be opened inside a try
block. This style is less desirable because it is more verbose than opening a resource
in front of a try block.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ChannelResource" displayName="Channel opened but not safely closed">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;Channel&lt;/b&gt; which is not opened in
front of a &lt;b&gt;try&lt;/b&gt; block and closed in the corresponding
&lt;b&gt;finally&lt;/b&gt; block. Such resources may be inadvertently leaked
if an exception is thrown before the resource is closed. Channel resources reported
by this inspection include any instances created by calling
&lt;b&gt;getChannel()&lt;/b&gt; on a file or socket resource.
&lt;p&gt;
Use the checkbox below to specify if a Channel is allowed to be opened inside a try
block. This style is less desirable because it is more verbose than opening a Channel
in front of a try block.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Finalization issues">
    <inspection shortName="NoExplicitFinalizeCalls" displayName="&apos;finalize()&apos; called explicitly">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;Object.finalize()&lt;/b&gt;. Calling
&lt;b&gt;Object.finalize()&lt;/b&gt; explicitly is a very bad idea, as it can result in objects being placed in an
inconsistent state. Calls to &lt;b&gt;super.finalize()&lt;/b&gt; from within implementations of &lt;b&gt;finalize()&lt;/b&gt;
are benign, and are not reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalizeCallsSuperFinalize" displayName="&apos;finalize()&apos; does not call &apos;super.finalize()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of the &lt;b&gt;Object.finalize()&lt;/b&gt; method
which do not call &lt;b&gt;super.finalize()&lt;/b&gt;. Failing to call &lt;b&gt;super.finalize()&lt;/b&gt; may result in objects failing to properly
free any resources held or do other cleanup activities.
&lt;p&gt;
Use the checkboxes below to ignore direct subclasses of &lt;b&gt;java.lang.Object&lt;/b&gt;
or to ignore &lt;b&gt;finalize()&lt;/b&gt; implementations with an empty
method body or a body containing only if statements which have a condition which
evaluates to false at compile time. For performance reasons it can be beneficial to
override a non-trivial &lt;b&gt;finalize()&lt;/b&gt; with an empty
implementation in a subclass. An empty final &lt;b&gt;finalize()&lt;/b&gt;
implementation can also be used to prevent subclasses from overriding.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Finalize" displayName="&apos;finalize()&apos; declaration">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of
a &lt;b&gt;finalize()&lt;/b&gt; method. For performance reasons or due to inability
to guarantee that &lt;b&gt;finalize()&lt;/b&gt; will ever be called,
some coding standards prohibit its use.
&lt;p&gt;
Use the checkbox below to ignore &lt;b&gt;finalize()&lt;/b&gt; implementations with an empty
method body or a body containing only if statements which have a condition which
evaluates to false at compile time. For performance reasons it can be beneficial to
override a non-trivial &lt;b&gt;finalize()&lt;/b&gt; with an empty
implementation in a subclass. An empty final &lt;b&gt;finalize()&lt;/b&gt;
implementation can also be used to prevent subclasses from overriding.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalizeNotProtected" displayName="&apos;finalize()&apos; not declared &apos;protected&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of the &lt;b&gt;Object.finalize()&lt;/b&gt; method
which are not declared &lt;b&gt;protected&lt;/b&gt;. &lt;b&gt;finalize()&lt;/b&gt; should be declare &lt;b&gt;protected&lt;/b&gt;,
to prevent it from being explicitly invoked by other classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Packaging issues">
    <inspection shortName="PackageWithTooManyClasses" displayName="Package with too many classes">&lt;html&gt;
&lt;body&gt;
This global inspection reports any packages which contain too many classes. Overly large packages may
indicate a lack of design clarity.
&lt;p&gt;
Use the field below to specify the maximum number of classes a package may have before triggering this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassUnconnectedToPackage" displayName="Class independent of its package">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes which are neither dependent on nor depended on by other classes
in their package. Such classes are an indication of ad-hoc or incoherent packaging strategies,
and may often profitably be moved.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DisjointPackage" displayName="Package with disjoint dependency graph">&lt;html&gt;
&lt;body&gt;
This inspection reports any packages whose classes can be separated into disjoint, mutually independent
subsets. Such disjoint packages are a symptom of ad-hoc packaging, and may indicate a lack of
conceptual cohesion.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageInMultipleModules" displayName="Package with classes in multiple modules">&lt;html&gt;
&lt;body&gt;
This global inspection reports any packages which are present in multiple modules.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageWithTooFewClasses" displayName="Package with too few classes">&lt;html&gt;
&lt;body&gt;
This global inspection reports any packages which contain too few classes. Overly small packages may
indicate an overly fragmented design.
&lt;p&gt;
Use the field below to specify the minimum number of classes a package may have before triggering this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Logging issues">
    <inspection shortName="LoggerInitializedWithForeignClass" displayName="Logger initialized with foreign class">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;Logger&lt;/b&gt;s which are
initialized with a class literal from a different class than the &lt;b&gt;Logger&lt;/b&gt;
is contained in.
&lt;p&gt;
&lt;small&gt;New in 8, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonStaticFinalLogger" displayName="Non-constant logger">&lt;html&gt;
&lt;body&gt;
This inspection reports logger fields on classes which are not declared &lt;b&gt;static&lt;/b&gt;.
and &lt;b&gt;final&lt;/b&gt;.
Ensuring that every classes logger is effectively constant and bound to that class
simplifies the task of providing a unified logging implementation for an application. Interfaces,
enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.
&lt;p&gt;
Use the field below to specify the name of the class which will be used for logging in this project.
Fields of that type which are not &lt;b&gt;static&lt;/b&gt;.
and &lt;b&gt;final&lt;/b&gt; will be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicMethodWithoutLogging" displayName="&apos;public&apos; method without logging">&lt;html&gt;
&lt;body&gt;
This inspection reports any public method which does not contain a logging statement.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LogStatementGuardedByLogCondition" displayName="Log statement not guarded by log condition">&lt;html&gt;
&lt;body&gt;
This inspection reports log statements with non-constant arguments which are not
surrounded by a guard condition.
The evaluation of the arguments of a log statement can be expensive.
Surrounding a log statement with a guard clause prevents that cost when the logging
is disabled for the level used by the logging statement. This is especially for the
least serious level (trace, debug, finest) of logging statements, because those are
most often disabled in a production environment.
&lt;p&gt;
Use the text field below to specify the logger class name used. Use the table
to specify the log methods this inspection should warn on, with the corresponding
logging condition text.
&lt;p&gt;
&lt;small&gt;New in 8, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithMultipleLoggers" displayName="Class with multiple loggers">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which have multiple loggers declared.
Ensuring that every class has a single dedicated logger is an important step in providing a unified logging
implementation for an application. Interfaces,
enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.
&lt;p&gt;
Use the field below to specify the name of the class which will be used for logging in this project.
Classes which do declare multiple fields of that class will be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithoutLogger" displayName="Class without logger">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which do not have a logger declared.
Ensuring that every class has a dedicated logger is an important step in providing a unified logging
implementation for an application. Interfaces, enumerations, annotations, inner classes, and abstract classes are not reported by this inspection.
&lt;p&gt;
Use the field below to specify the name of the class which will be used for logging in this project.
Classes which do not declare a field of that class will be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoggingConditionDisagreesWithLogStatement" displayName="Logging condition does not match log statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;em&gt;is log enabled for&lt;/em&gt; conditions of if statements which
do not match the log level of the contained log statement.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
&lt;b&gt;if&lt;/b&gt; (logger.isTraceEnabled()) {
    logger.debug(&quot;some log message&quot;);
}
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Method Metrics">
    <inspection shortName="GroovyMethodParameterCount" displayName="Method with too many parameters">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of methods with too many parameters.  Methods with too many parameters
can be a good sign that refactoring is necessary.  Methods whose signatures are inherited from
library classes are ignored by this inspection.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of parameters a method might have.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyOverlyComplexMethod" displayName="Overly complex method">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy methods that have too high a cyclomatic complexity.  Cyclomatic
complexity is basically a measurement of the number of branching points in a method.  Methods with too high
a cyclomatic complexity may be confusing and difficult to test.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable cyclomatic complexity a method might have.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyMethodWithMoreThanThreeNegations" displayName="Method with more than three negations">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports Groovy methods with three or more negation operations (&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;!=&lt;/font&gt;&lt;/b&gt;).
Such methods may be unnecessarily confusing.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyOverlyNestedMethod" displayName="Overly nested method">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy methods whose bodies are too deeply nested.  Methods with too much statement
nesting may be confusing, and are a good sign that refactoring may be necessary.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable nesting depth a method might have.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyOverlyLongMethod" displayName="Overly long method">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of Groovy methods that are too long. Methods that are too long
                may be confusing, and are a good sign that refactoring is necessary.
                &lt;p&gt;
                    Use the field provided below to specify the maximum acceptable number of non-comment source
                    statements a method might have.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyMultipleReturnPointsPerMethod" displayName="Method with multiple return points">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of Groovy methods with too many return points. Methods with too
                many return points
                may be confusing, and hard to refactor.
                &lt;p&gt;
                    Use the field provided below to specify the maximum acceptable number of return points a method
                    might have.&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Java language level issues">
    <inspection shortName="AutoBoxing" displayName="Auto-boxing">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;auto-boxing&quot;, i.e. the automatic wrapping of primitive values as objects, where needed.
Code which relies on auto-boxing will not work in pre-Java 5.0 environments.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnumAsName" displayName="Use of &apos;enum&apos; as identifier">&lt;html&gt;
&lt;body&gt;
This inspection reports variables, methods, or classes named
&lt;b&gt;enum&lt;/b&gt;. Such names are legal under Java 1.4 or
earlier JVMs, but will cause problems under Java 5.0 or later.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForeachStatement" displayName="Extended &apos;for&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports the Java 5 &lt;b&gt;for&lt;/b&gt; statement syntax.
Such &lt;b&gt;for&lt;/b&gt; statements are not supported under Java 1.4 and older.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AutoUnboxing" displayName="Auto-unboxing">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;auto-unboxing&quot;, e.g. the automatic unwrapping of objects into primitive values, where needed.
Code which relies on auto-boxing will not work in pre-Java 5.0 environments.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertAsName" displayName="Use of &apos;assert&apos; as identifier">&lt;html&gt;
&lt;body&gt;
This inspection reports variables, methods, or classes named
&lt;b&gt;assert&lt;/b&gt;. Such names are legal under Java 1.3 or
earlier JVMs, but will cause problems under Java 1.4 or later.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AssertStatement" displayName="&apos;assert&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;assert&lt;/b&gt; statements.
Such statements are not supported under Java 1.3 or earlier JVMs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnnotationClass" displayName="Annotation class">&lt;html&gt;
&lt;body&gt;
This inspection reports annotation interfaces.
Such interfaces are not supported under Java 1.4 or earlier JVMs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Annotation" displayName="Annotation">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of annotations.
Annotations are not supported under Java 1.4 or earlier JVMs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnumClass" displayName="Enumerated class">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;enum&lt;/b&gt; classes.
Such statements are not supported under Java 1.4 or earlier JVMs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="VarargParameter" displayName="Variable argument method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods taking variable numbers of parameters.
Such methods are not supported under Java 1.4 or earlier JVMs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Assignment issues">
    <inspection shortName="AssignmentToStaticFieldFromInstanceMethod" displayName="Assignment to static field from instance method">&lt;html&gt;
&lt;body&gt;
This inspection reports any assignments to &lt;b&gt;static&lt;/b&gt; fields from within
instance methods. While legal, such assignments are tricky to do
safely, and are often a result of fields being inadvertently marked
&lt;b&gt;static&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyNestedAssignment" displayName="Nested assignment">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of Groovy assignment expressions nested inside other expressions.
                While
                admirably terse,
                such expressions may be confusing, and violate the general design priniciple that a given construct
                should do precisely one thing.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyAssignabilityCheck" displayName="Incompatible type assignments">&lt;html&gt;
&lt;body&gt;
      This inspection reports assignments with incompatible types
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovySillyAssignment" displayName="Silly assignment">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any assignment of a Groovy variable to itself.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NestedAssignment" displayName="Nested assignment">&lt;html&gt;
&lt;body&gt;
This inspection reports assignment expressions nested inside other expressions. While admirably terse,
such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToCollectionFieldFromParameter" displayName="Assignment to Collection or array field from parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to assign an array or &lt;b&gt;Collection&lt;/b&gt; field from a method parameter.
Since the array or &lt;b&gt;Collection&lt;/b&gt; may have its contents modified by the calling method, this construct may
result in an object having its state modified unexpectedly. While occasionally useful for performance
reasons, this construct is inherently bug-prone.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyResultOfAssignmentUsed" displayName="Result of assignment used">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any Groovy assignment expressions nested inside other expressions, so as to use the assigned value immediately.
While admirably terse, such expressions may be confusing, and violate the general design principle that a
given construct should do precisely one thing.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUncheckedAssignmentOfMemberOfRawType" displayName="Unchecked assignment from members of raw type">&lt;html&gt;
&lt;body&gt;
        This inspection reports unchecked assignments from members of raw type.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyAssignmentCanBeOperatorAssignment" displayName="Assignment replaceable with operator assignment">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of assignment operations in Groovy which can be replaced by operator-assignment.  Code
using operator assignment may be clearer, and theoretically more performant.
&lt;p&gt;
Use the check box below to ignore the conditional operators &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&amp;amp;&amp;amp;&lt;/font&gt;&lt;/b&gt;
and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;||&lt;/font&gt;&lt;/b&gt;. Replacing conditional operators with operator
assignment modifies the semantics of the expression.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyAssignmentToMethodParameter" displayName="Assignment to method parameter">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of assignment to a
variable declared as a Groovy method parameter.  It also reports any attempt to increment or decrement the variable.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IncrementDecrementUsedAsExpression" displayName="Value of ++ or -- used">&lt;html&gt;
&lt;body&gt;
This inspection reports increment or decrement expressions nested inside other expressions.
While admirably terse, such expressions may be confusing, and violate the general design principle that a
given construct should do precisely one thing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentUsedAsCondition" displayName="Assignment used as condition">&lt;html&gt;
&lt;body&gt;
This inspection reports an assignment being
used as the condition of an &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;, &lt;b&gt;for&lt;/b&gt; or
&lt;b&gt;do&lt;/b&gt; statement. While occasionally intended,
this usage is confusing, and often indicates a typo
(&lt;b&gt;=&lt;/b&gt; instead of &lt;b&gt;==&lt;/b&gt;).
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToNull" displayName="Assignment to &apos;null&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports the assignment of a variable to
&lt;b&gt;null&lt;/b&gt;, outside of declarations.
While occasionally useful for triggering garbage collection, this
construct may make the code more prone
to NullPointerExceptions, and often indicates that the developer doesn&apos;t
really understand the class&apos;s intended semantics.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToCatchBlockParameter" displayName="Assignment to catch block parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports assignment to variable declared as a &lt;b&gt;catch&lt;/b&gt; block parameter.
While occasionally intended, this construct can be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyAssignmentToForLoopParameter" displayName="Assignment to for-loop parameter">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of assignment a variable declared in a Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; statement
in the body of that statement.  It also reports any attempt to increment or decrement the variable.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AssignmentToMethodParameter" displayName="Assignment to method parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports assignment to a
variable declared as a method parameter. It also reports any attempt to increment or decrement the variable.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceAssignmentWithOperatorAssignment" displayName="Assignment replaceable with operator assignment">&lt;html&gt;
&lt;body&gt;
This inspection reports assignment operations which can be replaced by operator-assignment. Code
using operator assignment may be clearer, and theoretically more performant.
&lt;p&gt;
Use the check box below to ignore the conditional operators &lt;b&gt;&amp;amp;&amp;amp;&lt;/b&gt;
and &lt;b&gt;||&lt;/b&gt;. Replacing conditional operators with operator
assignment modifies the semantics of the expression.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToDateFieldFromParameter" displayName="Assignment to Date or Calendar field from parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to assign a &lt;b&gt;java.lang.Date&lt;/b&gt; or
&lt;b&gt;java.lang.Calendar&lt;/b&gt; field from a method parameter.
Since &lt;b&gt;Date&lt;/b&gt; or &lt;b&gt;Calendar&lt;/b&gt; are often
treated as immutable values but are actually mutable, assigning to such a field from a method parameter may
result in an object having its state modified unexpectedly. While occasionally useful for performance
reasons, this construct is inherently bug-prone.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssignmentToForLoopParameter" displayName="Assignment to &apos;for&apos; loop parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports assignment a variable declared in a &lt;b&gt;for&lt;/b&gt; statement
in the body of that statement. It also reports any attempt to increment or decrement the variable.
While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Encapsulation issues">
    <inspection shortName="ReturnOfDateField" displayName="Return of Date or Calendar field">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to return a &lt;b&gt;java.lang.Date&lt;/b&gt; or
&lt;b&gt;java.lang.Calendar&lt;/b&gt; field from a method. Since
&lt;b&gt;Date&lt;/b&gt; or &lt;b&gt;Calendar&lt;/b&gt; are often
treated as immutable values but are actually mutable, this construct may
result in an object having its state modified unexpectedly. While occasionally useful for performance
reasons, this construct is inherently bug-prone.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProtectedInnerClass" displayName="Protected inner class">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;protected&lt;/b&gt; inner classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicField" displayName="&apos;public&apos; field">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;public&lt;/b&gt; instance variables.
Constants (i.e. variables marked &lt;b&gt;static&lt;/b&gt; and &lt;b&gt;final&lt;/b&gt;) are not reported.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProtectedField" displayName="Protected field">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;protected&lt;/b&gt; instance variables.
Constants (i.e. variables marked &lt;b&gt;static&lt;/b&gt; and &lt;b&gt;final&lt;/b&gt;) are not reported.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UseOfAnotherObjectsPrivateField" displayName="Accessing a non-public field of another object">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of another object&apos;s private or protected fields. Java
allows the use of such fields for objects of the same class as the current objects, but
some coding styles discourage this use. Additionally, such direct access to private fields
may fail in component-oriented architectures such (e.g. Spring, Hibernate) which expect all access
to other objects to be through method calls so as to allow the framework to mediate all access
using proxies.
&lt;p&gt;
Use the first checkbox below to ignore accesses from the same class and only report accesses
from inner or outer classes.&lt;br&gt;
Use the second checkbox below to ignore accesses from an &lt;b&gt;equals()&lt;/b&gt; method.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageVisibleField" displayName="Package-visible field">&lt;html&gt;
&lt;body&gt;
This inspection reports package-visible instance variables.
Constants (i.e. variables marked &lt;b&gt;static&lt;/b&gt; and &lt;b&gt;final&lt;/b&gt;) are not reported.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageVisibleInnerClass" displayName="Package-visible inner class">&lt;html&gt;
&lt;body&gt;
This inspection reports package-visible inner classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicInnerClass" displayName="&apos;public&apos; inner class">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;public&lt;/b&gt; inner classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnOfCollectionField" displayName="Return of Collection or array field">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to return an array or &lt;b&gt;Collection&lt;/b&gt; field from a method. Since
the array or &lt;b&gt;Collection&lt;/b&gt; may have its contents modified by the calling method, this construct may
result in an object having its state modified unexpectedly. While occasionally useful for performance
reasons, this construct is inherently bug-prone.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Performance issues">
    <inspection shortName="TrivialStringConcatenation" displayName="Concatenation with empty string">&lt;html&gt;
&lt;body&gt;
This inspection reports string concatenations where one of the arguments is the
empty string. Such a concatenation is unnecessary and inefficient, particularly when used as
an idiom for formatting non-String objects or primitives into Strings.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InnerClassMayBeStatic" displayName="Inner class may be &apos;static&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any inner classes which may safely be made
&lt;b&gt;static&lt;/b&gt;. An inner class may be static if it doesn&apos;t reference
its enclosing class instance. A static inner class uses slightly less memory.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ToArrayCallWithZeroLengthArrayArgument" displayName="Call to &apos;Collection.toArray()&apos; with zero-length array argument">&lt;html&gt;
&lt;body&gt;
This inspection reports any call to &lt;b&gt;toArray()&lt;/b&gt;
on an object of type or subtype &lt;b&gt;java.util.Collection&lt;/b&gt;
with a zero-length array argument. When passing in an array of too small size, the 
&lt;b&gt;toArray()&lt;/b&gt; method has to construct a new array of
the right size using reflection. This has significantly worse performance than passing
in an array of at least the size of the collection itself.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionContainsUrl" displayName="Map or Set may contain java.net.URL objects">&lt;html&gt;
&lt;body&gt;
This inspection reports objects which are a subtype of
&lt;b&gt;java.util.Set&lt;/b&gt; or &lt;b&gt;java.util.Map&lt;/b&gt;
and which may contain java.net.URL objects. Adding &lt;b&gt;java.net.URL&lt;/b&gt;
objects to such collections can cause performance problems because of calls to the
&lt;b&gt;equals()&lt;/b&gt; and &lt;b&gt;hashCode()&lt;/b&gt;
methods of &lt;b&gt;java.net.URL&lt;/b&gt;.
&lt;b&gt;java.net.URL&lt;/b&gt;&apos;s equals and hashCode method use a DNS
lookup, which depending on the availability of the network and the speed of the DNS server
can cause significant delays.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ManualArrayToCollectionCopy" displayName="Manual array to collection copy">&lt;html&gt;
&lt;body&gt;This inspection reports the copying of array contents to a collection where each element
is added individually using a for loop. Such constructs may be replaced by a call to
&lt;b&gt;Collection.addAll(Arrays.asList())&lt;/b&gt;.
&lt;br&gt;
This inspection provides a quick fix.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferMustHaveInitialCapacity" displayName="StringBuffer or StringBuilder without initial capacity">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to instantiate a new &lt;b&gt;StringBuffer&lt;/b&gt; or
&lt;b&gt;StringBuilder&lt;/b&gt; object without specifying its initial capacity.
If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing
to specify initial capacities for &lt;b&gt;StringBuffer&lt;/b&gt;s may result in performance issues, if space needs to be reallocated and
memory copied when capacity is exceeded
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantStringFormatCall" displayName="Redundant call to &apos;String.format()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;String.format()&lt;/b&gt; where only a format string is
provided, but no arguments. Such a call is unnecessary and can be replaced with just
the string.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BooleanConstructor" displayName="Boolean constructor call">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to instantiate a new &lt;b&gt;Boolean&lt;/b&gt;
object. Constructing new &lt;b&gt;Boolean&lt;/b&gt; objects is rarely necessary,
and may cause performance problems if done often enough.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaLangReflect" displayName="Use of java.lang.reflect">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of classes in the &lt;b&gt;java.lang.reflect&lt;/b&gt; package. While powerful,
reflection in Java is often slow, and may possibly be unsafe is it prevents compile-time type and
exception checking.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryTemporaryOnConversionFromString" displayName="Unnecessary temporary object in conversion from String">&lt;html&gt;
&lt;body&gt;
This inspection reports unnecessary creation of temporary objects when converting
from Strings to primitive types.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    new Integer(&quot;3&quot;).intValue()
&lt;/pre&gt;&lt;/code&gt;
will be reported, and can be automatically converted to:
&lt;code&gt;&lt;pre&gt;
    Integer.valueOf(&quot;3&quot;)
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RandomDoubleForRandomInteger" displayName="Using &apos;Random.nextDouble()&apos; to get random integer">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to
&lt;b&gt;java.util.Random.getDouble()&lt;/b&gt; which are then multiplied
by some factor and cast to an integer. For generating a random integer in some range,
&lt;b&gt;java.util.Random.getInt()&lt;/b&gt; is more efficient.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringToString" displayName="Redundant &apos;String.toString()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any to call &lt;b&gt;toString()&lt;/b&gt; on a String object.
This is entirely redundant.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferToStringInConcatenation" displayName="&apos;StringBuffer.toString()&apos; in concatenation">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;StringBuffer.toString()&lt;/b&gt;
or &lt;b&gt;StringBuilder.toString()&lt;/b&gt; in String concatenations.
In addition to being confusing, this code performs String allocation and copying, which is unnecessary
as of JDK1.4.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassInitializerMayBeStatic" displayName="Class initializer may be &apos;static&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any class initializers which may safely be made &lt;b&gt;static&lt;/b&gt;.
A class initializer may be static if it does not reference any of its class&apos; non static methods
and non static fields.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StringConstructor" displayName="Redundant String constructor call">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to instantiate a new
&lt;b&gt;String&lt;/b&gt; object by copying an existing string.
Constructing new &lt;b&gt;String&lt;/b&gt; objects in this way
is rarely necessary, and may cause performance problems if done often enough.
&lt;p&gt;
Use the check box below to ignore &lt;b&gt;String&lt;/b&gt;
constructor calls which have a &lt;b&gt;String.substring()&lt;/b&gt;
call as parameter. A call to &lt;b&gt;substring()&lt;/b&gt;
reuses the character array of the original string, which can cause a large
amount of garbage to stay in memory if the substring is small in relation to the
original &lt;b&gt;String&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferReplaceableByString" displayName="Constant StringBuffer may be String">&lt;html&gt;
&lt;body&gt;
This inspection reports any variables declared as &lt;b&gt;java.lang.StringBuffer&lt;/b&gt;
and &lt;b&gt;java.lang.StringBuilder&lt;/b&gt; which are
effectively constant, and may thus be declared more efficiently declared as &lt;b&gt;java.lang.String&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SubstringZero" displayName="Redundant &apos;.substring(0)&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call to &lt;b&gt;String.substring()&lt;/b&gt;
with a constant argument equal to zero. Such calls are completely redundant, and may be removed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TailRecursion" displayName="Tail recursion">&lt;html&gt;
&lt;body&gt;
This inspection reports tail recursion, that is when a method calls itself
as its last action before returning. Tail recursion can always be replaced by looping, which will be considerably faster.
Some JVMs perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different
performance characteristics on different virtual machines.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BoxingBoxedValue" displayName="Boxing of already boxed value">&lt;html&gt;
&lt;body&gt;
This inspection reports boxing of already boxed values. This is a useless
operation since any boxed value will first be auto-unboxed before boxing the
value again. If done inside an inner loop such code may cause performance
problems.
&lt;p&gt;
&lt;small&gt;New in 10.0.2, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="KeySetIterationMayUseEntrySet" displayName="Iteration over &apos;keySet()&apos; may be replaced with &apos;entrySet()&apos; iteration">&lt;html&gt;
&lt;body&gt;
This inspection reports iteration over the &lt;b&gt;keySet()&lt;/b&gt;
of a &lt;b&gt;java.util.Map&lt;/b&gt; instance,
where the iterated keys are used to retrieve the values from the map. Such
iteration may be more efficiently replaced by iteration over the
&lt;b&gt;entrySet()&lt;/b&gt; of the map.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ObjectAllocationInLoop" displayName="Object allocation in loop">&lt;html&gt;
&lt;body&gt;
This inspection reports object or array allocation inside loops. While not
necessarily a problem, object allocation inside loop is a great place to look for memory leaks
and performance issues.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldMayBeStatic" displayName="Field may be &apos;static&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any instance variables which may safely be made &lt;b&gt;static&lt;/b&gt;. A field
may be static if it is declared &lt;b&gt;final&lt;/b&gt;, and is initialized with a constant.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInLoops" displayName="String concatenation in loop">&lt;html&gt;
&lt;body&gt;
This inspection reports String concatenation in loops. For performance reasons, it
is preferable to replace such concatenation with explicit calls to
&lt;b&gt;StringBuilder.append()&lt;/b&gt; or
&lt;b&gt;StringBuffer.append()&lt;/b&gt;
&lt;p&gt;
Use the checkbox below to indicate that this inspection should only warn when the same variable
is appended to inside the loop.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstantiatingObjectToGetClassObject" displayName="Instantiating object to get Class object">&lt;html&gt;
&lt;body&gt;
This inspection reports any cases where new objects are instantiated for the purpose
of accessing its class object. It is more performant to access the class object
directly by name.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LengthOneStringInIndexOf" displayName="Single character string argument in &apos;String.indexOf()&apos; call">&lt;html&gt;
&lt;body&gt;
This inspection reports String literals of length one being used
as a parameter in &lt;b&gt;String.indexOf()&lt;/b&gt; or
&lt;b&gt;String.lastIndexOf()&lt;/b&gt; calls.
These String literals may be replaced by equivalent character literals, gaining some performance enhancement.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionsMustHaveInitialCapacity" displayName="Collection without initial capacity">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to instantiate a new &lt;b&gt;Collection&lt;/b&gt; object without specifying
an initial capacity. If no initial capacity is specified, a default capacity is used, which will rarely be optimal. Failing
to specify initial capacities for collections may result in performance issues, if space needs to be reallocated and
memory copied when capacity is exceeded. This inspection checks allocations of the following classes:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;java.util.ArrayList&lt;/b&gt;
&lt;li&gt;&lt;b&gt;java.util.BitSet&lt;/b&gt;
&lt;li&gt;&lt;b&gt;java.util.HashMap&lt;/b&gt;
&lt;li&gt;&lt;b&gt;java.util.HashSet&lt;/b&gt;
&lt;li&gt;&lt;b&gt;java.util.Hashtable&lt;/b&gt;
&lt;li&gt;&lt;b&gt;java.util.Vector&lt;/b&gt;
&lt;li&gt;&lt;b&gt;java.util.WeakHashMap&lt;/b&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LengthOneStringsInConcatenation" displayName="Single character string concatenation">&lt;html&gt;
&lt;body&gt;
This inspection reports String literals of length one being used in concatenation.
These literals may be replaced by equivalent character literals, gaining some performance enhancement.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MapReplaceableByEnumMap" displayName="Map replaceable with EnumMap">&lt;html&gt;
&lt;body&gt;
This inspection reports any instantiations of &lt;b&gt;java.util.Map&lt;/b&gt; objects
whose key types are enumerated classes. Such &lt;b&gt;java.util.Map&lt;/b&gt; objects
can be replaced by &lt;b&gt;java.util.EnumMap&lt;/b&gt; objects.
&lt;b&gt;java.util.EnumMap&lt;/b&gt; implementations can be much more efficient
that those of other sets, as the underlying data structure is a simple array.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodMayBeStatic" displayName="Method may be &apos;static&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any methods which may safely be made &lt;b&gt;static&lt;/b&gt;.
A method may be static if it is not synchronized, it does not reference any of its class&apos; non static methods 
and non static fields and is not overridden in a sub class.
&lt;p&gt;
Use the checkboxes below to inspect only &lt;b&gt;private&lt;/b&gt;
or &lt;b&gt;final&lt;/b&gt; methods, which increases the
performance of this inspection and to ignore empty methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsHashCodeCalledOnUrl" displayName="&apos;equals()&apos; or &apos;hashCode()&apos; called on java.net.URL object">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;.equals()&lt;/b&gt; or
&lt;b&gt;.hashCode()&lt;/b&gt; being called
on &lt;b&gt;java.net.URL&lt;/b&gt; objects. This can cause performance
problems because those methods uses a DNS lookup
to determine the equality of two &lt;b&gt;java.net.URL&lt;/b&gt; objects.
Depending on the availability of the network and the speed of the DNS server, this can cause
significant delays.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SetReplaceableByEnumSet" displayName="Set replaceable with EnumSet">&lt;html&gt;
&lt;body&gt;
This inspection reports any instantiations of &lt;b&gt;java.util.Set&lt;/b&gt; objects
whose content types are enumerated classes. Such &lt;b&gt;java.util.Set&lt;/b&gt; objects
can be replaced by &lt;b&gt;java.util.EnumSet&lt;/b&gt; objects.
&lt;b&gt;java.util.EnumSet&lt;/b&gt; implementations can be much more efficient
that those of other sets, as the underlying data structure is a simple bitmap.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringEqualsEmptyString" displayName="&apos;String.equals(&quot;&quot;)&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;.equals()&lt;/b&gt; being called
to compare a String with an empty string. It is normally more performant to test a String for emptiness
by comparing its &lt;b&gt;.length()&lt;/b&gt; to zero instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantStringIntern" displayName="Call to &apos;intern()&apos; on String constant">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;String.intern()&lt;/b&gt; on a compile-time constant
string. Per the Java Language Specification, compile-time constant strings are automatically interned, making the call
to &lt;b&gt;String.intern()&lt;/b&gt; redundant.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryTemporaryOnConversionToString" displayName="Unnecessary temporary object in conversion to String">&lt;html&gt;
&lt;body&gt;
This inspection reports unnecessary creation of temporary objects when converting
from primitive types to Strings.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    new Integer(3).toString()
&lt;/pre&gt;&lt;/code&gt;
will be reported, and can be automatically converted to:
&lt;code&gt;&lt;pre&gt;
    Integer.toString(3)
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DynamicRegexReplaceableByCompiledPattern" displayName="Dynamic regular expression could be replaced by compiled Pattern">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to the regular expression methods of
&lt;b&gt;java.lang.String&lt;/b&gt; using constants arguments.
Such calls may be profitably replaced with a
&lt;b&gt;private static final Pattern&lt;/b&gt; field so
that the regular expression does not have to be compiled each time it is used.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SizeReplaceableByIsEmpty" displayName="&apos;size() == 0&apos; replaceable with &apos;isEmpty()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;.size()&lt;/b&gt;
comparisons with a &lt;b&gt;0&lt;/b&gt; literal which can be
replaced with a call to &lt;b&gt;.isEmpty()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInsideStringBufferAppend" displayName="String concatenation as argument to &apos;StringBuffer.append() call&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports String concatenation used as
the argument to &lt;b&gt;StringBuffer.append()&lt;/b&gt;,
&lt;b&gt;StringBuilder.append()&lt;/b&gt; or
&lt;b&gt;Appendable.append()&lt;/b&gt;. Such calls
may profitably be turned into chained append calls on the existing
&lt;b&gt;StringBuffer/Builder/Appendable&lt;/b&gt;, saving the
cost of an extra &lt;b&gt;StringBuffer/Builder&lt;/b&gt;
allocation. &lt;br&gt;This inspection ignores compile time evaluated String
concatenations, which when converted to chained append calls would only
worsen performance.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringReplaceableByStringBuffer" displayName="Non-constant String should be StringBuilder">&lt;html&gt;
&lt;body&gt;
This inspection reports any variables declared as &lt;b&gt;java.lang.String&lt;/b&gt; which are
repeatedly appended to. Such variables may be more efficiently declared as &lt;b&gt;java.lang.StringBuffer&lt;/b&gt;
or &lt;b&gt;java.lang.StringBuilder&lt;/b&gt;.&lt;br&gt;
Use the check box below to specify that this inspection should only warn when the variable is appended
to in a loop.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ManualArrayCopy" displayName="Manual array copy">&lt;html&gt;
&lt;body&gt;
This inspection reports the manual copying of array contents which may be replaced by
calls to &lt;b&gt;System.arraycopy()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToSimpleSetterInClass" displayName="Call to simple setter from within class">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to a simple property setter from within the property&apos;s class.
A simple property setter is defined as one which simply assigns a the value of its parameter to a field,
and does no other calculation. Such simple setter calls may be safely inlined, at a small performance
improvement. Some coding standards also suggest against the use of simple setters for code clarity
reasons.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToSimpleGetterInClass" displayName="Call to simple getter from within class">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to a simple property getter from within the property&apos;s class.
A simple property getter is defined as one which simply returns the value of a field,
and does no other calculation. Such simple getter calls may be safely inlined, at a small performance
improvement. Some coding standards also suggest against the use of simple getters for code clarity
reasons.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Control flow issues">
    <inspection shortName="BreakStatementWithLabel" displayName="&apos;break&apos; statement with label">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;break&lt;/b&gt; statements with labels.
Labeled &lt;b&gt;break&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConditionalExpressionWithIdenticalBranches" displayName="Conditional expression with identical branches">&lt;html&gt;
&lt;body&gt;
This inspection reports conditional expressions
with identical &quot;then&quot; and &quot;else&quot; branches. Such expressions are almost certainly
programmer error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InfiniteLoopStatement" displayName="Infinite loop statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt;, &lt;b&gt;while&lt;/b&gt;,
or &lt;b&gt;do&lt;/b&gt; statements which
can only exit by throwing an exception. While such statements may be correct, they
are often a symptom of coding errors.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfMayBeConditional" displayName="&apos;if&apos; statement could be replaced with simple conditional expression">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;if&lt;/b&gt;
statements with then and &lt;b&gt;else&lt;/b&gt; branches which
are both assignment expressions or both &lt;b&gt;return&lt;/b&gt;
statements. The same semantics can be expressed more compactly, and arguably
more clearly, with a conditional expression. Example:
&lt;pre&gt;
  &lt;b&gt;if&lt;/b&gt; (foo == null) {
    bar = null;
  } &lt;b&gt;else&lt;/b&gt; {
    bar = foo.get();
  }
&lt;/pre&gt;
may be expressed as:
&lt;pre&gt;
  bar = foo == null ? null : foo.get();
&lt;/pre&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoopStatementsThatDontLoop" displayName="Loop statement that does not loop">&lt;html&gt;
&lt;body&gt;
This inspection reports any instance of &lt;b&gt;for&lt;/b&gt;,
&lt;b&gt;while&lt;/b&gt; and &lt;b&gt;do&lt;/b&gt; statements whose
bodies are guaranteed to execute at most once. Normally, this is an indication of a bug.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryLabelOnContinueStatement" displayName="Unnecessary label on &apos;continue&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;continue&lt;/b&gt; statements with unnecessary
labels.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateCondition" displayName="Duplicate condition in &apos;if&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports on any duplicate conditions among different branches of an
&lt;b&gt;if&lt;/b&gt; statement. While it may rarely be the
desired semantics, duplicate conditions usually represent programmer oversight.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FallthruInSwitchStatement" displayName="Fallthrough in &apos;switch&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &apos;fallthrough&apos; in a &lt;b&gt;switch&lt;/b&gt; statement.
&apos;Fallthrough&apos; is defined to occur when a series of executable statements after a &lt;b&gt;switch&lt;/b&gt; label is not guaranteed
to transfer control before the next &lt;b&gt;switch&lt;/b&gt; label. In that case, control &apos;falls through&apos; to the statements after
that &lt;b&gt;switch&lt;/b&gt; label, even though the &lt;b&gt;switch&lt;/b&gt; expression does not equal
the value of the fallen-through label. While occasionally intended, this construction is confusing, and is often the result of a typo.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryDefault" displayName="Unnecessary &apos;default&apos; for enum &apos;switch&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements with
&lt;b&gt;default&lt;/b&gt; branches which
can never be taken. At present, such branches are only marked for &lt;b&gt;switch&lt;/b&gt; statements
over enumerated types all of whose values have corresponding &lt;b&gt;case&lt;/b&gt; branches.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryReturn" displayName="Unnecessary &apos;return&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports on any unnecessary &lt;b&gt;return&lt;/b&gt; statements at the end of constructors and methods returning
&lt;b&gt;void&lt;/b&gt;. These may be safely removed.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ContinueStatement" displayName="&apos;continue&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;continue&lt;/b&gt; statements.
&lt;b&gt;continue&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfStatementWithTooManyBranches" displayName="&apos;if&apos; statement with too many branches">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt; statements with too many branches.
Such statements may be confusing, and are often the sign of inadequate levels of design
abstraction.
&lt;p&gt;
Use the field provided below to specify the maximum number of branches expected.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TrivialIf" displayName="Redundant &apos;if&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt; statements which can be simplified to single assignment or
&lt;b&gt;return&lt;/b&gt; statements.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    &lt;b&gt;if&lt;/b&gt; (foo()) {
       &lt;b&gt;return true&lt;/b&gt;;
    } &lt;b&gt;else&lt;/b&gt; {
       &lt;b&gt;return false&lt;/b&gt;;
    }
&lt;/pre&gt;&lt;/code&gt;
can be simplified to
&lt;code&gt;&lt;pre&gt;
    &lt;b&gt;return&lt;/b&gt; foo();
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoopConditionNotUpdatedInsideLoop" displayName="Loop variable not updated inside loop">&lt;html&gt;
&lt;body&gt;
This inspection reports any variables and parameters which are used in a loop condition
and are not updated inside the loop. These may cause an infinite loop if executed and
are probably not what was intended.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementWithTooFewBranches" displayName="&apos;switch&apos; statement with too few branches">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements with too few &lt;b&gt;case&lt;/b&gt; labels.
Such statements may be more clearly expressed as &lt;b&gt;if&lt;/b&gt; statements.
&lt;p&gt;
Use the field provided below to specify the minimum number of &lt;b&gt;case&lt;/b&gt; labels expected.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedLabel" displayName="Unused label">&lt;html&gt;
&lt;body&gt;
This inspection reports unused code labels.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnumSwitchStatementWhichMissesCases" displayName="Enum &apos;switch&apos; statement that misses case">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements
over enumerated types which do not include all of the enumerated type&apos;s elements as cases.
&lt;p&gt;
Use the check box below to let this inspection ignore &lt;b&gt;switch&lt;/b&gt;
statements which include a &lt;b&gt;default&lt;/b&gt; branch.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LabeledStatement" displayName="Labeled statement">&lt;html&gt;
&lt;body&gt;
This inspection reports labeled statements.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DoubleNegation" displayName="Double negation">&lt;html&gt;
&lt;body&gt;
This inspection reports double negation.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;if (!!functionCall())&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NegatedIfElse" displayName="&apos;if&apos; statement with negated condition">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt; statements
which contain &lt;b&gt;else&lt;/b&gt; branches and whose conditions are negated.
Flipping the order of the &lt;b&gt;if&lt;/b&gt; and &lt;b&gt;else&lt;/b&gt;
branches will usually increase the clarity of such statements.
&lt;p&gt;
Use the check box below to have comparisons of the form &lt;b&gt;!= null&lt;/b&gt;
ignored by this inspection
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfStatementWithIdenticalBranches" displayName="&apos;if&apos; statement with identical branches">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt;
statements with identical &quot;then&quot; and &lt;b&gt;else&lt;/b&gt; branches. Such statements are almost certainly
programmer error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForLoopWithMissingComponent" displayName="&apos;for&apos; loop with missing components">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt; loops
that lack initialization, condition, or update clauses. Some coding styles prohibit
such loops.
&lt;p&gt;
Use the checkbox below to let this inspection ignore loops which use an iterator.
This is a standard way to iterate over a collection, in which the
&lt;b&gt;for&lt;/b&gt; loop does not have an update
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementDensity" displayName="&apos;switch&apos; statement with too low of a branch density">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements
with too low a ratio of switch labels to executable statements. Such &lt;b&gt;switch&lt;/b&gt; statements
may be confusing, and should probably be refactored.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PointlessBooleanExpression" displayName="Pointless boolean expression">&lt;html&gt;
&lt;body&gt;
This inspection reports pointless or pointlessly
complicated boolean expressions. Such expressions include &lt;b&gt;and&lt;/b&gt;ing with true,
&lt;b&gt;or&lt;/b&gt;ing with false,
equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyComplexBooleanExpression" displayName="Overly complex boolean expression">&lt;html&gt;
&lt;body&gt;
This inspection reports boolean expressions with too many terms. Such
expressions may be confusing and bug-prone.
&lt;p&gt;
Use the field provided below to specify the maximum number of terms allowed in a boolean expression.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementWithConfusingDeclaration" displayName="Local variable used and declared in different &apos;switch&apos; branches">&lt;html&gt;
&lt;body&gt;
This inspection reports local variables declared in one branch of a &lt;b&gt;switch&lt;/b&gt; statement
and used in a different branch. Such declarations can be extremely confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DefaultNotLastCaseInSwitch" displayName="&apos;default&apos; not last case in &apos;switch&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements where the &lt;b&gt;default&lt;/b&gt; case
comes before some other case. This construct is unnecessarily confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryConditionalExpression" displayName="Redundant conditional expression">&lt;html&gt;
&lt;body&gt;
This inspection reports conditional expressions of the form
&lt;b&gt;&lt;i&gt;condition&lt;/i&gt;?true:false&lt;/b&gt; or &lt;b&gt;&lt;i&gt;condition&lt;/i&gt;?false:true&lt;/b&gt;. These expressions may be safely simplified
to &lt;b&gt;&lt;i&gt;condition&lt;/i&gt;&lt;/b&gt; or &lt;b&gt;!&lt;i&gt;condition&lt;/i&gt;&lt;/b&gt;, respectively.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableConditionalExpression" displayName="Conditional that can be simplified to &amp;&amp; or ||">&lt;html&gt;
&lt;body&gt;
This inspection reports conditional expressions of the form
&lt;b&gt;&lt;i&gt;condition&lt;/i&gt;?true:&lt;i&gt;foo&lt;/i&gt;&lt;/b&gt; or
&lt;b&gt;&lt;i&gt;condition&lt;/i&gt;?false:&lt;i&gt;foo&lt;/i&gt;&lt;/b&gt;. These
expressions may be safely simplified to
&lt;b&gt;&lt;i&gt;condition&lt;/i&gt; || &lt;i&gt;foo&lt;/i&gt;&lt;/b&gt; or
&lt;b&gt;!&lt;i&gt;condition&lt;/i&gt; &amp;&amp; &lt;i&gt;foo&lt;/i&gt;&lt;/b&gt;, respectively.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForLoopReplaceableByWhile" displayName="&apos;for&apos; loop may be replaced with &apos;while&apos; loop">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt; loops
which contain neither initialization or update components, and can thus be replaced by
simpler &lt;b&gt;while&lt;/b&gt; statements.
&lt;p&gt;
Use the checkbox below if you wish this inspection to ignore &lt;b&gt;for&lt;/b&gt; loops with trivial or non-existent conditions.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementWithTooManyBranches" displayName="&apos;switch&apos; statement with too many branches">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements with too many &lt;b&gt;case&lt;/b&gt; labels.
&lt;p&gt;
Use the field provided below to specify the maximum number of &lt;b&gt;case&lt;/b&gt; labels expected.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedSwitchStatement" displayName="Nested &apos;switch&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports nested &lt;b&gt;switch&lt;/b&gt; statements. Nested &lt;b&gt;switch&lt;/b&gt; statements
may result in extremely confusing code.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantConditionalExpression" displayName="Constant conditional expression">&lt;html&gt;
&lt;body&gt;
This inspection reports conditional expressions of the form
&lt;b&gt;true?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/b&gt; or &lt;b&gt;false?&lt;i&gt;result1&lt;/i&gt;:&lt;i&gt;result2&lt;/i&gt;&lt;/b&gt;.
These expressions sometimes occur as the result of automatic refactorings, and may obviously be simplified.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantIfStatement" displayName="Constant &apos;if&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt; statements of the form
&lt;b&gt;if(true)...&lt;/b&gt; or &lt;b&gt;if(false)...&lt;/b&gt;.
These statements sometimes occur due to automatic refactorings, and may obviously
be simplified.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryLabelOnBreakStatement" displayName="Unnecessary label on &apos;break&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;break&lt;/b&gt; statements with unnecessary
labels.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedConditionalExpression" displayName="Nested conditional expression">&lt;html&gt;
&lt;body&gt;
This inspection reports nested conditional expressions. Nested conditional expressions
may result in extremely confusing code.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConditionalExpression" displayName="Conditional expression (?:)">&lt;html&gt;
&lt;body&gt;
This inspection reports the ternary condition operator. Some coding standards prohibit the use of
the condition operator, in favor of &lt;b&gt;if-else&lt;/b&gt; statements.
&lt;p&gt;
Use the checkbox below to ignore simple assignments and returns and thus allow constructs like this:
&lt;pre&gt;
    String s = (foo == null) ? &quot;&quot; : foo.toString();
&lt;/pre&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DuplicateBooleanBranch" displayName="Duplicate condition on &apos;&amp;&amp;&apos; or &apos;||&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports duplicated branches in
&lt;b&gt;&amp;amp;&amp;amp;&lt;/b&gt; or &lt;b&gt;||&lt;/b&gt;
expressions. Such constructs almost always represents a typo or cut-and-paste error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatementsWithoutDefault" displayName="&apos;switch&apos; statement without &apos;default&apos; branch">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements that do not contain
&lt;b&gt;default&lt;/b&gt; labels.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConfusingElse" displayName="Confusing &apos;else&apos; branch">&lt;html&gt;
&lt;body&gt;
This inspection reports confusing &lt;b&gt;else&lt;/b&gt; branches. &lt;b&gt;else&lt;/b&gt; branches are confusing
when the &lt;b&gt;if&lt;/b&gt; statement is followed by other statements and the &lt;b&gt;if&lt;/b&gt; branch
cannot complete normally, for example because it ends with a &lt;b&gt;return&lt;/b&gt; statement. In these
cases the statements in the &lt;b&gt;else&lt;/b&gt; can be moved after the &lt;b&gt;if&lt;/b&gt; statement and
the &lt;b&gt;else&lt;/b&gt; branch removed.
&lt;p&gt;
Use the checkbox below to also report &lt;b&gt;else&lt;/b&gt; branches of &lt;b&gt;if&lt;/b&gt; statements whose
&lt;b&gt;if&lt;/b&gt; branch cannot complete normally and which are not followed by more statements,
similar to the Redundant Else intention.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryContinue" displayName="Unnecessary &apos;continue&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports on any unnecessary &lt;b&gt;continue&lt;/b&gt; statements at the end of loops.
These may be safely removed.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LoopWithImplicitTerminationCondition" displayName="Loop with implicit termination condition">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;while&lt;/b&gt;,
&lt;b&gt;do-while&lt;/b&gt; and &lt;b&gt;for&lt;/b&gt;
loops which have the constant &lt;b&gt;true&lt;/b&gt; as their
only condition, but which still can be terminated by a containing
&lt;b&gt;if&lt;/b&gt; statement which can break out of the loop.
This &lt;b&gt;if&lt;/b&gt; statement must be the first or only statement
in a &lt;b&gt;while&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt;
loops and the last or only statement in a &lt;b&gt;do-while&lt;/b&gt; loop.
Such a loop would be clearer if the if statement was removed and its condition
was made an explicit loop condition.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BreakStatement" displayName="&apos;break&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;break&lt;/b&gt; statements,
other than at the end of a &lt;b&gt;switch&lt;/b&gt; statement branch.
&lt;b&gt;break&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ContinueStatementWithLabel" displayName="&apos;continue&apos; statement with label">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;continue&lt;/b&gt; statements with labels.
Labeled &lt;b&gt;continue&lt;/b&gt; statements complicate refactoring, and can be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SwitchStatement" displayName="&apos;switch&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;switch&lt;/b&gt; statements.
&lt;b&gt;switch&lt;/b&gt; statements are often (but not always) indicators of poor object-oriented design.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PointlessIndexOfComparison" displayName="Pointless &apos;indexOf()&apos; comparison">&lt;html&gt;
&lt;body&gt;
This inspection reports pointless comparison with
&lt;b&gt;.indexOf()&lt;/b&gt; expression. An example of such an expression
is comparing the result of &lt;b&gt;.indexOf()&lt;/b&gt; with numbers less than -1.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NegatedConditional" displayName="Conditional expression with negated condition">&lt;html&gt;
&lt;body&gt;
This inspection reports conditional expressions whose conditions are negated.
Flipping the order of the conditional expression branches will usually increase the clarity of such statements.
&lt;p&gt;
Use the check box below to have comparisons of the form &lt;b&gt;!= null&lt;/b&gt;
ignored by this inspection
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Compiler issues">
    <inspection shortName="JavacQuirks" displayName="Javac quirks">&lt;html&gt;
&lt;body&gt;
&lt;span&gt;This inspection warns about known Javac issues, problems and incompatibilities.&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Concurrency annotation issues">
    <inspection shortName="NonFinalFieldInImmutable" displayName="Non-final field in @Immutable class">&lt;html&gt;
&lt;body&gt;
                This inspection reports any non-final field in a class with annotation
                @net.jcip.annotations.Immutable. This violates the contract of the @Immutable
                annotation.
           &lt;br&gt;&lt;small&gt;New in 9&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldAccessNotGuarded" displayName="Unguarded field access">&lt;html&gt;
&lt;body&gt;
               This inspection reports any accesses of fields declared as @net.jcip.annotations.GuardedBy
                which are are not guarded by an appropriate synchronization structure.
           &lt;br&gt;&lt;small&gt;New in 9&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnknownGuard" displayName="Unknown @GuardedBy field">&lt;html&gt;
&lt;body&gt;
                This inspection reports any @net.jcip.annotations.GuardedBy annotations where the guarding field
                is unknown.
           &lt;br&gt;&lt;small&gt;New in 9&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticGuardedByInstance" displayName="Static member guarded by instance field or this">&lt;html&gt;
&lt;body&gt;
                This inspection reports any @net.jcip.annotations.GuardedBy annotations on static fields or methods,
                where
                the guard is either a non-static field or &apos;this&apos;. Guarding a static by a non-static may result in
                excessive
                concurrency, multiple threads may be able to access the guarded field simultaneously, by locking in
                different
                object contexts.
           &lt;br&gt;&lt;small&gt;New in 9&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonFinalGuard" displayName="Non-final @GuardedBy field">&lt;html&gt;
&lt;body&gt;
               This inspection reports any @net.jcip.annotations.GuardedBy annotations where the guarding field
                is not final. Gaurding on a non-final field may result in unexpected race conditions, as locks will
                be held on the value of the field (which may change), rather than the field itself.
           &lt;br&gt;&lt;small&gt;New in 9&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceGuardedByStatic" displayName="Instance member guarded by static field">&lt;html&gt;
&lt;body&gt;
               This inspection reports any @net.jcip.annotations.GuardedBy annotations on instance fields or methods,
                where
                the guard is a static field. Guarding a non-static by a static may result in excessive lock contention,
                as access to each locked field in any object instance will prevent simultaneous access to that field in
                every object
                instance.
           &lt;br&gt;&lt;small&gt;New in 9&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Internationalization issues">
    <inspection shortName="DuplicateStringLiteralInspection" displayName="Duplicate String Literal">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports all string literals which are replicated unchanged throughout the project.
&lt;br&gt;For example:
&lt;code&gt;&lt;pre&gt;
class C1 { String CONST1=&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&quot;duplicate string&quot;&lt;/font&gt;&lt;/b&gt;; }
class C2 { String CONST2=&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&quot;duplicate string&quot;&lt;/font&gt;&lt;/b&gt;; }
&lt;/pre&gt;&lt;/code&gt;
&lt;/font&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
The &apos;&lt;b&gt;Ignore @PropertyKey expressions&lt;/b&gt;&apos; option allows you to ignore
   strings passed as arguments to methods annotated with &lt;b&gt;org.jetbrains.annotations.PropertyKey&lt;/b&gt; annotation.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StringEquals" displayName="Call to &apos;String.equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;equals()&lt;/b&gt; on &lt;b&gt;String&lt;/b&gt; objects. Such calls are usually
incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TimeToString" displayName="Call to &apos;Time.toString()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;toString()&lt;/b&gt; on &lt;b&gt;java.sql.Time&lt;/b&gt; objects. Such calls are usually
incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DateToString" displayName="Call to &apos;Date.toString()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;toString()&lt;/b&gt; on &lt;b&gt;java.util.Date&lt;/b&gt; objects. Such calls are usually
incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimpleDateFormatWithoutLocale" displayName="Instantiating a SimpleDateFormat without a Locale">&lt;html&gt;
&lt;body&gt;
This inspection reports any instantiations of &lt;b&gt;java.util.SimpleDateFormat&lt;/b&gt;
which do not specify a &lt;b&gt;java.util.Locale&lt;/b&gt;.
Such calls are usually incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringTokenizer" displayName="Use of StringTokenizer">&lt;html&gt;
&lt;body&gt;
This inspection reports any use of the &lt;b&gt;StringTokenizer&lt;/b&gt; class. Many uses of
&lt;b&gt;StringTokenizer&lt;/b&gt; are incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LossyEncoding" displayName="Lossy encoding">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
  This inspection warns you of characters that current encoding is incapable to represent.&lt;br&gt;
  E.g. when you are trying to type international characters in an &lt;b&gt;US-ASCII&lt;/b&gt;-encoded file.&lt;br&gt;
  Typically, you would fix this by changing the file encoding,
  either by specifying the encoding directly in the file, e.g. by editing &lt;b&gt;encoding=&lt;/b&gt; attribute in the XML prolog of XML file,
  or configuring the &lt;b&gt;Settings|General|File Encoding|Default encoding&lt;/b&gt; setting,
  or by setting up the file/directory encoding in the &lt;b&gt;Settings|File/Directory Options|File Encodings&lt;/b&gt;.
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HardCodedStringLiteral" displayName="Hard coded strings">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of hardcoded String literals.  Hardcoded string literals are probably errors in
an internationalized environment.&lt;br&gt;
  This inspection doesn&apos;t report instances of empty strings and strings consisting of only whitespace.
&lt;p&gt;
The checkboxes below may be used to further specialize whether this inspection should report
strings in:
  &lt;ul&gt;
  &lt;li&gt;assert statements, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;assert str.equals(&lt;font color=&quot;#008000&quot;&gt;&quot;message&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;exception constructor calls, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;new Exception(&lt;font color=&quot;#008000&quot;&gt;&quot;message&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;JUnit assert calls, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;assertEquals(str, &lt;font color=&quot;#008000&quot;&gt;&quot;message&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;the only argument to a method returning String, like in &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;getStringByKey(&lt;font color=&quot;#008000&quot;&gt;&quot;key&quot;&lt;/font&gt;)&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;literals with value of legal and existing class name like &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Class.forName(&lt;font color=&quot;#008000&quot;&gt;&quot;java.lang.Object&quot;&lt;/font&gt;);&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;li&gt;literals with value of legal and existing property key &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;bundle.getString(&lt;font color=&quot;#008000&quot;&gt;&quot;authentication.failed&quot;&lt;/font&gt;);&lt;/font&gt;&lt;/b&gt;&lt;/li&gt;
  &lt;/ul&gt;

  There is a quickfix provided that transforms
  Java code string literal
  into the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.util.ResourceBundle.getString()&lt;/font&gt;&lt;/b&gt;
  method call.
  &lt;br&gt;

&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="StringCompareTo" displayName="Call to &apos;String.compareTo()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;compareTo()&lt;/b&gt; on &lt;b&gt;String&lt;/b&gt; objects. Such calls are usually
incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringEqualsIgnoreCase" displayName="Call to &apos;String.equalsIgnoreCase()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;equalsIgnoreCase()&lt;/b&gt; on &lt;b&gt;String&lt;/b&gt; objects. Such calls are usually
incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnresolvedPropertyKey" displayName="Invalid property key">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection verifies that arguments passed to functions
  with parameters annotated as &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@PropertyKey&lt;/font&gt;&lt;/b&gt; are valid property keys in the
  respective properties files. It also verifies that the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;resourceBundle&lt;/font&gt;&lt;/b&gt;
  argument of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@PropertyKey&lt;/font&gt;&lt;/b&gt; annotation is an existing resource bundle.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="DuplicatePropertyInspection" displayName="Duplicate Property">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports duplicate property keys with different values, duplicate keys or duplicate property values.
  Scope defines the area where inspection would search for duplicates.
 &lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
property1=&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;value&lt;/font&gt;&lt;/b&gt;;
property2=&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;value&lt;/font&gt;&lt;/b&gt;;
&lt;/pre&gt;&lt;/code&gt;

&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MagicCharacter" displayName="&quot;Magic character&quot;">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;magic characters&quot;, character constants used without declaration.
&quot;Magic character&quot; can result in code whose intention is extremely unclear, and may result in errors if a &quot;magic
character&quot; is changed in one code location but not another. Such use can complicate internationalization
efforts.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NumericToString" displayName="Call to Numeric &apos;toString()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;toString()&lt;/b&gt; on numeric objects. Such calls are usually
incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CharacterComparison" displayName="Character comparison">&lt;html&gt;
&lt;body&gt;
This inspection reports any ordinal comparison of &lt;b&gt;char&lt;/b&gt; values. In an internationalized
environment, such comparisons are rarely correct.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringToUpperWithoutLocale" displayName="Call to &apos;String.toUpperCase()&apos; or &apos;toLowerCase()&apos; without a Locale">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;toUpperCase()&lt;/b&gt; or
&lt;b&gt;toLowerCase()&lt;/b&gt; on &lt;b&gt;String&lt;/b&gt; objects which
do not specify a &lt;b&gt;java.util.Locale&lt;/b&gt;.
Such calls are usually incorrect in an internationalized environment.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenation" displayName="String concatenation">&lt;html&gt;
&lt;body&gt;
This inspection reports any String concatenation (&lt;b&gt;+&lt;/b&gt;). Concatenation is usually
incorrect in an internationalized environment, and should be replace by uses of
&lt;b&gt;java.text.MessageFormat&lt;/b&gt; or similar classes.
&lt;p&gt;
Use the first checkbox below to have this inspection ignore string concatenations
which are used as a description argument in an &lt;b&gt;assert&lt;/b&gt; statement.
&lt;br&gt;Use the second checkbox to ignore string concatenations used as arguments
for a call to any of the &lt;b&gt;System.out.print()&lt;/b&gt; methods.
&lt;br&gt;Use the third checkbox to ignore string concatenations used as arguments
for a call to any of the &lt;b&gt;System.err.print()&lt;/b&gt; methods.
&lt;br&gt;Use the fourth checkbox to ignore string concatenations used as arguments in
the construction of any subclass of &lt;b&gt;java.lang.Throwable&lt;/b&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Naming conventions">
    <inspection shortName="ConstantNamingConvention" displayName="Constant naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports any constants whose names are either too short, too long, or do not follow
the specified regular expression pattern. Constants are fields declared &lt;b&gt;static final&lt;/b&gt;.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for constant names
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format). Use the
checkbox below to specify that only immutable static final fields should be checked by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNamingConvention" displayName="Class naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for class names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonExceptionNameEndsWithException" displayName="Non-exception class name ends with &apos;Exception&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports non-exception classes whose names end with &apos;Exception&apos;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceVariableNamingConvention" displayName="Instance field naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports instance variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for
instance variable names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverloadedVarargsMethod" displayName="Overloaded variable argument method">&lt;html&gt;
&lt;body&gt;
This inspection reports vararg methods, when there are one or more other methods with the
same name present in a class. Overloaded varargs methods can be very confusing,
as it is often not clear which overloading gets called.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodNameSameAsClassName" displayName="Method name same as class name">&lt;html&gt;
&lt;body&gt;
This inspection reports methods being named identically to their class.
A method with such a name may be easily mistaken for a constructor.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnnotationNamingConvention" displayName="Annotation naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports annotation classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for annotation names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnumeratedClassNamingConvention" displayName="Enumerated class naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports enumerated classes whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for enumerated class names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterNameDiffersFromOverriddenParameter" displayName="Parameter name differs from parameter in overridden method">&lt;html&gt;
&lt;body&gt;
This inspection reports parameters that have different names from the corresponding
parameters in the methods they override. While legal in Java, such inconsistent names may be confusing,
and lessen the documentation benefits of good naming practices.
&lt;p&gt;
Use the checkboxes below to indicate whether overridden parameter names which are only
a single character long or come from a library method should be ignored. Both can be useful if
you do not wish to be bound by dubious naming conventions used in libraries.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StandardVariableNames" displayName="Standard variable names">&lt;html&gt;
&lt;body&gt;
This inspection reports on any variables with &apos;standard&apos; names which are of unexpected types.
Such names may be confusing. Standard names and types are as follows:
&lt;ul&gt;
&lt;li&gt;i, j, k, m, n  - &lt;b&gt;int&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;f  - &lt;b&gt;float&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;d  - &lt;b&gt;double&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;b  - &lt;b&gt;byte&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;c, ch  - &lt;b&gt;char&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;l - &lt;b&gt;long&lt;/b&gt; &lt;/li&gt;
&lt;li&gt;s, str - &lt;b&gt;String&lt;/b&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DollarSignInName" displayName="Use of &apos;$&apos; in identifier">&lt;html&gt;
&lt;body&gt;
This inspection reports identifers containing dollar signs (&apos;$&apos;). While
such identifiers are legal Java, their use outside of generated java code is strongly discouraged.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceMethodNamingConvention" displayName="Instance method naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports instance methods whose names are either too short, too long, or do not follow
the specified regular expression pattern. Instance methods that override library
methods are ignored by this inspection.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for instance method names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExceptionNameDoesntEndWithException" displayName="Exception class name does not end with &apos;Exception&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports exception classes whose names don&apos;t end with &apos;Exception&apos;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MethodNamesDifferOnlyByCase" displayName="Method names differing only by case">&lt;html&gt;
&lt;body&gt;
This inspection reports on cases where multiple methods of a class have names which differ only by
case. Such method names may be very confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonBooleanMethodNameMayNotStartWithQuestion" displayName="Non-boolean method name must not start with question word">&lt;html&gt;
&lt;body&gt;
This inspection reports non-boolean methods whose names start with a question
word. Non-boolean methods that override library methods are ignored by this inspection.
&lt;p&gt;
Use the list below to specify question words which should only be used for boolean methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InterfaceNamingConvention" displayName="Interface naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports interfaces whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for interface names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNamePrefixedWithPackageName" displayName="Class name prefixed with package name">&lt;html&gt;
&lt;body&gt;
This inspection reports classes whose names are prefixed with their package names, irrespective of
capitalization. While occasionally reasonable, this is often due to a poor naming scheme, and may be redundant and
annoying.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticMethodNamingConvention" displayName="Static method naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports static methods whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for static method names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnumeratedConstantNamingConvention" displayName="Enumerated constant naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports enumerated constants whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for enumerated constant names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConfusingMainMethod" displayName="Confusing &apos;main()&apos; method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods named &quot;main&quot; which do not have signature
public static void main(String[]). Such methods may be confusing, as methods named &quot;main&quot;
are expected to be application entry points.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UpperCaseFieldNameNotConstant" displayName="Non-constant field with upper-case name">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;static&lt;/b&gt; non-&lt;b&gt;final&lt;/b&gt;
fields whose names are all upper-case. Such fields may cause confusion by breaking a common naming convention, and
are often the result of developer error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNameSameAsAncestorName" displayName="Class name same as ancestor name">&lt;html&gt;
&lt;body&gt;
This inspection reports class being named identically to one of their
super classes (but in different packages). Such class name may be very confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverloadedMethodsWithSameNumberOfParameters" displayName="Overloaded methods with same number of parameters">&lt;html&gt;
&lt;body&gt;
This inspection reports on cases where multiple methods of the same class are declared
with the identical name and same number of parameters.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeParameterNamingConvention" displayName="Type parameter naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports type parameters whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for type parameter names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="QuestionableName" displayName="Questionable name">&lt;html&gt;
&lt;body&gt;
This inspection reports on any variables, methods, or classes with questionable names.
This inspection is best used to report common metasyntactic variables which may be
used as names by lazy or confused developers.
&lt;p&gt;
Use the list below to specify names which should be reported
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodNameSameAsParentName" displayName="Method name same as parent class name">&lt;html&gt;
&lt;body&gt;
This inspection reports methods being named identically to the superclass of the method&apos;s class.
Such a method name may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticVariableNamingConvention" displayName="Static field naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;static&lt;/b&gt; variables whose names are either too short, too long, or do not follow
the specified regular expression pattern. Constants, i.e. variables of immutable type declared &lt;b&gt;static final&lt;/b&gt;,
are not checked by this inspection
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for static variable names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalVariableNamingConvention" displayName="Local variable naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports local variables whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BooleanMethodNameMustStartWithQuestion" displayName="Boolean method name must start with question word">&lt;html&gt;
&lt;body&gt;
This inspection reports boolean methods whose names do not start with a question
word. Boolean methods that override library methods are ignored by this inspection.
&lt;p&gt;
Use the list below to specify acceptable question words to start boolean method names with.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterNamingConvention" displayName="Method parameter naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports method parameters whose names are either too short, too long, or do not follow
the specified regular expression pattern.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for method parameter names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Class structure">
    <inspection shortName="EmptyClass" displayName="Empty class">&lt;html&gt;
&lt;body&gt;
This inspection reports any empty classes or Java file without any class defined. A class is empty if it
doesn&apos;t have any fields, methods, constructors or initializers. Empty classes are often left over
after large changes or refactorings.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UtilityClassWithoutPrivateConstructor" displayName="Utility class without private constructor">&lt;html&gt;
&lt;body&gt;
This inspection reports utility classes which do not have &lt;b&gt;private&lt;/b&gt; constructors.
Utility classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;. Giving such classes a &lt;b&gt;private&lt;/b&gt;
constructor prevents them from being inadvertently instantiated.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UtilityClassWithPublicConstructor" displayName="Utility class with &apos;public&apos; constructor">&lt;html&gt;
&lt;body&gt;
This inspection reports utility classes with &lt;b&gt;public&lt;/b&gt; constructors. Utility
classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;. Giving such classes a &lt;b&gt;public&lt;/b&gt;
constructor is confusing, and may lead to the class being inadvertently instantiated.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NoopMethodInAbstractClass" displayName="No-op method in abstract class">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;no-op&quot; methods in &lt;b&gt;abstract&lt;/b&gt; classes. It is usually a better
design to make such methods &lt;b&gt;abstract&lt;/b&gt; themselves, so that classes which inherit the methods will not forget to provide
their own implementations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MissingDeprecatedAnnotation" displayName="Missing @Deprecated annotation">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes, fields, or methods which have the &lt;b&gt;@deprecated&lt;/b&gt;
javadoc tag but do not have the &lt;b&gt;@java.lang.Deprecated&lt;/b&gt; annotation.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantDeclaredInInterface" displayName="Constant declared in interface">&lt;html&gt;
&lt;body&gt;
This inspection reports on any constants (i.e. &lt;b&gt;public static final&lt;/b&gt; fields) declared in interfaces.
Some coding standards require that constants be declared in abstract classes instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassInitializer" displayName="Non-static initializer">&lt;html&gt;
&lt;body&gt;
This inspection reports any of non-&lt;b&gt;static&lt;/b&gt; initializers
in classes. Some coding standards prohibit such initializers, preferring initialization to be done
in constructors or field initializers. Non-&lt;b&gt;static&lt;/b&gt; initializers
may also be inadvertently created by deleting the &lt;b&gt;static&lt;/b&gt; keyword,
resulting in obscure bugs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Singleton" displayName="Singleton">&lt;html&gt;
&lt;body&gt;
This inspection reports singleton classes.
Singleton classes are declared so that only one instance of the
class may ever be instantiated. Singleton classes complicate testing,
and their presence may indicate a lack of object-oriented design.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassInTopLevelPackage" displayName="Class without package statement">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes
which do not contain package declarations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalMethodInFinalClass" displayName="&apos;final&apos; method in &apos;final&apos; class">&lt;html&gt;
&lt;body&gt;
This inspection reports methods being declared &lt;b&gt;final&lt;/b&gt; in
classes that are declared &lt;b&gt;final&lt;/b&gt;. This is unnecessary, and may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldCanBeLocal" displayName="Field can be local">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection searches for redundant class fields that can be replaced with local variables.
If all local usages of a field are preceded by assignments to that field, the
field can be removed and its usages replaced with local variables.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LimitedScopeInnerClass" displayName="Limited-scope inner class">&lt;html&gt;
&lt;body&gt;
This inspection reports any limited-scope inner classes. Some code standards discourage
the use of limited-scope inner classes, and they are unusual enough as to possibly be
confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MissingOverrideAnnotation" displayName="Missing @Override annotation">&lt;html&gt;
&lt;body&gt;
This inspection reports any methods which override methods in a superclass but
do not have the &lt;b&gt;@java.lang.Override&lt;/b&gt; annotation.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
Use the checkbox below to have this inspection ignore the
&lt;b&gt;java.lang.Object&lt;/b&gt; methods
&lt;b&gt;equals()&lt;/b&gt;,
&lt;b&gt;hashCode()&lt;/b&gt; and
&lt;b&gt;toString()&lt;/b&gt;. The risk of these methods
going missing and thus your code not compiling anymore due to the
&lt;b&gt;@Override&lt;/b&gt; annotation is vanishingly small.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassMayBeInterface" displayName="Class may be interface">&lt;html&gt;
&lt;body&gt;
This inspection reports any concrete or abstract classes
which may be simplified to be interfaces. This occurs if the class has no superclass (other
than Object), has no fields declared that are not &lt;b&gt;static&lt;/b&gt;, &lt;b&gt;final&lt;/b&gt;, and &lt;b&gt;public&lt;/b&gt;, and has no
methods declared that are not &lt;b&gt;public&lt;/b&gt; and &lt;b&gt;abstract&lt;/b&gt;, and no inner classes
that cannot themselves be interfaces.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticNonFinalField" displayName="&apos;static&apos;, non-&apos;final&apos; field">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;final&lt;/b&gt; &lt;b&gt;static&lt;/b&gt; fields.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalStaticMethod" displayName="&apos;static&apos; method declared &apos;final&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports methods declared &lt;b&gt;final&lt;/b&gt; and &lt;b&gt;static&lt;/b&gt;.
When a &lt;b&gt;static&lt;/b&gt; method is overridden in a subclass it can still be
accessed via the super class, making a &lt;b&gt;final&lt;/b&gt; declaration not very necessary.
Declaring a &lt;b&gt;static&lt;/b&gt; method &lt;b&gt;final&lt;/b&gt;
does prevent subclasses from defining a &lt;b&gt;static&lt;/b&gt; method with the same
signature.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MarkerInterface" displayName="Marker interface">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;marker&quot; interfaces which have no methods or fields.
Such interfaces may be confusing, and normally indicate a design failure.
Interfaces which extend two or more other interfaces will not be reported by
this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantDeclaredInAbstractClass" displayName="Constant declared in abstract class">&lt;html&gt;
&lt;body&gt;
This inspection reports on any constants (i.e. &lt;b&gt;public static final&lt;/b&gt; fields) declared in abstract
classes. Some coding standards require that constants be declared in interfaces instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousInnerClass" displayName="Anonymous inner class">&lt;html&gt;
&lt;body&gt;
This inspection reports any anonymous inner classes.
Some code standards discourage the use of anonymous inner classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InnerClassOnInterface" displayName="Inner class of interface">&lt;html&gt;
&lt;body&gt;
This inspection reports inner classes
of &lt;b&gt;interface&lt;/b&gt; classes. Some coding standards
discourage such classes. Enumeration classes and annotation classes are not reported
by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalPrivateMethod" displayName="&apos;private&apos; method declared &apos;final&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports methods
declared &lt;b&gt;final&lt;/b&gt; and &lt;b&gt;private&lt;/b&gt;.
As &lt;b&gt;private&lt;/b&gt; methods cannot be meaningfully overridden, declaring them
&lt;b&gt;final&lt;/b&gt; is redundant.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleTopLevelClassesInFile" displayName="Multiple top level classes in single file">&lt;html&gt;
&lt;body&gt;
This inspection reports multiple top-level classes in a single java file. Putting multiple
top-level classes in a file can be confusing, and may degrade the usefulness of various
software tools.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNameDiffersFromFileName" displayName="Class name differs from file name">&lt;html&gt;
&lt;body&gt;
This inspection reports top-level class names which do not match the name of
their containing file. While the Java specification allows such naming for non-&lt;b&gt;public&lt;/b&gt; classes,
such misnamed files can be confusing, and may degrade the usefulness of various
software tools.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalMethod" displayName="&apos;final&apos; method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods being declared &lt;b&gt;final&lt;/b&gt;. Some coding
standards discourage &lt;b&gt;final&lt;/b&gt; methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PublicConstructorInNonPublicClass" displayName="&apos;public&apos; constructor in non-public class">&lt;html&gt;
&lt;body&gt;
This inspection reports all constructors in non-&lt;b&gt;public&lt;/b&gt;
classes that are declared &lt;b&gt;public&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ProtectedMemberInFinalClass" displayName="&apos;protected&apos; member in &apos;final&apos; class">&lt;html&gt;
&lt;body&gt;
This inspection reports members being declared &lt;b&gt;protected&lt;/b&gt; in
classes that are declared &lt;b&gt;final&lt;/b&gt;. Such members may be declared &lt;b&gt;private&lt;/b&gt;
or package-visible instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinalClass" displayName="&apos;final&apos; class">&lt;html&gt;
&lt;body&gt;
This inspection reports classes being declared &lt;b&gt;final&lt;/b&gt;. Some coding
standards discourage &lt;b&gt;final&lt;/b&gt; classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodReturnAlwaysConstant" displayName="Method returns per-class constant">&lt;html&gt;
&lt;body&gt;
This global inspection reports methods which only ever return a constant.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UtilityClass" displayName="Utility class">&lt;html&gt;
&lt;body&gt;
This inspection reports utility classes.
Utility classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;, and their
presence may indicate a lack of object-oriented design.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ListenerMayUseAdapter" displayName="Class may extend adapter instead of implementing listener">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes which implement a listener, but may extend
the corresponding adapter instead. The quickfix for this inspection will also
remove any redundant empty methods left over after replacing the implementation
of the listener with an extension of the corresponding adapter.
&lt;p&gt;
Use the checkbox below to indicate if the inspection should warn even if no empty
implementing methods are found.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Javadoc issues">
    <inspection shortName="UnnecessaryJavaDocLink" displayName="Unnecessary Javadoc link">&lt;html&gt;
&lt;body&gt;
This inspection reports any Javadoc &lt;b&gt;@see&lt;/b&gt;,
&lt;b&gt;{@link}&lt;/b&gt; and &lt;b&gt;{@linkplain}&lt;/b&gt;
tags which reference the method owning the comment, the super method of the
method owning the comment or the class containing the comment. Such links are
unnecessary and can be safely removed using this inspections quickfix. The
quickfix will remove the entire Javadoc comment if the link is its only content.
&lt;p&gt;
Use the checkbox below to ignore inline links (&lt;b&gt;{@link}&lt;/b&gt; and &lt;b&gt;{@linkplain}&lt;/b&gt;)
to super methods. While a link to all super methods is automatically added by the
Javadoc tool, an inline link to the super method can occasionally be needed in
the text of the Javadoc.
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HtmlTagCanBeJavadocTag" displayName="&lt;code&gt;...&lt;/code&gt; can be replaced with {@code ...}">&lt;html&gt;
&lt;body&gt;
This inspection reports use of &lt;b&gt;&amp;lt;code&amp;gt;&lt;/b&gt; tags in Javadoc comments. Since JDK1.5
these constructs may be replaced with &lt;b&gt;{@code ...}&lt;/b&gt; constructs. This allows the use of angle brackets (&lt;&gt;)
inside the comment, instead of HTML character entities.
&lt;p&gt;
&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PackageDotHtmlMayBePackageInfo" displayName="&apos;package.html&apos; may be converted to &apos;package-info.java&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any package.html files. These files are used for documenting
packages. Since J2SE 5 it is recommended to use package-info.java files instead, since such
files can also contain package annotations.  In this way, package-info.java becomes the
sole repository for package level annotations and documentation.
&lt;p&gt;
This inspection provides a quickfix to convert the package.html file to a package-info.java file.
If a package-info.java file is already present this inspection provides a quickfix to delete
the package.html file, since the Javadoc tool would ignore it then anyway.
&lt;p&gt;
&lt;small&gt;New in 10.0.3, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaDoc" displayName="Declaration has Javadoc problems">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection points out the following javadoc comment flaws:&lt;br&gt;&lt;br&gt;
&amp;nbsp;- no javadoc where it is required&lt;br&gt;
&amp;nbsp;- required tag is missing&lt;br&gt;
&amp;nbsp;- invalid or incomplete tag&lt;br&gt;
&amp;nbsp;- javadoc description is missing or incomplete&lt;br&gt;&lt;br&gt;
Use tabs and corresponding inspection options below, to define visibility scope where javadoc is required, as well as the
required javadoc tags for classes, methods, fields and inner classes.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryInheritDoc" displayName="Unnecessary {@inheritDoc} Javadoc Comment">&lt;html&gt;
&lt;body&gt;
This inspection reports any Javadoc comments which contain only the
&lt;b&gt;{@inheritDoc}&lt;/b&gt;
tag. Since Javadoc copies the super class&apos; comment if no comment is present, a
comment containing only an &lt;b&gt;{@inheritDoc}&lt;/b&gt;
adds nothing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavadocReference" displayName="Declaration has problems in Javadoc references">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection points out unresolved references inside javadoc&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Class metrics">
    <inspection shortName="ClassCoupling" displayName="Overly coupled class">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which are highly coupled, i.e. that reference too many other classes.
Classes with too high a coupling can be very fragile, and should probably be broken up. References to system classes
(those in the &lt;b&gt;java.&lt;/b&gt;or &lt;b&gt;javax.&lt;/b&gt; packages), are not
counted for purposes of this inspection.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable coupling a class might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNestingDepth" displayName="Inner class too deeply nested">&lt;html&gt;
&lt;body&gt;
This inspection reports inner classes too deeply nested. Nesting inner classes inside
inner classes is almost certain to be confusing, and is a good sign that refactoring may be necessary.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable nesting depth a class might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousClassMethodCount" displayName="Anonymous inner class with too many methods">&lt;html&gt;
&lt;body&gt;
This inspection reports anonymous inner class with too many methods.
Anonymous classes with more than a very low number of methods may be
difficult to understand, and should probably be promoted to become named inner classes.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of methods
an anonymous inner class might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassInheritanceDepth" displayName="Class too deep in inheritance tree">&lt;html&gt;
&lt;body&gt;
This inspection reports class too deep in the inheritance hierarchy. Classes too deeply inherited
may be confusing, and are a good sign that refactoring may be necessary. This inspection counts all superclasses
from a library as a single superclass (libraries are considered unmodifyable).
&lt;p&gt;
Use the field provided below to specify the maximum acceptable inheritance depth a class might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodCount" displayName="Class with too many methods">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes with too many methods. Classes with
a large number of methods are often trying to &apos;do too much&apos;, and may need to be
refactored into multiple smaller classes.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of methods
a class might have.
&lt;p&gt;
Use the checkbox below to specify if simple getters and setters should be ignored
in the method count.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousClassComplexity" displayName="Overly complex anonymous inner class">&lt;html&gt;
&lt;body&gt;
This inspection reports anonymous inner classes with too high of a total complexity. The
total complexity of a class is the sum of the cyclomatic complexities of all the methods
and initializers the class declares. Inherited methods and initializers are not counted
toward the total complexity. Anonymous classes with more than very low complexities may be
difficult to understand, and should probably be promoted to become named inner classes.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable complexity a class might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldCount" displayName="Class with too many fields">&lt;html&gt;
&lt;body&gt;
This inspection reports class with too many fields. Classes with
a large number of fields are often trying to &apos;do too much&apos;, and may need to be
refactored into multiple smaller classes.
&lt;p&gt;
Use the controls below to specify the maximum acceptable number of fields a class might have, and
to indicate whether constant fields count toward this number. Per default this inspection only counts
immutable &lt;b&gt;static final&lt;/b&gt; objects as constant. Use the checkbox below to
count any &lt;b&gt;static final&lt;/b&gt; field as constant.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassComplexity" displayName="Overly complex class">&lt;html&gt;
&lt;body&gt;
This inspection reports class with too high of a total complexity. The
total complexity of a class is the sum of the cyclomatic complexities of all the methods
and initializers the class declares. Inherited methods and initializers are not counted
toward the total complexity.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable complexity a class might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstructorCount" displayName="Class with too many constructors">&lt;html&gt;
&lt;body&gt;
This inspection reports class with too many constructors. Classes with
too many constructors are prone to initialization errors, and may often be better modeled as
multiple subclasses.
&lt;p&gt;
Use the field provided below to specify the maximum acceptable number of constructors a class might have.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Code style issues">
    <inspection shortName="UnqualifiedFieldAccess" displayName="Instance field access not qualified with &apos;this&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on field accesses which are not qualified with
&lt;b&gt;this&lt;/b&gt; or some other qualifier. Some coding styles
mandate that all field accesses are qualified to prevent confusion with local
variable or parameter accesses.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CStyleArrayDeclaration" displayName="C-style array declaration">&lt;html&gt;
&lt;body&gt;
This inspection reports array declarations made using C-style syntax, with the array indicator attached to the variable,
rather than Java-style syntax, with the array indicator attached to the type.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryConstantArrayCreationExpression" displayName="Constant array creation expression can be replaced with array initializer">&lt;html&gt;
&lt;body&gt;
This inspection reports any constant new array expression which can be replaced
with an array initializer. Array initializers omit the type declaration because
that is already specified by the declaration of the variable the expression is
assigned to.
&lt;p&gt;
&lt;small&gt;New in 8, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ChainedEquality" displayName="Chained equality comparisons">&lt;html&gt;
&lt;body&gt;
This inspection reports chained equality comparisons (i.e. &lt;b&gt;a==b==c&lt;/b&gt;).
Such comparisons are confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantImplements" displayName="Redundant interface declaration">&lt;html&gt;
&lt;body&gt;
This inspection reports any cases of classes declaring that they implement or extend an interface, when
that interface is already declared as implemented by a superclass or extended by another interface
of that class. Such declarations are unnecessary, and may be safely removed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryThis" displayName="Unnecessary &apos;this&apos; qualifier">&lt;html&gt;
&lt;body&gt;
This inspection reports on any unnecessary uses of &lt;b&gt;this&lt;/b&gt; in the code.
Using &lt;b&gt;this&lt;/b&gt; to
disambiguate a code reference may easily become unnecessary via automatic refactorings, and is discouraged
by many coding styles.
&lt;p&gt;
Sample:
&lt;code&gt;this.a=3;&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryEnumModifier" displayName="Unnecessary enum modifier">&lt;html&gt;
&lt;body&gt;
This inspection reports on any redundant modifiers on enumerated classes or components of
enumerated classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryInterfaceModifier" displayName="Unnecessary interface modifier">&lt;html&gt;
&lt;body&gt;
This inspection reports any redundant modifiers on interfaces or interface components.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedMethodCall" displayName="Nested method call">&lt;html&gt;
&lt;body&gt;
This inspection reports method calls used as parameters of another
method call.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryConstructor" displayName="Redundant no-arg constructor">&lt;html&gt;
&lt;body&gt;
This inspection reports unnecessary &lt;b&gt;public&lt;/b&gt; no-arg constructors.
If such a constructor is the only constructor for a class and performs no initialization,
it can be safely removed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryCallToStringValueOf" displayName="Unnecessary call to &apos;String.valueOf()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on any calls to &lt;b&gt;String.valueOf()&lt;/b&gt;
used in string concatenations. The conversion to string is handled automatically by the compiler
without a call to &lt;b&gt;String.valueOf()&lt;/b&gt;, thus it is not needed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeParameterExtendsObject" displayName="Type parameter explicitly extends &apos;java.lang.Object&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any type parameters explicitly declared to extend &lt;b&gt;java.lang.Object&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ControlFlowStatementWithoutBraces" displayName="Control flow statement without braces">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;if&lt;/b&gt;,
&lt;b&gt;while&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt;
statements without braces. Braces make the code easier to read and help prevent
errors when modifying the code.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryFinalOnParameter" displayName="Unnecessary &apos;final&apos; for method parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports method parameters declared &lt;b&gt;final&lt;/b&gt; unnecessarily.
Some coding standards frown on such parameters, so as to have shorter and more
understandable parameter lists.
&lt;p&gt;
Use the checkbox below to only warn on final parameters of abstract or interface
methods, which may be considered extra unnecessary, as such markings have no
effect on the implementation of these methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarySuperConstructor" displayName="Unnecessary call to &apos;super()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any no-argument calls to a superclass
constructor as the first call of a constructor. Such calls are unnecessary, and may be removed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnqualifiedStaticUsage" displayName="Unqualified static access">&lt;html&gt;
&lt;body&gt;
This inspection reports static method calls or field accesses that are not qualified
with the class name of the static method. This is legal if the static method or field is in
the same class as the call, but may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarilyQualifiedInnerClassAccess" displayName="Unnecessarily qualified inner class access">&lt;html&gt;
&lt;body&gt;
This inspection reports any references to inner classes which are unnecessarily qualified with the name
of the enclosing class. Such qualification is unnecessary, and may be safely removed. This may
require the addition of an import for the inner class.
&lt;p&gt;
Use the checkbox below to ignore references to inner classes where the removal of the qualification
would require the addition of an import.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitCallToSuper" displayName="Implicit call to &apos;super()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports constructors which do not begin with calls to &quot;super&quot; constructor, or
other constructors of the same class. Such constructors can be thought of as implicitly beginning with a
call to &lt;b&gt;super()&lt;/b&gt;. Some coding standards prefer that such calls to
&lt;b&gt;super()&lt;/b&gt; be made explicitly.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MissortedModifiers" displayName="Missorted modifiers">&lt;html&gt;
&lt;body&gt;
This inspection reports on declarations whose modifiers are not in the canonical
preferred order (as stated in the Java Language Specification). 
&lt;p&gt;
Use the checkbox below to specify that annotations should always be sorted before keyword modifiers.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsObject" displayName="Class explicitly extends java.lang.Object">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes explicitly declared to extend &lt;b&gt;java.lang.Object&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FieldMayBeFinal" displayName="Field may be final">&lt;html&gt;
&lt;body&gt;
This inspection reports any fields which may safely be made &lt;b&gt;final&lt;/b&gt;.
A &lt;b&gt;static&lt;/b&gt; field may be final if it is initialized in its declaration
or in one static class initializer, but not both. A non-static field may be final if it is initialized
in its declaration or in one non-static class initializer or in all constructors.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConfusingOctalEscape" displayName="Confusing octal escape sequence">&lt;html&gt;
&lt;body&gt;
This inspection reports any string literals which contain an octal escape sequence immediately followed by
a digit. Such strings may be confusing, and are often the result of errors in escape code creation.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarilyQualifiedStaticallyImportedElement" displayName="Unnecessarily qualified statically imported element">&lt;html&gt;
&lt;body&gt;
This inspection reports any references to static members which are statically imported and also qualified with
their containing class name. Because the elements are already statically imported such qualification is unnecessary
and can be removed.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryFinalOnLocalVariable" displayName="Unnecessary &apos;final&apos; for local variable">&lt;html&gt;
&lt;body&gt;
This inspection reports local variables declared &lt;b&gt;final&lt;/b&gt; unnecessarily.
Some coding standards frown on such variables, for reasons of terseness.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryBlockStatement" displayName="Unnecessary code block">&lt;html&gt;
&lt;body&gt;
This inspection reports code blocks which are unnecessary to the semantics of the program, and can
be replaced by their contents. Code blocks which are the bodies of &lt;b&gt;if&lt;/b&gt;, &lt;b&gt;do&lt;/b&gt;,
&lt;b&gt;while&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt; statements will not be reported by this
inspection.
&lt;p&gt;
Use the checkbox below if you wish this inspection to ignore code blocks which are used as branches of switch statements.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryParentheses" displayName="Unnecessary parentheses">&lt;html&gt;
&lt;body&gt;
This inspection reports on any instance of unnecessary parentheses. Parentheses
are considered unnecessary if the evaluation order of an expression remains
unchanged if the parentheses are removed.
&lt;p&gt;
Use the first checkbox below to ignore parentheses which help to clarify a binary
expression. Parentheses are clarifying if the expression parenthesized is an
&lt;b&gt;instanceof&lt;/b&gt; expression part of a larger
expression or has a different operator than the parent expression.&lt;br&gt;
Use the second checkbox below to ignore any parentheses around the condition
of conditional expressions. Some coding standards specify that all such conditions
must be surrounded by parentheses.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarySemicolon" displayName="Unnecessary semicolon">&lt;html&gt;
&lt;body&gt;
This inspection reports on any unnecessary semicolons, whether between class members, inside block statements, or after
class definitions. While valid Java, these semicolons are redundant, and may be removed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ListIndexOfReplaceableByContains" displayName="&apos;indexOf()&apos; expression is replaceable with &apos;contains()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;List.indexOf()&lt;/b&gt;
expressions which can be replaced with the method
&lt;b&gt;List.contains()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LiteralAsArgToStringEquals" displayName="&apos;expression.equals(&quot;literal&quot;)&apos; rather than &apos;&quot;literal&quot;.equals(expression)&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to &lt;b&gt;.equals()&lt;/b&gt; whose arguments are String literals. Some coding
standards specify that String literals should be the target of &lt;b&gt;.equals()&lt;/b&gt;, rather than
argument, thus minimizing &lt;b&gt;NullPointerException&lt;/b&gt;s.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalCanBeFinal" displayName="Local variable or parameter can be final">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports parameters or local variables, found in the specified inspection
scope, that may have a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;final&lt;/font&gt;&lt;/b&gt; modifier added.&lt;br&gt;&lt;br&gt;
Use check boxes in the inspection options below, to define whether parameters or local variables (or both) are to be reported.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ChainedMethodCall" displayName="Chained method calls">&lt;html&gt;
&lt;body&gt;
This inspection reports method calls whose target is another
method call.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnqualifiedInnerClassAccess" displayName="Unqualified inner class access">&lt;html&gt;
&lt;body&gt;
This inspection reports any references to inner classes which are not qualified with the name
of the enclosing class.
&lt;p&gt;
Use the checkbox below to ignore references to local inner classes that do not require an import.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarilyQualifiedStaticUsage" displayName="Unnecessarily qualified static access">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to static methods or accesses of static fields
on the current class which are qualified with the class name. Such qualification is unnecessary,
and may be safely removed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantOnRHSOfComparison" displayName="Constant on right side of comparison">&lt;html&gt;
&lt;body&gt;
This inspection reports on comparison operations with constant values on their right-hand side. Some coding conventions
specify that constants should be on the left-hand side of comparisons.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleTypedDeclaration" displayName="Variables of different types in one declaration">&lt;html&gt;
&lt;body&gt;
This inspection reports multiple different types of variables being declared in a single declaration.
Such declarations may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToStringConcatCanBeReplacedByOperator" displayName="Call to &apos;String.concat()&apos; can be replaced with &apos;+&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to the &lt;b&gt;concat&lt;/b&gt; method
of a &lt;b&gt;java.lang.String&lt;/b&gt; object. Such calls can be
replaced with the &apos;+&apos; operator for increased code clarity and possible increased
performance if the method was invoked on a constant with a constant argument.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessarySuperQualifier" displayName="Unnecessary &apos;super&apos; qualifier">&lt;html&gt;
&lt;body&gt;
This inspection reports any unnecessary uses of the &lt;b&gt;super&lt;/b&gt;
qualifier in method calls and fields references. A super qualifier is unnecessary
when the field or method of the super class is not overridden in the calling class.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableAnnotation" displayName="Simplifiable annotation">&lt;html&gt;
&lt;body&gt;
This inspection reports annotations which can be simplified to their &apos;single element&apos;
or &apos;marker&apos; shorthand form. Annotation that contain whitespace between the @-sign and the name
of the annotation are also reported.
&lt;p&gt;
&lt;small&gt;New in 10.0.2, Powered by InspectionGadgets &lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantFieldInitialization" displayName="Redundant field initialization">&lt;html&gt;
&lt;body&gt;
This inspection reports fields explicitly initialized to
the same values that the JVM would initialize them to by default.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryQualifierForThis" displayName="Unnecessary qualifier for &apos;this&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on any unnecessary qualification of &lt;b&gt;this&lt;/b&gt; in the code.
Using a qualifier on &lt;b&gt;this&lt;/b&gt; to
disambiguate a code reference may easily become unnecessary via automatic refactorings, and should be deleted for clarity.
&lt;p&gt;
Sample:
&lt;code&gt;OuterClass.this.foo();&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantOnLHSOfComparison" displayName="Constant on left side of comparison">&lt;html&gt;
&lt;body&gt;
This inspection reports on comparison operations with constant values on their left-hand side. Some coding conventions
specify that constants should be on the right-hand side of comparisons.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsCalledOnEnumConstant" displayName="&apos;equals()&apos; called on Enum value">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to &lt;b&gt;equals()&lt;/b&gt; on
&lt;b&gt;Enum&lt;/b&gt; constants. Such calls can be replaced by
an identity comparison &lt;b&gt;(==)&lt;/b&gt; because two
&lt;b&gt;Enum&lt;/b&gt; constants are equal only when they
have the same identity.
&lt;p&gt;
&lt;small&gt;New in 8.1, Powered by InspectionGadgets &lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnThis" displayName="Return of &apos;this&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports methods returning &lt;b&gt;this&lt;/b&gt;.
While such a return is valid, it is rarely necessary, and usually indicates that the developer intends the method to be used
as part of a chain of similar method calls (e.g. buffer.append(&quot;foo&quot;).append(&quot;bar&quot;).append(&quot;baz&quot;)).
Such chains are frowned upon by many coding standards.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleDeclaration" displayName="Multiple variables in one declaration">&lt;html&gt;
&lt;body&gt;
This inspection reports multiple variables being declared in a single declaration.
Some coding standards prohibit such declarations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryFullyQualifiedName" displayName="Unnecessary fully qualified name">&lt;html&gt;
&lt;body&gt;
This inspection reports on fully qualified class names which can be shortened. The quick fix for this
inspection will shorten the fully qualified names, adding import statements as necessary.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Visibility issues">
    <inspection shortName="FieldHidesSuperclassField" displayName="Field name hides field in superclass">&lt;html&gt;
&lt;body&gt;
This inspection reports fields with the same name as a field in an ancestor class. Such field
names may be confusing, and can be bug-prone.
&lt;p&gt;
Use the checkbox below the indicate whether this inspection should report all name clashes, or only
clashes with fields which are visible from the subclass.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="LocalVariableHidingMemberVariable" displayName="Local variable hides member variable">&lt;html&gt;
&lt;body&gt;
This inspection reports local variables being named identically to visible member variables of their
class. Such a variable name may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AnonymousClassVariableHidesContainingMethodVariable" displayName="Anonymous class variable hides variable in containing method">&lt;html&gt;
&lt;body&gt;
This inspection reports anonymous class variables being named identically to variables of a containing method.
Such a variable name may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AmbiguousMethodCall" displayName="Inherited method called which hides method in outer class">&lt;html&gt;
&lt;body&gt;
This inspection reports any method calls to super methods where a method
with the same name is available in the surrounding class. In this case a cursory
reader of the source may think that a method in the surrounding class is
called, when in fact a method from the super class is called. To make the
intent of the code more clear it is recommended to add a
&lt;b&gt;this&lt;/b&gt; qualifier to the method call.
&lt;p&gt;
&lt;small&gt;New in 8, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOverridesPrivateMethod" displayName="Method overrides private method of superclass">&lt;html&gt;
&lt;body&gt;
This inspection reports instance methods having the same name as a
&lt;b&gt;private&lt;/b&gt; method of a superclass. Such methods
may result in confusing semantics, particularly if the private method is ever
made publicly visible.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeParameterHidesVisibleType" displayName="Type parameter hides visible type">&lt;html&gt;
&lt;body&gt;
This inspection reports type parameters being named
identically to visible types in the current scope. Such a parameter name may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InnerClassVariableHidesOuterClassVariable" displayName="Inner class field hides outer class field">&lt;html&gt;
&lt;body&gt;
This inspection reports inner class variables being named identically to member variables of a containing class.
Such a variable name may be confusing.
&lt;p&gt;
Use the checkbox below the indicate whether this inspection should report all name clashes, or only
clashes with fields which are visible from the inner class.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterHidingMemberVariable" displayName="Parameter hides member variable">&lt;html&gt;
&lt;body&gt;
This inspection reports method parameters being named identically to visible member variables of their
class. Such a parameter name may be confusing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOverloadsParentMethod" displayName="Method overloads method of superclass">&lt;html&gt;
&lt;body&gt;
This inspection reports instance methods having the same name and different but compatible arguments as
a method in a superclass. In this case, the child method overloads the parent method, instead of overriding it.
While that may be intended, if unintended it may result in latent bugs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOverridesStaticMethod" displayName="Method overrides static method of superclass">&lt;html&gt;
&lt;body&gt;
This inspection reports methods having the same name as a &lt;b&gt;static&lt;/b&gt; method of a superclass. Such
methods may result in confusing semantics.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassEscapesItsScope" displayName="Class escapes defined scope">&lt;html&gt;
&lt;body&gt;
This inspection reports any references to classes which allow the class name to
be used outside the class&apos;s stated scope. For instance, this inspection would report
a public method which returns a private inner class, or a protected field whose
type is a package-visible class. While legal Java, such references can be very
confusing, and make reuse difficult.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodOverridesPackageLocalMethod" displayName="Method overrides package local method of superclass located in other package">&lt;html&gt;
&lt;body&gt;
This inspection reports methods having the same name as a package
local method of a superclass in other package. Such methods may result in
confusing semantics, particularly if the package local method is ever made
publicly visible. A package local method can only properly be overridden if
the subclass resides in the same package.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Validity issues">
    <inspection shortName="GroovyUnreachableStatement" displayName="Unreachable Statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any statements in Groovy script file that are unreachable.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyDuplicateSwitchBranch" displayName="Duplicate switch case">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports duplicated &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;case&lt;/font&gt;&lt;/b&gt;  expressions in Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt;  statements.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Ant inspections">
    <inspection shortName="AntDuplicateTargetsInspection" displayName="Duplicate targets">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        This inspection reports duplicate &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;targets&lt;/font&gt;&lt;/b&gt; in
        current build file.
      &lt;/font&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AntResolveInspection" displayName="Reference resolve problems">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        This inspection reports unresolved references on properties as well as custom as well as custom type definitions that cannot be resolved.
      &lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AntMissingPropertiesFileInspection" displayName="Missing properties file">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        This inspection reports missing &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;properties files&lt;/font&gt;&lt;/b&gt;.
      &lt;/font&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Modularization issues">
    <inspection shortName="ModuleWithTooManyClasses" displayName="Module with too many classes">&lt;html&gt;
&lt;body&gt;
This global inspection reports any modules which contain too many classes. Overly large modules may
indicate a lack of design clarity.
&lt;p&gt;
Use the field below to specify the maximum number of classes a module may have before triggering this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ModuleWithTooFewClasses" displayName="Module with too few classes">&lt;html&gt;
&lt;body&gt;
This global inspection reports any modules which contain too few classes. Overly small modules may
indicate an overly fragmented design.
&lt;p&gt;
Use the field below to specify the minimum number of classes a module may have before triggering this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InconsistentLanguageLevel" displayName="Inconsistent language level settings">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection lists modules which depend on other modules with higher language level. Such dependencies should be broken off.
&lt;/font&gt;
&lt;br&gt;&lt;small&gt;New in 9&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Numeric issues">
    <inspection shortName="CachedNumberConstructorCall" displayName="Number constructor call with primitive argument">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempt to instantiate a new &lt;b&gt;Long&lt;/b&gt;,
&lt;b&gt;Integer&lt;/b&gt;, &lt;b&gt;Short&lt;/b&gt; or
&lt;b&gt;Byte&lt;/b&gt; object from a primitive &lt;b&gt;long&lt;/b&gt;,
&lt;b&gt;integer&lt;/b&gt;, &lt;b&gt;short&lt;/b&gt; or
&lt;b&gt;byte&lt;/b&gt;
argument. It may be more efficient to use the static method &lt;b&gt;valueOf()&lt;/b&gt;
here (introduced in Java 5), which will cache objects for values between -128 and
127 inclusive. This inspection ignores calls to number constructors using a
&lt;b&gt;String&lt;/b&gt; argument.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantMathCall" displayName="Constant call to java.lang.Math or StrictMath">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;java.lang.Math&lt;/b&gt; or
&lt;b&gt;java.lang.StrictMath&lt;/b&gt; methods which can be determined
to be simple compile-time constants.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnaryPlus" displayName="Unary plus">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of the unary &apos;+&apos; operator. Unary plus is a null operation, and
its presence may represent a coding error, particularly in combination with the increment operator, &apos;++&apos;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BadOddness" displayName="Suspicious test for oddness">&lt;html&gt;
&lt;body&gt;
This inspection reports any checks for oddness of the form:
&lt;code&gt;&lt;pre&gt;x % 2 == 1&lt;/pre&gt;&lt;/code&gt;
Such checks will fail for negative odd values, which is probably not the behaviour intended. Consider using:
&lt;code&gt;&lt;pre&gt;x % 2 != 0&lt;/pre&gt;&lt;/code&gt; or: &lt;code&gt;&lt;pre&gt;x &amp; 1 == 1&lt;/pre&gt;&lt;/code&gt; instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PointlessArithmeticExpression" displayName="Pointless arithmetic expression">&lt;html&gt;
&lt;body&gt;
This inspection reports pointless arithmetic
expressions. Such expressions include adding or subtracting zero, multiplying by zero or one,
division by one, and shift by zero. Such expressions may be the result of automated refactorings
not completely followed through to completion, and in any case are unlikely to be what the developer
intended to do.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OctalAndDecimalIntegersMixed" displayName="Octal and decimal integers in same array">&lt;html&gt;
&lt;body&gt;
This inspection reports any use of both octal and decimal integers in an array
initialization. This is often due to creating an array by copying a list of numbers into an array without noticing
that some of them are zero-padded, and will thus be interpreted by the Java compiler as octal.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IntegerDivisionInFloatingPointContext" displayName="Integer division in floating point context">&lt;html&gt;
&lt;body&gt;
This inspection reports integer division where the
result is either directly or indirectly used as a floating point number.
Such division is often an error, and may result in unexpected results
due to truncation in integer division.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IntegerMultiplicationImplicitCastToLong" displayName="Integer multiplication or shift implicitly cast to long">&lt;html&gt;
&lt;body&gt;
This inspection reports integer multiplication or left shift
which are implicitly cast to long.
Such multiplication is often an error, as overflow truncation may occur unexpectedly.
&lt;p&gt;
Use the checkbox below to ignore compile time constant expressions which evaluate to
a non-overflowing value.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnpredictableBigDecimalConstructorCall" displayName="Unpredictable BigDecimal constructor call">&lt;html&gt;
&lt;body&gt;
This inspection reports on calls to &lt;b&gt;BigDecimal&lt;/b&gt;
constructors which accept a &lt;b&gt;double&lt;/b&gt; value.
These constructors can have somewhat unpredictable results because many numbers
cannot be represented exactly in a &lt;b&gt;double&lt;/b&gt;.
It is recommend to use the constructors which accept a String instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConfusingFloatingPointLiteral" displayName="Confusing floating-point literal">&lt;html&gt;
&lt;body&gt;
This inspection reports any floating point numbers which do not have a decimal point, numbers before the decimal point,
and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitNumericConversion" displayName="Implicit numeric conversion">&lt;html&gt;
&lt;body&gt;
This inspection reports implicit conversion between numeric types.
Implicit numeric conversion is not a problem in itself, but if unexpected may be a source
of difficult to trace bugs.
&lt;p&gt;
Use the first checkbox below if you wish this inspection to ignore implicit conversions which
can not result in loss of data (e.g.
&lt;b&gt;int&lt;/b&gt;-&gt;&lt;b&gt;long&lt;/b&gt;).
&lt;br&gt;Use the second checkbox to indicate that this inspection should ignore all conversions from
and to &lt;b&gt;char&lt;/b&gt;.
&lt;br&gt;Use the third checkbox to let this inspection ignore all conversions from literals and
compile time constants.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IntLiteralMayBeLongLiteral" displayName="&apos;int&apos; literal cast to &apos;long&apos; could be &apos;long&apos; literal">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;int&lt;/b&gt; literal expressions
which are immediately cast to &lt;b&gt;long&lt;/b&gt;. Such
literal expressions can be replaced with the equivalent &lt;b&gt;long&lt;/b&gt;
literal.
&lt;p&gt;
&lt;small&gt;New in 9, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DoubleLiteralMayBeFloatLiteral" displayName="&apos;double&apos; literal cast to &apos;float&apos; could be &apos;float&apos; literal">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;double&lt;/b&gt; literal expressions
which are immediately cast to &lt;b&gt;float&lt;/b&gt;. Such
literal expressions can be replaced with the equivalent &lt;b&gt;float&lt;/b&gt;
literal.
&lt;p&gt;
&lt;small&gt;New in 10.0.2, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnnecessaryUnaryMinus" displayName="Unnecessary unary minus">&lt;html&gt;
&lt;body&gt;
This inspection reports any unnecessary unary minuses.
&lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
    i += -8;
    i = i + -8;
&lt;/pre&gt;&lt;/code&gt;
could be replaced by:
&lt;code&gt;&lt;pre&gt;
    i -= 8;
    i = i - 8;
&lt;/pre&gt;&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NumericOverflow" displayName="Numeric overflow">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection checks for expressions which overflow during computation, i.e.:&lt;br&gt;

&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;a = 1.0/0.0;&lt;/font&gt;&lt;/b&gt;

&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="LongLiteralsEndingWithLowercaseL" displayName="&apos;long&apos; literal ending with &apos;l&apos; instead of &apos;L&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports long literals ending with lowercase &apos;l&apos;. These
literals may be confusing, as lowercase &apos;l&apos; looks very similar to &apos;1&apos;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparisonToNaN" displayName="Comparison to Double.NaN or Float.NaN">&lt;html&gt;
&lt;body&gt;
This inspection reports any equality or inequality comparisons to
&lt;b&gt;Double.NaN&lt;/b&gt; or &lt;b&gt;Float.NaN&lt;/b&gt;.
Equality comparison to these values is always false. Instead, use the
&lt;b&gt;Double.isNaN()&lt;/b&gt; of &lt;b&gt;Float.isNaN()&lt;/b&gt;
methods instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonReproducibleMathCall" displayName="Non-reproducible call to java.lang.Math">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;java.lang.Math&lt;/b&gt; methods
whose results are not guaranteed to be precisely reproducible.  In environments
where reproducibility of results are needed, &lt;b&gt;java.lang.StrictMath&lt;/b&gt;
should be used instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BigDecimalEquals" displayName="&apos;equals()&apos; called on java.math.BigDecimal">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;.equals()&lt;/b&gt; being called
to compare two &lt;b&gt;java.math.BigDecimal&lt;/b&gt; numbers. This is normally
a mistake, as two &lt;b&gt;java.math.BigDecimal&lt;/b&gt;s are only equal if
they are equal in both value and scale, so that 2.0 is not equal to 2.00
To compare &lt;b&gt;java.math.BigDecimal&lt;/b&gt;s for mathematical equality,
use &lt;b&gt;.compareTo()&lt;/b&gt; instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DivideByZero" displayName="Division by zero">&lt;html&gt;
&lt;body&gt;
This inspection reports division by zero or remainder by zero.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OctalLiteral" displayName="Octal integer">&lt;html&gt;
&lt;body&gt;
This inspection reports octal integer literals. Some coding standards prohibit the
use of octal literals, as they may be easily confused with decimal literals.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CharUsedInArithmeticContext" displayName="Char expression used in arithmetic context">&lt;html&gt;
&lt;body&gt;
This inspection reports on any expressions of type char which are used in
addition or substraction expressions.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OverlyComplexArithmeticExpression" displayName="Overly complex arithmetic expression">&lt;html&gt;
&lt;body&gt;
This inspection reports arithmetic expressions with too many terms. Such
expressions may be confusing and bug-prone.
&lt;p&gt;
Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparisonOfShortAndChar" displayName="Comparison of &apos;short&apos; and &apos;char&apos; values">&lt;html&gt;
&lt;body&gt;
This inspection reports equality comparisons between
&lt;b&gt;short&lt;/b&gt; and &lt;b&gt;char&lt;/b&gt; values.
Such comparisons may cause subtle bugs, as &lt;b&gt;short&lt;/b&gt; values are
signed and &lt;b&gt;char&lt;/b&gt; values unsigned.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FloatingPointEquality" displayName="Floating point equality comparison">&lt;html&gt;
&lt;body&gt;
This inspection reports floating-point values
being compared with &lt;b&gt;==&lt;/b&gt; or &lt;b&gt;!=&lt;/b&gt;.
Floating point values are inherently inaccurate, and comparing them for exact
equality is almost never the desired semantics. This inspection ignores comparisons
with zero literals.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastThatLosesPrecision" displayName="Numeric cast that loses precision">&lt;html&gt;
&lt;body&gt;
This inspection reports any cast operations between built-in numeric types which may
result in loss of precision. Such casts are not necessarily a problem, but may result in difficult to
trace bugs if the loss of precision is unexpected.
&lt;p&gt;
Use the checkbox below to indicate that this inspection should ignore casts from
&lt;b&gt;int&lt;/b&gt; to &lt;b&gt;char&lt;/b&gt;.
This type of cast is often used when implementing I/O operations, because the
&lt;b&gt;read()&lt;/b&gt; method of the class
&lt;b&gt;java.io.Reader&lt;/b&gt; returns an &lt;b&gt;int&lt;/b&gt;l
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Imports">
    <inspection shortName="SingleClassImport" displayName="Single class import">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;import&lt;/b&gt; statements which cover single classes (as opposed to entire packages).
Some coding standards prohibit such &lt;b&gt;import&lt;/b&gt; statements. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JavaLangImport" displayName="&apos;java.lang&apos; import">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;import&lt;/b&gt; statements which refer to the &lt;b&gt;java.lang&lt;/b&gt; package.
Such import statements are unnecessary. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OnDemandImport" displayName="&apos;*&apos; import">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;import&lt;/b&gt; statements which cover entire packages (&apos;* imports&apos;).
Some coding standards prohibit such import statements. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticImport" displayName="Static import">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;static import&lt;/b&gt; statements.
Such import statements are not supported under Java 1.4 or earlier JVMs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SamePackageImport" displayName="Import from same package">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;import&lt;/b&gt; statements which refer to the same package as the
containing file. Such imports are unnecessary, and probably the result of incomplete
refactorings. Since IDEA can automatically detect and fix such statements with its
&quot;Optimize Imports&quot; command, this inspection is mostly useful for off-line reporting on
code bases that you don&apos;t intend to change.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedImport" displayName="Unused import">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;import&lt;/b&gt; statements that are unused. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantImport" displayName="Redundant import">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;import&lt;/b&gt;
statements that are covered by previous &lt;b&gt;import&lt;/b&gt;
statements in the same file. Since IDEA can automatically
detect and fix such statements with its &quot;Optimize Imports&quot; command, this inspection is mostly useful
for off-line reporting on code bases that you don&apos;t intend to change.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UNUSED_IMPORT" displayName="Unused import (editor light)">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
  This inspection reports redundant import statements during editor highlighting only (does not require additional calculations). 
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Java language level migration aids">
    <inspection shortName="TryFinallyCanBeTryWithResources" displayName="&apos;try finally&apos; replaceable with &apos;try&apos; with resources">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;try finally&lt;/b&gt; statements which can use Java 7
Automatic Resource Management. A quickfix is provided to convert the &lt;b&gt;try finally&lt;/b&gt;
statement into a &lt;b&gt;try&lt;/b&gt; with resources statement.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 7.0 or higher.
&lt;p&gt;&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionsFieldAccessReplaceableByMethodCall" displayName="Collections.EMPTY_* field access replaceable with Collections.empty*() method call">&lt;html&gt;
&lt;body&gt;
This inspection reports any access to the &lt;b&gt;java.util.Collections&lt;/b&gt;
fields &lt;b&gt;EMPTY_LIST&lt;/b&gt;, &lt;b&gt;EMPTY_MAP&lt;/b&gt;
or &lt;b&gt;EMPTY_SET&lt;/b&gt;. Those expressions can be replaced by method
calls to &lt;b&gt;emptyList()&lt;/b&gt;,
&lt;b&gt;emptyMap()&lt;/b&gt; and &lt;b&gt;emptySet()&lt;/b&gt;.
Such method calls prevent &quot;unchecked&quot; warnings by the compiler because the type parameters can be inferred.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForCanBeForeach" displayName="&apos;for&apos; loop replaceable with &apos;for each&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt; loops which iterate
over collections or arrays, and can be replaced with the &quot;for each&quot; iteration syntax, available
in Java 5 and newer.
&lt;p&gt;
The setting &lt;b&gt;Report java.util.List indexed loops&lt;/b&gt; is responsible for finding loops involving &lt;b&gt;list.get(index)&lt;/b&gt; calls.
These loops generally can be replaced with the &lt;b&gt;foreach&lt;/b&gt; loops, unless they modify underlying list in the process, e.g. by calling &lt;b&gt;list.remove(index)&lt;/b&gt;.
If latter is the case, &lt;b&gt;foreach&lt;/b&gt; form of loop may throw &lt;b&gt;ConcurrentModificationException&lt;/b&gt;.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IndexOfReplaceableByContains" displayName="&apos;indexOf()&apos; expression is replaceable with &apos;contains()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;String.indexOf()&lt;/b&gt;
expressions which can be replaced with a call to the
&lt;b&gt;String.contains()&lt;/b&gt; method available in Java 5 and newer.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EnumerationCanBeIteration" displayName="Enumeration can be iteration">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Enumeration&lt;/b&gt; methods
used, which can be replaced equivalent &lt;b&gt;Iterator&lt;/b&gt;
constructs. &lt;b&gt;Iterator&lt;/b&gt;s are part of the Java
Collection Framework, which has been available since Java 1.2.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SafeVarargsDetector" displayName="Possible heap pollution from parameterized vararg type">&lt;html&gt;
&lt;body&gt;
  This inspection reports all methods with variable arity which can be annotated as @SafeVarargs.
  @SafeVarargs annotation suppresses unchecked warnings about parameterized array creation at call sites.
  &lt;p&gt;
  This annotation is not supported under Java 1.6 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferReplaceableByStringBuilder" displayName="&apos;StringBuffer&apos; may be &apos;StringBuilder&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any variables declared as &lt;b&gt;java.lang.StringBuffer&lt;/b&gt; which may be
more efficiently declared as &lt;b&gt;java.lang.StringBuilder&lt;/b&gt;.
&lt;b&gt;java.lang.StringBuilder&lt;/b&gt; is a non-thread-safe replacement for
&lt;b&gt;java.lang.StringBuffer&lt;/b&gt;, available in Java 5 and newer.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryUnboxing" displayName="Unnecessary unboxing">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;unboxing&quot;, e.g. explicit unwrapping of wrapped primitive values.
Unboxing is unnecessary under Java 5 and newer, and can be safely removed.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IfCanBeSwitch" displayName="&apos;if&apos; replaceable with &apos;switch&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;if&lt;/b&gt; statements with which can be replaced
by a &lt;b&gt;switch&lt;/b&gt; statement. This inspection will automatically suggest string
switches when the project language level is jdk 1.7 or higher.
&lt;p&gt;
Use the text field below to indicate the minimum
number of &lt;b&gt;case&lt;/b&gt; branches the resulting &lt;b&gt;switch&lt;/b&gt; statement should have.
&lt;p&gt;
&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TryWithIdenticalCatches" displayName="Identical &apos;catch&apos; branches in &apos;try&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports identical &lt;b&gt;catch&lt;/b&gt; sections in &lt;b&gt;try&lt;/b&gt; blocks under JDK 7. A quickfix is provided to collapse the sections into
a multi-catch section.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 7.0 or higher.
&lt;p&gt;&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodCanBeVariableArityMethod" displayName="Method can be variable arity method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods with which can be converted to be a variable
arity/varargs method, available in Java 5 and newer.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WhileCanBeForeach" displayName="&apos;while&apos; loop replaceable with &apos;for each&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;while&lt;/b&gt; loops which iterate
over collections, and can be replaced with the &quot;for each&quot; iteration syntax,
which is available in Java 5 and newer.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryBoxing" displayName="Unnecessary boxing">&lt;html&gt;
&lt;body&gt;
This inspection reports &quot;boxing&quot;, e.g. wrapping of primitive values in objects.
Boxing is unnecessary under Java 5 and newer, and can be safely removed.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Since15" displayName="Usages of API documented as @since 1.5(1.6)">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection finds all usages of methods that have &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@since 1.5&lt;/font&gt;&lt;/b&gt; tag in
their documentation.&lt;br&gt;&lt;br&gt;
This may be useful when development is performed under J2SDK 5.0, while the target platform for production is
still J2SDK 1.4.&lt;br&gt;&lt;br&gt;
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RawUseOfParameterizedType" displayName="Raw use of parameterized class">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of parameterized classes where the type parameters are omitted.
Such &quot;raw&quot; uses of parameterized types are valid in Java, but defeat the purpose of using
type parameters, and may mask bugs.
&lt;p&gt;
Use the first checkbox below to ignore the construction of objects of
parameterized types. Use the second checkbox below to ignore raw types in type
casts.
&lt;p&gt;
This inspection only reports if the project or module is configured to use a
language level of 5.0 or higher.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="Convert2Diamond" displayName="Explicit type can be replaced with &lt;&gt;">&lt;html&gt;
&lt;body&gt;
  This inspection reports all new expressions with type arguments which can be replaced with diamond type &amp;lt;&amp;gt;
  &lt;p&gt;
  Such &lt;b&gt;&amp;lt;&amp;gt;&lt;/b&gt; syntax is not supported under Java 1.6 or earlier JVMs.
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Error handling">
    <inspection shortName="EmptyFinallyBlock" displayName="Empty &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
This inspection reports empty &lt;b&gt;finally&lt;/b&gt; blocks. Empty &lt;b&gt;finally&lt;/b&gt; blocks
usually indicate coding errors.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptyTryBlock" displayName="Empty &apos;try&apos; block">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;try&lt;/font&gt;&lt;/b&gt; blocks in Groovy code.  Empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt; blocks
    usually indicate coding errors.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadDeathRethrown" displayName="&apos;java.lang.ThreadDeath&apos; not rethrown">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;try&lt;/b&gt; statements which catch
&lt;b&gt;java.lang.ThreadDeath&lt;/b&gt; which do not rethrow the exception.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofCatchParameter" displayName="&apos;instanceof&apos; on &apos;catch&apos; parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;instanceof&lt;/b&gt; expressions on &lt;b&gt;catch&lt;/b&gt; block parameters.
Testing the type of &lt;b&gt;catch&lt;/b&gt; parameters is usually better done by having separate
&lt;b&gt;catch&lt;/b&gt; blocks, rather than &lt;b&gt;instanceof&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyContinueOrBreakFromFinallyBlock" displayName="&apos;continue&apos; or &apos;break&apos; inside &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;break&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;continue&lt;/font&gt;&lt;/b&gt; statements
inside of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt;
blocks in Groovy code.  While occasionally intended, such statements are very confusing, may mask exceptions thrown, and
tremendously complicate debugging.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ExceptionFromCatchWhichDoesntWrap" displayName="&apos;throw&apos; inside &apos;catch&apos; block which ignores the caught exception">&lt;html&gt;
&lt;body&gt;
This inspection reports exceptions constructed and thrown
from inside &lt;b&gt;catch&lt;/b&gt; blocks, which do not &quot;wrap&quot; the caught
exception. It is considered good practice when throwing an exception in response to an exception
to wrap the initial exception, so that valuable context information
such as stack frames and line numbers are not lost.
&lt;p&gt;
Use the checkbox below to indicate if the inspection should ignore exceptions which
receive the result of a method call on the original exception, such as &lt;b&gt;getMessage()&lt;/b&gt;,
as an argument.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckedExceptionClass" displayName="Checked exception class">&lt;html&gt;
&lt;body&gt;
This inspection reports checked exception classes (i.e. subclasses of &lt;b&gt;Exception&lt;/b&gt; which are
not also subclasses of &lt;b&gt;RuntimeException&lt;/b&gt;). Certain coding standards require that all user-defined exception
classes be unchecked.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TooBroadCatch" displayName="Overly broad &apos;catch&apos; block">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;catch&lt;/b&gt; blocks which have parameters which are more generic than the
exceptions thrown by the corresponding &lt;b&gt;try&lt;/b&gt; block.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptyFinallyBlock" displayName="Empty &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt; blocks in Groovy code.  Empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt; blocks
    usually indicate coding errors.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NonFinalFieldOfException" displayName="Non-final field of exception class">&lt;html&gt;
&lt;body&gt;
This inspection reports any fields on subclasses of
&lt;b&gt;java.lang.Exception&lt;/b&gt; which are not declared as
&lt;b&gt;final&lt;/b&gt;. Data on exception objects should not
be modified, as it may result in loss of error context for later debugging and
logging.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BadExceptionCaught" displayName="Prohibited exception caught">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;catch&lt;/b&gt; clauses
which catch inappropriate exceptions. Some exceptions, for instance
&lt;b&gt;java.lang.NullPointerException&lt;/b&gt; and
&lt;b&gt;java.lang.IllegalMonitorStateException&lt;/b&gt; represent programming errors
and so should almost certainly not be caught in production code.
&lt;p&gt;
Use the list below to specify which exceptions should be flagged by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptyCatchBlock" displayName="Empty &apos;catch&apos; block">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt; blocks.  While occasionally intended, this
empty &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt; blocks can make debugging extremely difficult.

&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="BadExceptionDeclared" displayName="Prohibited exception declared">&lt;html&gt;
&lt;body&gt;
This inspection reports methods which declare inappropriate
exceptions. One use of this inspection would be to warn of
&lt;b&gt;throws&lt;/b&gt; clauses which declare overly
generic exceptions (e.g. &lt;b&gt;java.lang.Exception&lt;/b&gt;
or &lt;b&gt;java.lang.Throwable&lt;/b&gt;).
&lt;p&gt;
Use the list below to specify which exceptions should be flagged by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CatchGenericClass" displayName="&apos;catch&apos; generic class">&lt;html&gt;
&lt;body&gt;
This inspection reports catching of a generic exception class. For clarity and
precision, it is recommended that specific exception classes be caught instead of generic ones.
This inspection reports &lt;b&gt;catch&lt;/b&gt; blocks with arguments of the following types:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;java.lang.Throwable&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;java.lang.Exception&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;java.lang.RuntimeException&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ContinueOrBreakFromFinallyBlock" displayName="&apos;continue&apos; or &apos;break&apos; inside &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;break&lt;/b&gt; or &lt;b&gt;continue&lt;/b&gt; statements
inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such statements are very confusing, may mask exceptions thrown, and
tremendously complicate debugging.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyCatchBlock" displayName="Empty &apos;catch&apos; block">&lt;html&gt;
&lt;body&gt;
This inspection reports empty &lt;b&gt;catch&lt;/b&gt; blocks. While occasionally intended, this
empty &lt;b&gt;catch&lt;/b&gt; blocks can make debugging extremely difficult.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;
Use the controls below to indicate whether catch blocks containing only comments,
empty catch blocks in JUnit tests should be reported and whether to ignore empty
catch blocks if the parameter is named &apos;ignore&apos; or &apos;ignored&apos;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CaughtExceptionImmediatelyRethrown" displayName="Caught exception is immediately rethrown">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;catch&lt;/b&gt; block where
the caught exception is immediately rethrown, without performing any action on it.
Such &lt;b&gt;catch&lt;/b&gt; blocks are unnecessary or lack error
handling.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowFromFinallyBlock" displayName="&apos;throw&apos; inside &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;throw&lt;/b&gt; statements inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such &lt;b&gt;throw&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TooBroadThrows" displayName="Overly broad &apos;throws&apos; clause">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;throws&lt;/b&gt; clauses which contain exceptions which are more generic than the
exceptions actually thrown by the method.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyTryBlock" displayName="Empty &apos;try&apos; block">&lt;html&gt;
&lt;body&gt;
This inspection reports empty &lt;b&gt;try&lt;/b&gt; blocks.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedTryStatement" displayName="Nested &apos;try&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports nested &lt;b&gt;try&lt;/b&gt; statements. Nested &lt;b&gt;try&lt;/b&gt; statements
may result in confusing code, and should probably have their &lt;b&gt;catch&lt;/b&gt; and &lt;b&gt;finally&lt;/b&gt; sections
merged.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedCatchParameter" displayName="Unused &apos;catch&apos; parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;catch&lt;/b&gt; parameters that are unused in their
corresponding blocks. This inspection will not report any &lt;b&gt;catch&lt;/b&gt; parameters
named &quot;ignore&quot; or &quot;ignored&quot;. Conversely this inspection will warn on any 
&lt;b&gt;catch&lt;/b&gt; parameters named &quot;ignore&quot; or &quot;ignored&quot; that are actually used.
&lt;p&gt;
Use the checkboxes below to disable this inspection for &lt;b&gt;catch&lt;/b&gt;
blocks with comments, catch blocks in test code.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="FinallyBlockCannotCompleteNormally" displayName="&apos;finally&apos; block which can not complete normally">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;finally&lt;/b&gt; blocks which
can not complete normally.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BadExceptionThrown" displayName="Prohibited exception thrown">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;throw&lt;/b&gt; statements
which throw inappropriate exceptions. One use of this inspection would be to warn of
&lt;b&gt;throw&lt;/b&gt; statements which throw overly generic exceptions
(e.g. &lt;b&gt;java.lang.Exception&lt;/b&gt; or
&lt;b&gt;java.io.IOException&lt;/b&gt;).
&lt;p&gt;
Use the list below to specify which exceptions should be flagged by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ErrorRethrown" displayName="&apos;java.lang.Error&apos; not rethrown">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;try&lt;/b&gt; statements which catch
&lt;b&gt;java.lang.Error&lt;/b&gt; or any subclass and which do not rethrow the error.
Statements which catch &lt;b&gt;java.lang.ThreadDeath&lt;/b&gt; are not
reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyThrowFromFinallyBlock" displayName="&apos;throw&apos; inside &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;throw&lt;/font&gt;&lt;/b&gt; statements inside of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt;
blocks.  While occasionally intended, such &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;throw&lt;/font&gt;&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UncheckedExceptionClass" displayName="Unchecked exception class">&lt;html&gt;
&lt;body&gt;
This inspection reports unchecked exception classes (i.e. subclasses of &lt;b&gt;RuntimeException&lt;/b&gt;).
Certain coding standards require that all user-defined exception classes be checked.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnFromFinallyBlock" displayName="&apos;return&apos; inside &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;return&lt;/b&gt; statements inside of &lt;b&gt;finally&lt;/b&gt;
blocks. While occasionally intended, such &lt;b&gt;return&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyReturnFromFinallyBlock" displayName="&apos;return&apos; inside &apos;finally&apos; block">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements inside of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;finally&lt;/font&gt;&lt;/b&gt;
blocks.  While occasionally intended, such &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;return&lt;/font&gt;&lt;/b&gt; statements may mask exceptions thrown, and
tremendously complicate debugging.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyUnusedCatchParameter" displayName="Unused catch parameter">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt; parameters that are unused in their
corresponding blocks.  This inspection will not report any &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;catch&lt;/font&gt;&lt;/b&gt; parameters
named &quot;ignore&quot; or &quot;ignored&quot;.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThrowCaughtLocally" displayName="&apos;throw&apos; caught by containing &apos;try&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;throw&lt;/b&gt; statements whose exceptions are always
caught by containing &lt;b&gt;try&lt;/b&gt; statements. Using &lt;b&gt;throw&lt;/b&gt;
statements as a &quot;goto&quot; to change the local flow of control is both confusing and likely to have poor performance.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Cloning issues">
    <inspection shortName="CloneCallsSuperClone" displayName="&apos;clone()&apos; does not call &apos;super.clone()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;clone()&lt;/b&gt; methods which do not call &lt;b&gt;super.clone()&lt;/b&gt;.
Cloning an object without calling &lt;b&gt;super.clone()&lt;/b&gt; may result in objects being improperly initialized.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneableImplementsClone" displayName="Cloneable class without &apos;clone()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which implement the &lt;b&gt;Cloneable&lt;/b&gt; interface, but which do not override the
&lt;b&gt;clone()&lt;/b&gt; method. Such classes use the default implementation of &lt;b&gt;clone()&lt;/b&gt;, which is often not the desired
behavior.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneDeclaresCloneNotSupported" displayName="&apos;clone()&apos; does not declare &apos;CloneNotSupportedException&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;clone()&lt;/b&gt; methods which are not declared as throwing
&lt;b&gt;CloneNotSupportedException&lt;/b&gt;. If &lt;b&gt;clone()&lt;/b&gt; is not declared
to possibly throw &lt;b&gt;CloneNotSupportedException&lt;/b&gt;, then subclasses which need to
prohibit cloning will not be able to do so in the standard way. This inspection will not report
&lt;b&gt;clone()&lt;/b&gt; methods declared &lt;b&gt;final&lt;/b&gt;,
or &lt;b&gt;clone()&lt;/b&gt; methods on &lt;b&gt;final&lt;/b&gt; classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneInNonCloneableClass" displayName="&apos;clone()&apos; method in non-Cloneable class">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which override the
&lt;b&gt;clone()&lt;/b&gt; method, but which do not implement the &lt;b&gt;Cloneable&lt;/b&gt; interface.
This usually represents a programming error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CloneCallsConstructors" displayName="&apos;clone()&apos; instantiates objects with constructor">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to object constructors inside &lt;b&gt;clone()&lt;/b&gt; methods.
Instantiation of objects inside of &lt;b&gt;clone()&lt;/b&gt; should be done by calling &lt;b&gt;clone()&lt;/b&gt;,
instead of creating the object directly, to support later subclassing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Potentially confusing code constructs">
    <inspection shortName="GroovyOverlyComplexBooleanExpression" displayName="Overly complex boolean expression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports reports any instances of Groovy boolean expressions with too many terms.  Such
expressions may be confusing and bug-prone.
&lt;p&gt;
Use the field provided below to specify the maximum number of terms allowed in an boolean expression.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyConditional" displayName="Conditional expression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of the ternary condition operator.  Some coding standards prohibit the use of
the condition operator, in favor of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if-else&lt;/font&gt;&lt;/b&gt; statements.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyResultOfIncrementOrDecrementUsed" displayName="Result of increment or decrement used">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy increment or decrement expressions nested inside other expressions.
While admirably terse, such expressions may be confusing, and violate the general design principle that a
given construct should do precisely one thing.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyPointlessBoolean" displayName="Pointless boolean expression">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of pointless or pointlessly
                complicated boolean expressions in Groovy code. Such expressions include &lt;b&gt;&lt;font
                    color=&quot;#000080&quot;&gt;and&lt;/font&gt;&lt;/b&gt;ing with true,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;or&lt;/font&gt;&lt;/b&gt;ing with false,
                equality comparison with a boolean literal, or negation of a boolean literal. Such expressions may be
                the result of automated refactorings
                not completely followed through to completion, and in any case are unlikely to be what the developer
                intended to do.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNegatedIf" displayName="Negated if condition expression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; statements
which contain &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;else&lt;/font&gt;&lt;/b&gt; branches and whose conditions are negated.
Flipping the order of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;else&lt;/font&gt;&lt;/b&gt;
branches will usually increase the clarity of such statements.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNestedSwitch" displayName="Nested switch statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements in Groovy script file that are nested inside other
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;switch&lt;/font&gt;&lt;/b&gt; statements.  Such nested switch statements are confusing, and may result in unexpected behaviour.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyNestedConditional" displayName="Nested conditional expression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any ternary conditional expressions in Groovy script file that are nested inside other
conditional expressions.  Such nested conditionals may be very confusing.  &quot;Elvis&quot; expressions are counted as conditionals
    for purpose of this inspection.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyDoubleNegation" displayName="Double negation">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of double negation in Groovy code, like if (!!functionCall()). 
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyOverlyComplexArithmeticExpression" displayName="Overly complex arithmetic expression">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports reports any instances of Groovy arithmetic expressions with too many terms.  Such
expressions may be confusing and bug-prone.
&lt;p&gt;
Use the field provided below to specify the maximum number of terms allowed in an arithmetic expression.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNegatedConditional" displayName="Negated conditional expression">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of Groovy conditional expressions whose conditions are negated.
                Flipping the order of the conditional expression branches will usually increase the clarity of such
                statements.
                &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyOctalInteger" displayName="Octal integer">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy octal integer literals.  Some coding standards prohibit the
use of octal literals, as they may be easily confused with decimal literals.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GrFieldAlreadyDefined" displayName="Variables with field names">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any variables named like a field of containing class.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyEmptyStatementBody" displayName="Statement with empty body">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;if&lt;/font&gt;&lt;/b&gt;,
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;do&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt; statements
in Groovy code having empty bodies.  While occasionally intended, this construction is confusing, and often the result of a typo.

&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyPointlessArithmetic" displayName="Pointless arithmetic expression">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of pointless arithmetic
                expressions in Groovy code. Such expressions include adding or subtracting zero, multiplying by zero or one,
                division by one, and shift by zero. Such expressions may be the result of automated refactorings
                not completely followed through to completion, and in any case are unlikely to be what the developer
                intended to do.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Properties Files">
    <inspection shortName="InconsistentResourceBundle" displayName="Inconsistent Resource Bundle">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports problems in the properties files contained in the resource bundle.
  &lt;ul&gt;
    &lt;li&gt;&lt;b&gt;Report missing translation&lt;/b&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
      option controls search for an untranslated properties.&lt;br&gt;
      It reports properties contained in parent properties file that are missing in inherited (unless it&apos;s a language dialect).&lt;br&gt;
      E.g. having this resource bundle:&lt;br&gt;

      &lt;b&gt;messages.properties&lt;/b&gt;: &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt;&lt;br&gt;
      &lt;b&gt;messages_fr.properties&lt;/b&gt;: empty&lt;br&gt;

      Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; will be reported as untranslated.
&lt;ul&gt;
    &lt;li&gt;

      &lt;b&gt;Report inconsistent properties&lt;/b&gt;
    &lt;/li&gt;
    &lt;/ul&gt;
      option controls invalid resource bundle structure inspection.&lt;br&gt;
      It reports properties contained in inherited properties file that are missing in parent (or in sibling if there is no parent).&lt;br&gt;
      E.g. having this resource bundle:&lt;br&gt;
      &lt;b&gt;messages_fr.properties&lt;/b&gt;: &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt;&lt;br&gt;
      &lt;b&gt;messages.properties&lt;/b&gt;: empty&lt;br&gt;

      Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; translation here is not available for any language except French,
      and, thus, will be reported as missing in the (default) properties file &lt;b&gt;messages.properties&lt;/b&gt;.

&lt;ul&gt;
    &lt;li&gt;

      &lt;b&gt;Report properties overridden with the same value&lt;/b&gt;
    &lt;/li&gt;
    &lt;/ul&gt;
  option checks for properties which are copy-pasted into several properties files verbatim.&lt;br&gt;
  E.g. in this resource bundle:&lt;br&gt;
  &lt;b&gt;messages_fr.properties&lt;/b&gt;: &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt;&lt;br&gt;
  &lt;b&gt;messages.properties&lt;/b&gt;: &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc=xxx&lt;/b&gt;&lt;/font&gt;&lt;br&gt;

  Property &lt;font color=&quot;#000080&quot;&gt;&lt;b&gt;abc&lt;/b&gt;&lt;/font&gt; will be reported as unnecessarily inherited in the file &lt;b&gt;messages_fr.properties&lt;/b&gt;.
  &lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="TrailingSpacesInProperty" displayName="Trailing Spaces in Property">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports all properties which key or value are ending with whitespaces.&lt;br&gt;
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedProperty" displayName="Unused Property">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports all properties not referenced from outside of the properties file.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedMessageFormatParameter" displayName="Missing message format parameter">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports properties values
  which looks like &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;java.text.MessageFormat&lt;/font&gt;&lt;/b&gt; format strings
  but do not use some of the parameters of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;{xx}&lt;/font&gt;&lt;/b&gt; kind.
 &lt;p&gt;
For example:
&lt;code&gt;&lt;pre&gt;
# parameter {0} is not used
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;error.message&lt;/font&gt;&lt;/b&gt;=Something happened in line &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;{1}&lt;/font&gt;&lt;/b&gt;
&lt;/pre&gt;&lt;/code&gt;

&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="IDEA Platform Inspections">
    <inspection shortName="UndesirableClassUsage" displayName="Undesirable Class Usage">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
Detects internally deprecated on undesirable classes usages.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GtkPreferredJComboBoxRenderer" displayName="Preferred JComboBox renderer">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection detects usages of DefaultListCellRenderer in code. Please use ListCellRendererWrapper in case you need simple cell renderer with text and icon.
This avoids ugly UI under GTK look and feel, because in this case SynthComboBoxUI#SynthComboBoxRenderer is used instead of DefaultComboBoxRenderer.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Verbose or redundant code constructs">
    <inspection shortName="RedundantArrayCreation" displayName="Redundant array creation">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports unnecessary creation of array expression
to be passed as an argument to varargs parameter.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantTypeArguments" displayName="Redundant type arguments">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports all calls to parametrized methods where explicit argument types
can be omitted, since they will be unambiguously inferred by compiler.&lt;br&gt;
Such usages make code excessive and thus less readable.&lt;br&gt;&lt;br&gt;
For example if you have a call to parametrized method like:
&lt;pre&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;this&lt;/font&gt;&lt;/b&gt;.&amp;lt;String&amp;gt;addItem(&lt;font color=&quot;#008000&quot;&gt;&quot;&quot;&lt;/font&gt;);
&lt;/pre&gt;
- the usage of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&amp;lt;String&amp;gt;&lt;/font&gt;&lt;/b&gt; will be highlighted.&lt;br&gt;&lt;br&gt;
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantCast" displayName="Redundant type cast">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports unnecessary cast expressions.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="JavaBeans issues">
    <inspection shortName="FieldHasSetterButNoGetter" displayName="Field has setter but no getter">&lt;html&gt;
&lt;body&gt;
This inspection reports any fields which have a &quot;setter&quot; method but no &quot;getter&quot; method.
While within the Java beans spec, such fields may be unnecessarily difficult to work with in
certain bean containers.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithoutConstructor" displayName="Class without constructor">&lt;html&gt;
&lt;body&gt;
This inspection reports a classes without constructors. Some coding standards prohibit such classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithoutNoArgConstructor" displayName="Class without no-arg constructor">&lt;html&gt;
&lt;body&gt;
This inspection reports a classes without a no-argument constructor.
Such constructors are necessary in some contexts if a class is to be created reflexively.
&lt;p&gt;
Use the checkbox below to indicate that this inspection should ignore classes which
contain no explicit constructors, and thus are provided a default no-argument constructor
by the compiler.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="XSLT">
    <inspection shortName="XsltUnusedDeclaration" displayName="Unused Variable/Parameter">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection reports local variables and parameters that are never used.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="XsltDeclarations" displayName="Declaration Problems">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for various problems in declarations of XSLT variables, parameters and named templates:
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Duplicate declarations&lt;/li&gt;
  &lt;li&gt;Illegal identifiers&lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="XsltTemplateInvocation" displayName="Template Invocation Problems">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for problems in invocations of named XSLT templates, such as missing arguments, passing
  arguments that are not declared by the template or passing an argument for a certain parameter more than once.
&lt;/p&gt;

&lt;p&gt;
  The inspection assumes that parameters declared with a default-value are optional and will not complain if an
  invocation does not specify an argument for such parameters.
&lt;/p&gt;


&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="XsltVariableShadowing" displayName="Variable Shadowing">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for shadowed XSLT variables which can lead to possibly undesired effects.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Data flow issues">
    <inspection shortName="LawOfDemeter" displayName="Method call violates Law of Demeter">&lt;html&gt;
&lt;body&gt;
This inspection reports any Law of Demeter violations.
See here &lt;a href=&quot;http://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;http://en.wikipedia.org/wiki/Law_of_Demeter&lt;/a&gt;
for an explanation what the Law of Demeter is.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnnecessaryLocalVariable" displayName="Redundant local variable">&lt;html&gt;
&lt;body&gt;
This inspection reports unnecessary local variables, which add
nothing to the comprehensibility of a method. Variables caught include local variables
which are immediately returned, local variables that are immediately assigned to another
variable and then not used, and local variables which always have the same value as another
local variable or parameter.
&lt;p&gt;
Use the checkbox below to have this inspection ignore variables which are immediately
returned or thrown. Some coding styles suggest using such variables for clarity and
ease of debugging.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="OrredNotEqualExpression" displayName="Identical reference in &apos;!=&apos; expression on both sides of &apos;||&apos; expression">&lt;html&gt;
&lt;body&gt;
This inspection highlights expressions where a reference is compared to a different value
on either side of an or-expression. For example: &lt;code&gt;x != a || x != b&lt;/code&gt;.
Such expressions are always true, and a quickfix is available to change them to the correct
&lt;code&gt;x != a &amp;&amp; x != b&lt;/code&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantValueVariableUse" displayName="Use of variable whose value is known to be constant">&lt;html&gt;
&lt;body&gt;
This inspection reports any uses of variables which are known to be constant. This
is the case if the (read) use of the variable is surrounded by an
&lt;b&gt;if&lt;/b&gt; or &lt;b&gt;while&lt;/b&gt;
statement with an == condition which compares the variable with a constant. In such
a case the use
of a variable which is known to be constant can be replaced with the actual constant.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReuseOfLocalVariable" displayName="Reuse of local variable">&lt;html&gt;
&lt;body&gt;
This inspection reports local variables that are &quot;reused&quot;, overwriting their
values with new values unrelated to their original use. Such local variable reuse may be confusing,
as the intended semantics of the local variable may vary with each use. It may also be
prone to bugs, if code changes result in values that were thought to be overwritten actually
being live. It is good practices to keep variable lifetimes as short as possible, and not
reuse local variables for the sake of brevity.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TooBroadScope" displayName="Scope of variable is too broad">&lt;html&gt;
&lt;body&gt;
This inspection reports any variable declarations of which the scope can be narrowed. Especially
useful for &quot;Pascal style&quot; declarations at the start of a method, but variables with too broad
a scope are also often left over after refactorings.
&lt;p&gt;
Use the checkbox below to enable this inspection to report variables which are initialized
with a call to a constructor. This makes the inspection potentially unsafe in cases where the
constructor has non-local side-effects, but make it more powerful in that it can find objects
that are allocated before necessary, causing increased memory usage.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Plugin DevKit">
    <inspection shortName="IntentionDescriptionNotFoundInspection" displayName="Intention Description Checker">&lt;html&gt;
&lt;body&gt;
&lt;span style=&quot;font-family: verdana,serif; font-size: smaller;&quot;&gt;Check if intention has a description&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PluginXmlValidity" displayName="Plugin.xml Validity">&lt;html&gt;
&lt;body&gt;
This inspection finds various problems in plugin.xml
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InspectionDescriptionNotFoundInspection" displayName="Inspection Description Checker">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection detects missing html-description for an inspection.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ComponentNotRegistered" displayName="Component/Action not registered">&lt;html&gt;
&lt;body&gt;
This inspection detects plugin components and actions that are not (yet) registered in a plugin.xml
descriptor and offers a QuickFix to register the component. This eases developing new components when
making use of the &quot;Create Class&quot; intention and helps to keep track of potentially obsolete
components.
&lt;p&gt;
    There&apos;s an option to turn off the check for Actions as they may be intentionally created and
    registered dynamically. Note that the inspection can also be suppressed on a per-class level,
    so it normally shouldn&apos;t be necessary to switch off the inspection completely. Especially
    because the inspection ignores abstract classes and by default non-public classes as well.
&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="RELAX NG">
    <inspection shortName="UnresolvedReference" displayName="Unresolved References">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for any unresolved references to named patterns (&quot;define&quot;) in a RELAX-NG file in XML Syntax.
  For unresolved references, a QuickFix is offered to create a corresponding define-element.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by RELAX-NG Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UnusedDefine" displayName="Unused Define">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspections checks for any unused named patterns (&quot;define&quot;) in a RELAX-NG file (XML or Compact Syntax) and
  highlights them as unused symbols. This is done with respect to includes from other files, i.e. a define is not
  marked as unused if is is used through an include in another file.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by RELAX-NG Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Android">
    <inspection shortName="AndroidDomInspection" displayName="Android Resources Validation">&lt;html&gt;&lt;body&gt;
  Validates resource references inside Android XML files.
&lt;/body&gt;&lt;/html&gt;</inspection>
  </group>
  <group name="Inheritance issues">
    <inspection shortName="StaticInheritance" displayName="Static inheritance">&lt;html&gt;
&lt;body&gt;
This inspection reports interfaces which are implemented for no reason other than
access to constants. Such inheritance is often confusing, and may hide important dependency
information.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InterfaceNeverImplemented" displayName="Interface which has no concrete subclass">&lt;html&gt;
&lt;body&gt;
This inspection reports interfaces which have no concrete subclasses.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassExtendsConcreteClass" displayName="Abstract class extends concrete class">&lt;html&gt;
&lt;body&gt;
This inspection reports abstract classes which extend concrete classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RedundantMethodOverride" displayName="Method is identical to its super method">&lt;html&gt;
&lt;body&gt;
This inspection reports any method that has a body and signature that are identical
to its super method. Such a method is redundant and probably a coding error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassWithoutAbstractMethods" displayName="Abstract class without abstract methods">&lt;html&gt;
&lt;body&gt;
This inspection reports abstract classes without abstract methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="RefusedBequest" displayName="Refused bequest">&lt;html&gt;
&lt;body&gt;
This inspection reports any methods which override concrete methods,
but which do not call that method as &lt;b&gt;super&lt;/b&gt;. Such methods
may represent a failure of abstraction, and can lead to hard-to-trace bugs. Methods overridden
from &lt;b&gt;java.lang.Object&lt;/b&gt; are not reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractMethodOverridesConcreteMethod" displayName="Abstract method overrides concrete method">&lt;html&gt;
&lt;body&gt;
This inspection reports abstract methods which override concrete methods.
Methods overridden from &lt;b&gt;java.lang.Object&lt;/b&gt; are not reported
by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractClassNeverImplemented" displayName="Abstract class which has no concrete subclass">&lt;html&gt;
&lt;body&gt;
This inspection reports abstract classes which have no
concrete subclasses.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractMethodWithMissingImplementations" displayName="Abstract method with missing implementations">&lt;html&gt;
&lt;body&gt;
This inspection reports any abstract methods which are not implemented in every concrete
subclass. This is a compile-time error on the subclasses, while this inspection
reports the problem at the point of the abstract method.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsUtilityClass" displayName="Class extends utility class">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes explicitly declared to extend a utility class. Utility classes
have all fields and methods declared &lt;b&gt;static&lt;/b&gt;. Extending a utility
class also allows inadvertent object instantiation of the utility class, because to allow extension
the constructor can not be made private.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TypeParameterExtendsFinalClass" displayName="Type parameter extends final class">&lt;html&gt;
&lt;body&gt;
This inspection reports any type parameters declared to extend a final class. Since
final classes cannot be extended, the type parameter could be replaced with the type
of the specified final class.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonProtectedConstructorInAbstractClass" displayName="&apos;public&apos; constructor in &apos;abstract&apos; class">&lt;html&gt;
&lt;body&gt;
This inspection reports constructors in abstract classes that are not
declared &lt;b&gt;protected&lt;/b&gt;, package-protected or
&lt;b&gt;private&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsAnnotation" displayName="Class extends annotation interface">&lt;html&gt;
&lt;body&gt;
This inspection reports any classes declared as implementing or extending an annotation
interface. While it is legal to extend an annotation interface, it is nearly meaningless,
and discouraged.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AbstractMethodOverridesAbstractMethod" displayName="Abstract method overrides abstract method">&lt;html&gt;
&lt;body&gt;
This inspection reports abstract methods which override abstract methods. Methods with
different return types or exception declarations than the method they override are not
reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsConcreteCollection" displayName="Class explicitly extends a Collection class">&lt;html&gt;
&lt;body&gt;
This inspection reports any clases which extend concrete classes of type
&lt;b&gt;java.util.Collection&lt;/b&gt; or
&lt;b&gt;java.util.Map&lt;/b&gt;. Subclassing collection types
is a common practice of novice object-oriented developers, but is considerably
more brittle than delegating collection calls.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Probable bugs">
    <inspection shortName="EqualsBetweenInconvertibleTypes" displayName="&apos;equals()&apos; between objects of inconvertible types">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to &lt;b&gt;.equals()&lt;/b&gt; where the target and argument are
of incompatible types. While such a call might theoretically be useful, most likely it represents
a bug.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyResultOfObjectAllocationIgnored" displayName="Result of object allocation ignored">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy object allocation where the object allocated ignored.
Such allocation expressions are legal Groovy, but are usually either inadvertant, or
evidence of a very odd object initialization strategy.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuspiciousSystemArraycopy" displayName="Suspicious &apos;System.arraycopy()&apos; call">&lt;html&gt;
&lt;body&gt;
This inspection reports suspicious calls to &lt;b&gt;System.arraycopy()&lt;/b&gt;.
Warnings reported by this inspection are:
&lt;ul&gt;
&lt;li&gt;source or destination which are not of an array type.
&lt;li&gt;source and destination have a different type.
&lt;li&gt;source offset, destination offset or length are negative.
&lt;/ul&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInMessageFormatCall" displayName="String concatenation as argument to &apos;MessageFormat.format() call&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports non-constant string concatenations used as an argument to a call to
&lt;b&gt;MessageFormat.format()&lt;/b&gt;.
Often this is the result of mistakenly concatenating a string format argument by typing
a &apos;+&apos; when a &apos;,&apos; was meant.
&lt;p&gt;
&lt;small&gt;New in 10.0.2, Powered by InspectionGadgets &lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MismatchedStringBuilderQueryUpdate" displayName="Mismatched query and update of StringBuilder">&lt;html&gt;
&lt;body&gt;
This inspection reports any StringBuilder or StringBuffer fields or variables whose contents are read but not written,
or written but not read. Such mismatched reads and writes are pointless, and probably indicate
dead, incomplete or erroneous code.
&lt;p&gt;
&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyInfiniteLoopStatement" displayName="Infinite loop statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;for&lt;/font&gt;&lt;/b&gt;, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt;,
 or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;do&lt;/font&gt;&lt;/b&gt; statements which
can only exit by throwing an exception.  While such statements may be correct, they
are often a symptom of coding errors.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CompareToUsesNonFinalVariable" displayName="Non-final field referenced in &apos;compareTo()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of &lt;b&gt;compareTo()&lt;/b&gt; which access
non-&lt;b&gt;final&lt;/b&gt; variables. Such access may result in &lt;b&gt;compareTo()&lt;/b&gt;
returning different results at different points in an object&apos;s lifecycle, which may in turn cause problems when
using the standard Collections classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MathRandomCastToInt" displayName="&apos;Math.random()&apos; cast to &apos;int&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;Math.random()&lt;/b&gt; which are immediately
cast to &lt;b&gt;int&lt;/b&gt;. Casting a &lt;b&gt;double&lt;/b&gt; between &lt;b&gt;0.0&lt;/b&gt; (inclusive) and
&lt;b&gt;1.0&lt;/b&gt; (exclusive) will always round down to zero. A &lt;b&gt;Math.random()&lt;/b&gt; value
should first be multiplied with some factor before casting it to an &lt;b&gt;int&lt;/b&gt; to
get a value between zero (inclusive) and the multiplication factor (exclusive).
Another possible solution would be to use the &lt;b&gt;nextInt()&lt;/b&gt; method of
&lt;b&gt;java.util.Random&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ResultSetIndexZero" displayName="Use of index 0 in JDBC ResultSet">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempts to access column 0 of a &lt;b&gt;java.sql.ResultSet&lt;/b&gt;. For historical
reasons, columns of &lt;b&gt;java.sql.ResultSet&lt;/b&gt;s are numbered beginning with 1, rather than
0, and accessing column 0 is a common error in JDBC programming.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassNewInstance" displayName="Unsafe call to &apos;Class.newInstance()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to
&lt;b&gt;java.lang.Class.newInstance()&lt;/b&gt;.
The &lt;b&gt;newInstance&lt;/b&gt; method propagates any
exception thrown by the no-arg constructor, including checked exceptions. Use
of this method effectively bypasses the compile-time exception checking that
would otherwise be performed by the compiler. Replacing such a method call with
a call to the &lt;b&gt;java.lang.reflect.Constructor.newInstance()&lt;/b&gt;
method avoids this problem by wrapping any exception thrown by the constructor
in a &lt;b&gt;java.lang.reflect.InvocationTargetException&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousIndentAfterControlStatement" displayName="Suspicious indentation after control statement without braces">&lt;html&gt;
&lt;body&gt;
This inspection reports any suspicious indentation of statements after a control statement
without braces. Such indentation can make it look like the statement is part of the control
statement, when in fact it will be executed after the control statement.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ForLoopThatDoesntUseLoopVariable" displayName="&apos;for&apos; loop where update or condition does not use loop variable">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;for&lt;/b&gt; loops where the condition or
update does not use the &lt;b&gt;for&lt;/b&gt; loop variable.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CovariantCompareTo" displayName="Covariant &apos;compareTo()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports a class having a &lt;b&gt;compareTo()&lt;/b&gt;
method taking an argument other than &lt;b&gt;java.lang.Object&lt;/b&gt;, if the class does not have a &lt;b&gt;compareTo()&lt;/b&gt; method
which does take &lt;b&gt;java.lang.Object&lt;/b&gt; as its argument. Normally, this is a mistake.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReturnNull" displayName="Return of &apos;null&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports return statements with &lt;b&gt;null&lt;/b&gt; values.
While occasionally useful, this construct may make the code more prone
to failing with a &lt;b&gt;NullPointerException&lt;/b&gt;, and often indicates that the
developer doesn&apos;t really understand the classes intended semantics.
&lt;p&gt;
Use the first control below to let this inspection ignore private methods.
&lt;p&gt;
Use bottom three controls to specify whether this inspection should report
&lt;b&gt;null&lt;/b&gt; values on array returns, collection
object returns, plain object returns, or a combination of the three.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectToString" displayName="Call to default &apos;toString()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;.toString()&lt;/b&gt;
which use the default implementation from &lt;b&gt;java.lang.Object&lt;/b&gt;.
The default implementation is rarely desired, but easy to use by accident. Calls
to &lt;b&gt;.toString()&lt;/b&gt; on objects of type
&lt;b&gt;java.lang.Object&lt;/b&gt; are ignored by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringConcatenationInFormatCall" displayName="String concatenation as argument to &apos;format()&apos; call">&lt;html&gt;
&lt;body&gt;
This inspection reports non-constant string concatenations used as a format string argument.
Often this is the result of mistakenly concatenating a string format argument by typing a &apos;+&apos;
when a &apos;,&apos; was meant.
This inspection checks calls to appropriate methods on
&lt;b&gt;java.util.Formatter&lt;/b&gt;,
&lt;b&gt;java.lang.String&lt;/b&gt;, 
&lt;b&gt;java.io.PrintWriter&lt;/b&gt;,
or &lt;b&gt;java.io.PrintStream&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;New in 10.0.2, Powered by InspectionGadgets &lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousNameCombination" displayName="Suspicious variable/parameter name combination">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Reports assignments and function calls where the name of the variable to which
  a value is assigned or the function parameter does not seem to match the name of the value assigned to it.
  For example: &lt;br&gt;&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;int x = 0;&lt;br&gt;int y = x;&lt;/font&gt;&lt;/b&gt;&lt;br&gt;
  or
  &lt;br&gt;&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;int x = 0, y = 0;&lt;br&gt;Rectangle rc = new Rectangle(y, x, 20, 20);&lt;/font&gt;&lt;/b&gt;&lt;br&gt;
  &lt;p&gt;The configuration pane allows to specify the names which should not be used together: the error is reported
  if the parameter name or assignment target name contains words from one group and the name of the assigned or passed
  variable contains words from a different group.&lt;/p&gt;
  &lt;/font&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InfiniteRecursion" displayName="Infinite recursion">&lt;html&gt;
&lt;body&gt;
This inspection reports methods which must either recurse
infinitely or throw an exception. Methods reported by this inspection can not
return normally.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticCallOnSubclass" displayName="Static method referenced via subclass">&lt;html&gt;
&lt;body&gt;
This inspection reports static method calls where the call is qualified
by a subclass of the declaring class, rather than the declaring class itself
(e.g. &lt;b&gt;MyThreadSubclass.sleep()&lt;/b&gt;). Java allows such qualification, but such calls
may be confusing, and may indicate a subtle confusion of inheritance and overriding.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonShortCircuitBoolean" displayName="Non-short-circuit boolean expression">&lt;html&gt;
&lt;body&gt;
This inspection reports on any uses of the non-short-circuit forms of boolean &apos;and&apos; and &apos;or&apos; ( &lt;b&gt;&amp;&lt;/b&gt;
and &lt;b&gt;|&lt;/b&gt; ). The non-short-circuit versions are occasionally useful, but
their presence is often due to typos of the short-circuit forms ( &lt;b&gt;&amp;&amp;&lt;/b&gt;
and &lt;b&gt;||&lt;/b&gt; ), and may lead to subtle bugs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TextLabelInSwitchStatement" displayName="Text label in &apos;switch&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports labelled statements inside of &lt;b&gt;switch&lt;/b&gt; statements.
While occasionally intended, this construction is often the result of a typo.
&lt;pre&gt;
    &lt;b&gt;switch&lt;/b&gt;(x)
    {
        &lt;b&gt;case&lt;/b&gt; 1:
        case2:   //typo!
        &lt;b&gt;case&lt;/b&gt; 3:
            &lt;b&gt;break&lt;/b&gt;;
    }
&lt;/pre&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparatorMethodParameterNotUsed" displayName="&apos;Comparator.compare()&apos; method does not use parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports any parameters of &lt;b&gt;java.util.Comparator.compare()&lt;/b&gt;
which are not used. Most likely this is the result of a typing mistake and one parameter is compared
with itself or the method is not implemented correctly.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MalformedFormatString" displayName="Malformed format string">&lt;html&gt;
&lt;body&gt;
This inspection reports malformed format strings. Format strings
are reported if they are compile-time constants used as arguments to appropriate methods on
&lt;b&gt;java.util.Formatter&lt;/b&gt;,
&lt;b&gt;java.lang.String&lt;/b&gt;,
&lt;b&gt;java.io.PrintWriter&lt;/b&gt;,
or &lt;b&gt;java.io.PrintStream&lt;/b&gt;
and do not fit the standard Java format string syntax.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EmptyInitializer" displayName="Empty class initializer">&lt;html&gt;
&lt;body&gt;
This inspection reports empty class initializer blocks.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstantiationOfUtilityClass" displayName="Instantiation of utility class">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;new&lt;/b&gt; expressions which instantiate utility classes.
Utility classes have all fields and methods declared &lt;b&gt;static&lt;/b&gt;, and their
presence may indicate a lack of object-oriented design. Instantiation of such classes most likely indicates
programmer error.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="HashCodeUsesNonFinalVariable" displayName="Non-final field referenced in &apos;hashCode()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of &lt;b&gt;hashcode()&lt;/b&gt; which access
non-&lt;b&gt;final&lt;/b&gt; variables. Such access may result in &lt;b&gt;hashcode()&lt;/b&gt;
returning different values at different points in an object&apos;s lifecycle, which may in turn cause problems when
using the standard Collections classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="PrimitiveArrayArgumentToVariableArgMethod" displayName="Confusing primitive array argument to var-arg method">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to a variable-argument method which has a primitive array in
in the variable-argument position (e.g &lt;b&gt;System.out.printf(&quot;%s&quot;, new int[]{1, 2, 3})&lt;/b&gt; ).
Such a primitive-array argument may be confusing, as it will wrapped as a single-element array, rather than each individual
element being boxed, as might be expected.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NullableProblems" displayName="@NotNull/@Nullable problems">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports problems related to
  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@Nullable&lt;/font&gt;&lt;/b&gt; and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;@NotNull&lt;/font&gt;&lt;/b&gt;
  annotations usage configured in Constant conditions &amp; exceptions inspection.
  &lt;br&gt;

&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EmptyStatementBody" displayName="Statement with empty body">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;if&lt;/b&gt;,
&lt;b&gt;while&lt;/b&gt;, &lt;b&gt;do&lt;/b&gt; or &lt;b&gt;for&lt;/b&gt; statements
having empty bodies. While occasionally intended, this construction is confusing, and often the result of a typo.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;
Use the checkbox below to indicate whether this inspection should report statements whose body is an
empty code block, rather than just empty statements.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantConditions" displayName="Constant conditions &amp; exceptions">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection reports those conditions in the specified inspection scope that are
always &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;true&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;false&lt;/font&gt;&lt;/b&gt;,
as well as points out where a &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;RuntimeException&lt;/font&gt;&lt;/b&gt; may be thrown,
based on data flow analysis of the code.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EqualsWhichDoesntCheckParameterClass" displayName="&apos;equals()&apos; method which does not check class of parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;equals()&lt;/b&gt;
methods which do not check the type of their parameter. Failure to check the type of the parameter
in the &lt;b&gt;equals()&lt;/b&gt; method may result in latent errors if the object is later used in an untyped collection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MismatchedArrayReadWrite" displayName="Mismatched read and write of array">&lt;html&gt;
&lt;body&gt;
This inspection reports any array fields or variables whose contents are read but not written,
or written but not read. Such mismatched reads and writes are pointless, and probably indicate
dead, incomplete or erroneous code.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticFieldReferenceOnSubclass" displayName="Static field referenced via subclass">&lt;html&gt;
&lt;body&gt;
This inspection reports static field access where the call is qualified
by a subclass of the declaring class, rather than the declaring class itself. Java
allows such qualification, but such accesses
may be confusing, and may indicate a subtle confusion of inheritance and overriding.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="IteratorNextDoesNotThrowNoSuchElementException" displayName="&apos;Iterator.next()&apos; which can&apos;t throw &apos;NoSuchElementException&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of &lt;b&gt;Iterator.next()&lt;/b&gt;
which can not throw &lt;b&gt;java.util.NoSuchElementException&lt;/b&gt;. Such
implementations violate the contract of &lt;b&gt;java.util.Iterator&lt;/b&gt;,
and may result in subtle bugs if the iterator is ever used in a non-standard fashion.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CollectionAddedToSelf" displayName="Collection added to self">&lt;html&gt;
&lt;body&gt;
This inspection reports any cases where a &lt;b&gt;java.util.Collection&lt;/b&gt;
or &lt;b&gt;java.util.Map&lt;/b&gt; is added as an element of itself. While Bertrand Russell
might approve of such a construct, the JVM will likely not, throwing a &lt;b&gt;java.lang.StackOverflowError&lt;/b&gt;
if &lt;b&gt;hashCode()&lt;/b&gt; is ever called on the self-containing collection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyDivideByZero" displayName="Divide by zero">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of division by zero or remainder by zero in Groovy code.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CovariantEquals" displayName="Covariant &apos;equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports a class having a &lt;b&gt;equals()&lt;/b&gt;
method taking an argument other than &lt;b&gt;java.lang.Object&lt;/b&gt;, if the class does not have a &lt;b&gt;equals()&lt;/b&gt; method
which does take &lt;b&gt;java.lang.Object&lt;/b&gt; as its argument. Normally, this is a mistake.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MismatchedCollectionQueryUpdate" displayName="Mismatched query and update of collection">&lt;html&gt;
&lt;body&gt;
This inspection reports collection fields or variables whose contents are either queried and
not updated, or updated and not queried. Such mismatched queries and updates are pointless, and may indicate
either dead code or a typographical error.
&lt;p&gt;
Use the tables below to specify which methods are update and/or query methods. The names are matched with
the beginning of the method name. Query methods which return their result are automatically detected, only
query methods which return their result in an argument (e.g. write to OutputStream) need to be specified.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayEquality" displayName="Array comparison using &apos;==&apos;, instead of &apos;Arrays.equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any use of &lt;b&gt;==&lt;/b&gt; to test for Array equality,
rather than the &lt;b&gt;&quot;java.util.Arrays.equals()&quot;&lt;/b&gt; method.
&lt;p&gt;
&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MalformedXPath" displayName="Malformed XPath expression">&lt;html&gt;
&lt;body&gt;
This inspection reports malformed XPath expressions. XPath expressions
are reported if they are compile-time constants used as arguments to appropriate methods on
&lt;b&gt;javax.xml.xpath.XPath&lt;/b&gt; and do not fit the standard XPath syntax.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantAssertCondition" displayName="&apos;assert&apos; statement condition is constant">&lt;html&gt;
&lt;body&gt;
This inspection reports assert statement conditions which are constants. Assert
statements with constant conditions will either always fail or always succeed.
Such statements can easily be left over after refactoring and are probably a bug.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectEquality" displayName="Object comparison using ==, instead of &apos;equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any use of &lt;b&gt;==&lt;/b&gt;
to test for Object equality, rather than the &lt;b&gt;&quot;.equals()&quot;&lt;/b&gt; method.
Note that comparison of Strings or Numbers using &lt;b&gt;==&lt;/b&gt; is not reported by this
inspection, nor is the comparison of an object to &lt;b&gt;null&lt;/b&gt; using
&lt;b&gt;==&lt;/b&gt;, or the comparison of two array objects.
&lt;p&gt;
Use the checkboxes below to indicate whether uses of &lt;b&gt;==&lt;/b&gt; between objects of
an enumerated type, class type or types with private constructors should be reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowableInstanceNeverThrown" displayName="Throwable instance not thrown">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Throwable&lt;/b&gt;
instantiation, where the created &lt;b&gt;Throwable&lt;/b&gt;
is never actually thrown. Most often this is the result of a simple mistake.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ResultOfObjectAllocationIgnored" displayName="Result of object allocation ignored">&lt;html&gt;
&lt;body&gt;
This inspection reports object allocation where the object allocated ignored.
Such allocation expressions are legal Java, but are usually either inadvertent, or
evidence of a very odd object initialization strategy.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="EqualsUsesNonFinalVariable" displayName="Non-final field referenced in &apos;equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of &lt;b&gt;equals()&lt;/b&gt; which access
non-&lt;b&gt;final&lt;/b&gt; variables. Such access may result in &lt;b&gt;equals()&lt;/b&gt;
returning different results at different points in an object&apos;s lifecycle, which may in turn cause problems when
using the standard Collections classes.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastConflictsWithInstanceof" displayName="Cast conflicts with &apos;instanceof&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports type cast expressions which are surrounded by an
&lt;b&gt;instanceof&lt;/b&gt; check for a different type.
While it is possible that this was intended, such a construct is most likely an error, and will
result in a &lt;b&gt;java.lang.ClassCastException&lt;/b&gt; at runtime.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayHashCode" displayName="&apos;hashCode()&apos; called on array">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;hashCode()&lt;/b&gt; being called
on an array. To get the same hash code for two arrays
with identical contents call &lt;b&gt;Arrays.hashCode()&lt;/b&gt;.
Use &lt;b&gt;Arrays.deepHashCode()&lt;/b&gt; to calculate the hash
code of a multi-dimensional array.
&lt;p&gt;
&lt;small&gt;New in 10.5, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IgnoreResultOfCall" displayName="Result of method call ignored">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to a specified list of
methods where the result of that call is ignored. For many methods, ignoring the result is perfectly
legitimate, but for some methods it is almost certainly an error. Examples of methods where ignoring
the result of a call is likely to be an error include &lt;b&gt;java.io.inputStream.read()&lt;/b&gt;,
which returns the number of bytes actually read, any method on
&lt;b&gt;java.lang.String &lt;/b&gt; or &lt;b&gt;java.math.BigInteger&lt;/b&gt;,
as all of those methods are side-effect free and thus pointless if ignored.
&lt;p&gt;
Use the panel below to enter the class names and method names of the methods you wish to check for
ignored returns. Class names must be specified as a simple string, while method names may be
specified using a standard Java regular expression. Specifying a class names implicitly specifies
that class and all of its subclasses. In addition, you may choose to report any
call to a non-library call whose result is ignored
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUnresolvedAccess" displayName="Access to unresolved expression">&lt;html&gt;
&lt;body&gt;
       This inspection reports unresolved references
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ReflectionForUnavailableAnnotation" displayName="Reflective access to a source-only annotation">&lt;html&gt;
&lt;body&gt;
This inspection reports any attempts to reflectively check for the presence of an
annotation which is not defined has being retained at runtime.
Using &lt;b&gt;Class.isAnnotationPresent()&lt;/b&gt; to test for an annotation
which has source retention or class-file retention (the default) will always result in a negative result,
but is easy to do inadvertently.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SubtractionInCompareTo" displayName="Subtraction in compareTo()">&lt;html&gt;
&lt;body&gt;
This inspection reports subtraction in
&lt;b&gt;compareTo()&lt;/b&gt; methods. While it is a common idiom to
use the results of integer subtraction as the return of a &lt;b&gt;compareTo()&lt;/b&gt;
method, this construct may cause subtle and difficult bugs in cases of integer overflow.
Comparing the integer values directly and returning -1, 0, or 1 is better practice in almost
all cases.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyAccessibility" displayName="Access to inaccessible element">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports all references which exceed access rights.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertWithSideEffects" displayName="&apos;assert&apos; statement with side effects">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;assert&lt;/b&gt; statements
that cause side effects outside of the assert statement. Since assertions can be
switched off, the side effects are not guaranteed to happen and can cause subtle bugs.
Common unwanted side effects detected by this inspection are modifications of variables
and fields in the assert statement. Also methods called are analyzed one level deep
for any modifications of fields.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUntypedAccess" displayName="Access to untyped expression">&lt;html&gt;
&lt;body&gt;
       This inspection reports the references whose type can&apos;t be determined by IntelliJ IDEA
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyLabeledStatement" displayName="Labeled statement inspection">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports already used labels.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyInfiniteRecursion" displayName="Infinite recursion">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of Groovy methods which must either recurse
infinitely or throw an exception.  Methods reported by this inspection can not
return normally.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SecondUnsafeCall" displayName="Second unsafe call">&lt;html&gt;
&lt;body&gt;

              This quick fix prevent possible NullPonterException during chain methods or properties call.
              E.g. &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;domain?.getZone().getName()&lt;/font&gt;&lt;/b&gt; replaces by &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;domain?.getZone()?.getName()&lt;/font&gt;&lt;/b&gt;
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NumberEquality" displayName="Number comparison using &apos;==&apos;, instead of &apos;equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any use of &lt;b&gt;==&lt;/b&gt; to test for Number equality,
rather than the &lt;b&gt;&quot;.equals()&quot;&lt;/b&gt; method. With auto-boxing it is easy
to make the mistake of comparing two Integer (or other subclass of java.lang.Number) objects instead
of two ints.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThrowableResultOfMethodCallIgnored" displayName="Throwable result of method call ignored">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to specific methods where the result of
the call is ignored and which return an object of type (or subtype of) 
&lt;b&gt;Throwable&lt;/b&gt;. Usually these types of methods are meant
as factory methods for exceptions and the result should be thrown.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisspelledToString" displayName="&apos;tostring()&apos; instead of &apos;toString()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any declaration of a &lt;b&gt;tostring()&lt;/b&gt; method, taking one argument.
Normally, this is a typo of &lt;b&gt;toString()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringEquality" displayName="String comparison using &apos;==&apos;, instead of &apos;equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any use of &lt;b&gt;==&lt;/b&gt; to test for String equality,
rather than the &lt;b&gt;&quot;.equals()&quot;&lt;/b&gt; method.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ImplicitArrayToString" displayName="Call to &apos;toString()&apos; on array">&lt;html&gt;
&lt;body&gt;
This inspection reports any arrays used in &lt;b&gt;String&lt;/b&gt;
concatenations or as parameters to &lt;b&gt;java.io.PrintStream&lt;/b&gt;
methods (such as &lt;b&gt;System.out.println()&lt;/b&gt;). Usually in such
a case, the contents of the array were meant to be used and the not array object itself.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NewStringBufferWithCharArgument" displayName="StringBuffer constructor call with &apos;char&apos; argument">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;new StringBuffer()&lt;/b&gt;
and &lt;b&gt;new StringBuilder()&lt;/b&gt; calls with an argument
with type &lt;b&gt;char&lt;/b&gt;. Such an argument is silently
casted to an integer used to specify the length of the buffer. Usually this is
not what was intended.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ComparableImplementedButEqualsNotOverridden" displayName="Comparable implemented but &apos;equals()&apos; not overridden">&lt;html&gt;
&lt;body&gt;
This inspection reports classes which implement &lt;b&gt;java.lang.Comparable&lt;/b&gt;
which do not override &lt;b&gt;equals()&lt;/b&gt;. If &lt;b&gt;equals()&lt;/b&gt;
is not overridden, the &lt;b&gt;equals()&lt;/b&gt; implementation is not consistent with
the &lt;b&gt;compareTo()&lt;/b&gt; implementation. If an object of such a class is added
to a collection such as &lt;b&gt;java.util.SortedSet&lt;/b&gt;, this collection will violate
the contract of &lt;b&gt;java.util.Set&lt;/b&gt;, which is defined in terms of
&lt;b&gt;equals()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="InstanceofIncompatibleInterface" displayName="&apos;instanceof&apos; with incompatible interface">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;instanceof&lt;/b&gt; expressions where
the compared type is an interface, and the compared expression has a class type which neither
implements the compared interface, nor has any visible subclasses which implement or extend the compared interface.
While it is possible that this was intended, such a construct is most likely an error, where
the resulting &lt;b&gt;instanceof&lt;/b&gt; expression always evaluates to
&lt;b&gt;false&lt;/b&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyNonShortCircuitBoolean" displayName="Non short-circuit boolean">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any uses of the non-short-circuit forms of boolean &apos;and&apos; and &apos;or&apos; ( &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&amp;&lt;/font&gt;&lt;/b&gt;
and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;|&lt;/font&gt;&lt;/b&gt; ) in Groovy code.  The non-short-circuit versions are occasionally useful, but
their presence is often due to typos of the short-circuit forms ( &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;&amp;&amp;&lt;/font&gt;&lt;/b&gt;
and &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;||&lt;/font&gt;&lt;/b&gt; ), and may lead to subtle bugs.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SuspiciousToArrayCall" displayName="Suspicious &apos;Collections.toArray()&apos; call">&lt;html&gt;
&lt;body&gt;
This inspection reports suspicious calls to &lt;b&gt;Collection.toArray()&lt;/b&gt;.
Reported are calls where the type of the specified array argument is not of the same type as the
array type to which the result is casted or the type of the specified array argument does not match
the type parameter of the collection declaration.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisspelledHashcode" displayName="&apos;hashcode()&apos; instead of &apos;hashCode()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any declaration of a &lt;b&gt;hashcode()&lt;/b&gt; method, taking no arguments.
Normally, this is a typo of &lt;b&gt;hashCode()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CastToIncompatibleInterface" displayName="Casting to incompatible interface">&lt;html&gt;
&lt;body&gt;
This inspection reports type cast expressions where
the cast type is an interface, and the cast expression has a class type which neither
implements the cast interface, nor has any visible subclasses which implement or extend the cast interface.
While it is possible that this was intended, such a construct is most likely an error, and will
result in a &lt;b&gt;java.lang.ClassCastException&lt;/b&gt; at runtime.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="VariableNotUsedInsideIf" displayName="Reference checked for &apos;null&apos; is not used inside &apos;if&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any references to variables which are checked for nullity
in the condition of an &lt;b&gt;if&lt;/b&gt; statement or
conditional, expression but which are not used inside the
&lt;b&gt;if&lt;/b&gt; statement. Usually this either means that
the check is unnecessary or that the variable is not referenced inside the
&lt;b&gt;if&lt;/b&gt; statement because of a typo.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyRangeTypeCheck" displayName="Incorrect range arguments">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection checks types of variables used in ranges. They must contain methods &apos;next&apos; and &apos;previous&apos; and implement interface &apos;java.lang.Comparable&apos;
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IteratorHasNextCallsIteratorNext" displayName="&apos;Iterator.hasNext()&apos; which calls &apos;next()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any implementations of &lt;b&gt;Iterator.hasNext()&lt;/b&gt;
which call &lt;b&gt;next()&lt;/b&gt; on themselves. While this is a common
mistake, such calls are almost certainly in error, as &lt;b&gt;hasNext()&lt;/b&gt;
should not modify the iterators state, while &lt;b&gt;next()&lt;/b&gt; should.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ReplaceAllDot" displayName="Call to String.replaceAll(&quot;.&quot;, ...)">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to
&lt;b&gt;java.lang.String.replaceAll()&lt;/b&gt; with &lt;b&gt;&quot;.&quot;&lt;/b&gt;
as the first argument. Calling &lt;b&gt;replaceAll(&quot;.&quot;, ...)&lt;/b&gt; replaces
all of the characters in a string with it&apos;s second argument, which is rarely the desired functionality.
More probably, &lt;b&gt;replaceAll(&quot;\.&quot;, ...)&lt;/b&gt; was intended.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnusedAssignment" displayName="Unused assignment">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection points out the cases where a variable value
is never used after its assignment, i.e.:&lt;br&gt;
&amp;nbsp;- the variable never gets read after assignment OR&lt;br&gt;
&amp;nbsp;- the value is always overwritten with another assignment before the next variable read OR&lt;br&gt;
&amp;nbsp;- the variable initializer is redundant (for one of the above two reasons) OR&lt;br&gt;
&amp;nbsp;- the variable is never used.&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="UseOfPropertiesAsHashtable" displayName="Use of Properties object as a Hashtable">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to the &lt;b&gt;java.util.Hashtable&lt;/b&gt;
methods &lt;b&gt;put()&lt;/b&gt;, &lt;b&gt;putAll()&lt;/b&gt; or
&lt;b&gt;get()&lt;/b&gt; on a &lt;b&gt;java.util.Properties&lt;/b&gt; object.
For reasons lost to history, &lt;b&gt;Properties&lt;/b&gt; inherits
from &lt;b&gt;Hashtable&lt;/b&gt;, but use of those methods is discouraged
to prevent corruption of properties values with non-String data.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArrayEquals" displayName="&apos;equals()&apos; called on array">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;equals()&lt;/b&gt; being called
to compare two arrays. Calling &lt;b&gt;equals()&lt;/b&gt; on an array
compares identity and is equivalent to using &lt;b&gt;==&lt;/b&gt;. Use
&lt;b&gt;Arrays.equals()&lt;/b&gt; to compare the contents of two arrays
or &lt;b&gt;Arrays.deepEquals()&lt;/b&gt; to compare the content of two
multi-dimensional arrays.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="MisspelledEquals" displayName="&apos;equal()&apos; instead of &apos;equals()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any declaration of a &lt;b&gt;equal()&lt;/b&gt; method, taking one argument.
Normally, this is a typo of &lt;b&gt;equals()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectEqualsNull" displayName="Object.equals(null)">&lt;html&gt;
&lt;body&gt;
This inspection reports on calls to &lt;b&gt;.equals()&lt;/b&gt; which have &lt;b&gt;null&lt;/b&gt;
as an argument. The semantics of such calls are almost certainly not what was intended.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SuspiciousMethodCalls" displayName="Suspicious collections method calls">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports method calls to parameterized collections, where actual argument type does not
correspond to the collection&apos;s elements type.&lt;br&gt;&lt;br&gt;
For example if you have the following code:&lt;br&gt;
&lt;/font&gt;
&lt;pre&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;lt;Integer&amp;gt; list = getListOfElements();
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.remove(&quot;&quot;);
&lt;/pre&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
- the call to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;remove()&lt;/font&gt;&lt;/b&gt; will be highlighted.&lt;br&gt;
&lt;/font&gt;

&lt;p&gt;
  &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
  The option &apos;&lt;b&gt;Report suspicious but possibly correct method calls&lt;/b&gt;&apos; makes it possible to ignore
  potentially correct code, like this:&lt;br&gt;
  &lt;/font&gt;

  &lt;pre&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Number number = &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;new&lt;/font&gt;&lt;/b&gt; Integer(&lt;font color=&quot;#0000FF&quot;&gt;0&lt;/font&gt;);
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;list.remove(number));
  &lt;/pre&gt;

&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="NullArgumentToVariableArgMethod" displayName="Confusing &apos;null&apos; argument to var-arg method">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to a variable-argument method which has a &lt;b&gt;null&lt;/b&gt;
in the variable-argument position (e.g &lt;b&gt;System.out.printf(&quot;%s&quot;, null)&lt;/b&gt; ).
Such a &lt;b&gt;null&lt;/b&gt; argument may be confusing, as it is not
wrapped as a single-element array, as may be expected.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ArchaicSystemPropertyAccess" displayName="Use of archaic system property accessors">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;Integer.getInteger()&lt;/b&gt; or &lt;b&gt;Boolean.getBoolean()&lt;/b&gt;.
These methods fetch integer and boolean values from the
system properties for a given key. Due to their underexpressive names and confusing
location of functionality, it&apos;s easy for novice programmers to attempt to use these
for other purposes, such as string parsing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MalformedRegex" displayName="Malformed regular expression">&lt;html&gt;
&lt;body&gt;
This inspection reports malformed regular expressions. Regular expressions
are reported if they are compile-time constants used as arguments to appropriate methods on
&lt;b&gt;java.util.regex.Pattern&lt;/b&gt; or &lt;b&gt;java.lang.String&lt;/b&gt;
and do not fit the standard Java regular expression syntax.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisspelledCompareTo" displayName="&apos;compareto()&apos; instead of &apos;compareTo()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any declaration of a &lt;b&gt;compareto()&lt;/b&gt; method, taking one argument.
Normally, this is a typo of &lt;b&gt;compareTo()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="GPath inspections">
    <inspection shortName="GroovyMapPutCanBeKeyedAccess" displayName="Call to Map.put can be keyed access">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
    This inspection reports any calls in Groovy code to java.util.Map.put() methods.  Such calls can be replaced 
    by the shorter and clearer keyed access form.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyGetterCallCanBePropertyAccess" displayName="Getter call can be property access">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any calls to &quot;getter&quot; methods in Groovy which can be replaced by the equivalent property access form.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyMapGetCanBeKeyedAccess" displayName="Call to Map.get can be keyed access">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
    This inspection reports any calls in Groovy code to java.util.Map.get() methods.  Such calls can be replaced 
    by the shorter and clearer keyed access form.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyListGetCanBeKeyedAccess" displayName="Call to List.get can be keyed access">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
    This inspection reports any calls in Groovy code to java.util.List.get() methods.  Such calls can be replaced 
    by the shorter and clearer keyed access form.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyListSetCanBeKeyedAccess" displayName="Call to List.set can be keyed access">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
    This inspection reports any calls in Groovy code to java.util.List.set() methods.  Such calls can be replaced 
    by the shorter and clearer keyed access form.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovySetterCallCanBePropertyAccess" displayName="Setter call can be property access">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
    This inspection reports any calls to &quot;setter&quot; methods in Groovy which can be replaced by the equivalent property access form.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Dependency issues">
    <inspection shortName="ClassWithTooManyDependencies" displayName="Class with too many dependencies">&lt;html&gt;
&lt;body&gt;
This global inspection reports any classes which are directly dependent on too many
other classes in the project. Such classes may be prone to instability, as modifications
to any of the classes it is dependent on may require changing the class. Only top-level
classes are reported by this inspection.
&lt;p&gt;
Use the field below to specify the maximum number of dependencies a class may have
before triggering this inspection
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithTooManyTransitiveDependents" displayName="Class with too many transitive dependents">&lt;html&gt;
&lt;body&gt;
This global inspection reports any classes on which too many other classes in your
project are directly or indirectly dependent. Such classes may be expensive to modify,
as changes to the class may require changing many other classes. Only top-level classes
are reported by this inspection.
&lt;p&gt;
Use the field below to specify the maximum number of direct or indirect dependents
a class may have before triggering this inspection
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CyclicPackageDependency" displayName="Cyclic package dependency">&lt;html&gt;
&lt;body&gt;
This global inspection reports any packages which are mutually or cyclically dependent
on other packages. Such cyclic dependencies make for fragile code and high maintenance costs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithTooManyTransitiveDependencies" displayName="Class with too many transitive dependencies">&lt;html&gt;
&lt;body&gt;
This global inspection reports any classes which are directly or indirectly dependent
on too many other classes in your project. Such classes may be prone to instability,
as changes to any of the classes it is dependent on may require changing the class.
Only top-level classes are reported by this inspection.
&lt;p&gt;
Use the field below to specify the maximum number of direct or indirect dependencies
a class may have before triggering this inspection
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ClassWithTooManyDependents" displayName="Class with too many dependents">&lt;html&gt;
&lt;body&gt;
This global inspection reports any classes on which too many other classes in your project
are directly dependent. Such classes may be expensive to modify, as changes to the class may
require changing many other classes.
Only top-level classes are reported by this inspection.
&lt;p&gt;
Use the field below to specify the maximum number of dependents a class may have before
triggering this inspection
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CyclicClassDependency" displayName="Cyclic class dependency">&lt;html&gt;
&lt;body&gt;
This global inspection reports any classes which are mutually or cyclically dependent on
other classes. Such cyclic dependencies make for fragile code and high maintenance costs.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="JUnit issues">
    <inspection shortName="TestMethodIsPublicVoidNoArg" displayName="Test method with incorrect signature">&lt;html&gt;
&lt;body&gt;
This inspection reports any JUnit test methods whose names which are not declared
&lt;b&gt;public&lt;/b&gt;, do not return
&lt;b&gt;void&lt;/b&gt;, or take arguments.
Such test methods are easy to create inadvertently, but will not be executed by
JUnit test runners.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnitTestClassNamingConvention" displayName="JUnit test class naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit test classes whose names are either too short, too long, or do not follow
the specified regular expression pattern. For clarity and ease of tooling, it is a common coding
standard that concrete JUnit test classes follow a specific pattern, usually requiring that the class name end
with &quot;Test&quot;.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for class names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SimplifiableJUnitAssertion" displayName="Simplifiable JUnit assertion">&lt;html&gt;
&lt;body&gt;
This inspection reports any JUnit &lt;b&gt;assertTrue&lt;/b&gt; calls
which can be replaced by equivalent &lt;b&gt;assertEquals&lt;/b&gt; calls. &lt;b&gt;assertEquals&lt;/b&gt;
calls will normally give better error messages in case of test failure than &lt;b&gt;assertTrue&lt;/b&gt; can.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertsWithoutMessages" displayName="Message missing on JUnit assertion">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to JUnit &lt;b&gt;assertXXX()&lt;/b&gt; or
&lt;b&gt;fail()&lt;/b&gt; methods that don&apos;t
report an error message on assertion failure. Error messages may help clarify the test case&apos;s
intent.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisspelledTearDown" displayName="&apos;teardown()&apos; instead of &apos;tearDown()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports a &lt;b&gt;teardown()&lt;/b&gt; method on a JUnit test case. This is
normally a misspelling of &lt;b&gt;tearDown()&lt;/b&gt;, and is entirely too easy to make.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestCaseWithConstructor" displayName="JUnit TestCase with non-trivial constructors">&lt;html&gt;
&lt;body&gt;
This inspection reports on JUnit test cases with initialization logic in their constructors. Initialization
of JUnit test cases should be done in &lt;b&gt;setUp()&lt;/b&gt; methods instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertEqualsCalledOnArray" displayName="&apos;assertEquals()&apos; called on array">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to JUnit&apos;s &lt;b&gt;assertEquals()&lt;/b&gt;
method with arguments of type array. Arrays should be checked with one of the
&lt;b&gt;assertArrayEquals()&lt;/b&gt; methods.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExpectedExceptionNeverThrown" displayName="Expected exception never thrown in test method body">&lt;html&gt;
&lt;body&gt;
This inspection reports checked exceptions expected by a JUnit 4 test method,
which are never thrown inside the method body.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertEqualsMayBeAssertSame" displayName="&apos;assertEquals()&apos; may be &apos;assertSame()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;org.junit.Assert.assertEquals()&lt;/b&gt;
or &lt;b&gt;junit.framework.Assert.assertEquals()&lt;/b&gt; which
can be replaced with an equivalent call to &lt;b&gt;assertSame()&lt;/b&gt;.
This is possible when the arguments are instances of a final class which does not override
the &lt;b&gt;equals()&lt;/b&gt; method.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SetupCallsSuperSetup" displayName="&apos;setUp()&apos; does not call &apos;super.setUp()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit classes whose &lt;b&gt;setUp()&lt;/b&gt; method
does not call &lt;b&gt;super.setUp()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestCaseWithNoTestMethods" displayName="JUnit test case with no tests">&lt;html&gt;
&lt;body&gt;
This inspection reports non-abstract JUnit test cases which do not
contain any test methods. Such test cases usually indicate developer error.
&lt;p&gt;
Use the checkbox below to specify that test cases which have super classes with
test methods should be ignored by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AssertEqualsBetweenInconvertibleTypes" displayName="&apos;assertEquals()&apos; between objects of inconvertible types">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to JUnit&apos;s &lt;b&gt;assertEquals()&lt;/b&gt;
method where the expected result and actual result arguments are of incompatible
types. While such a call might theoretically be useful, most likely it represents a bug.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TeardownIsPublicVoidNoArg" displayName="&apos;tearDown()&apos; with incorrect signature">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit classes whose &lt;b&gt;tearDown()&lt;/b&gt; method
is not declared
&lt;b&gt;public&lt;/b&gt;, does not return &lt;b&gt;void&lt;/b&gt;, or takes arguments.
Such &lt;b&gt;tearDown()&lt;/b&gt; methods are easy to create inadvertently,
and will not be executed by JUnit tests runners.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestMethodWithoutAssertion" displayName="JUnit test method without any assertions">&lt;html&gt;
&lt;body&gt;
This inspection reports any test methods of JUnit test case classes which do not contain
any assertions. Such methods indicate either incomplete or weak test cases. The table
below can be used to specify which class name, method name regular expression combinations
qualify as assertions.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisorderedAssertEqualsParameters" displayName="Misordered &apos;assertEquals()&apos; parameters">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to JUnit assertEquals() which have
a non-literal as the expected result argument and a literal as the actual result argument. Such calls
will behave fine for assertions which pass, but may give confusing error reports if their expected and actual
arguments differ.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ParameterizedParametersStaticCollection" displayName="@RunWith(Parameterized.class) without data provider">&lt;html&gt;
&lt;body&gt;
This inspection reports classes annotated with @RunWith(Parameterized.&lt;b&gt;class&lt;/b&gt;) without
data provider method annotated with @Parameterized.Parameters
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MisspelledSetUp" displayName="&apos;setup()&apos; instead of &apos;setUp()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports a &lt;b&gt;setup()&lt;/b&gt; method on a JUnit test case. This is
normally a misspelling of &lt;b&gt;setUp()&lt;/b&gt;, and is entirely too easy to make.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BeforeClassOrAfterClassIsPublicStaticVoidNoArg" displayName="Malformed @BeforeClass or @AfterClass method">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit 4.0 &lt;b&gt;@BeforeClass&lt;/b&gt; or &lt;b&gt;@AfterClass&lt;/b&gt; method
is not declared
&lt;b&gt;public static&lt;/b&gt;, does not return &lt;b&gt;void&lt;/b&gt;, or takes arguments.
Such methods are easy to create inadvertently, and will not be executed by JUnit tests runners.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MultipleExceptionsDeclaredOnTestMethod" displayName="Multiple exceptions declared on test method">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit test methods with more than one exception declared in the
&lt;b&gt;throws&lt;/b&gt; clause. Such a
&lt;b&gt;throws&lt;/b&gt; clause can be more concisely declared as:&lt;br&gt;
&lt;pre&gt;&lt;b&gt;throws&lt;/b&gt; Exception&lt;/pre&gt;
&lt;p&gt;
&lt;small&gt;New in 9, Powered by InspectionGadgets &lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ConstantJUnitAssertArgument" displayName="Constant JUnit assert argument">&lt;html&gt;
&lt;body&gt;
This inspection reports constant arguments to JUnits assertTrue, assertFalse,
assertNull and assertNotNull method calls. Calls to these methods with such
constant arguments will either always fail or always succeed.
Such statements can easily be left over after refactoring and are probably not intended.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestCaseInProductCode" displayName="JUnit TestCase in product source">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit test cases in product source trees.
This most likely indicates programmer error, and can result in test code being shipped
into production.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TestMethodInProductCode" displayName="JUnit test method in product source">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit 4.0 @Test methods in product source trees.
This most likely indicates programmer error, and can result in test code being shipped
into production.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SetupIsPublicVoidNoArg" displayName="&apos;setUp()&apos; with incorrect signature">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit classes whose &lt;b&gt;setUp()&lt;/b&gt; method
is not declared
&lt;b&gt;public&lt;/b&gt;, does not return &lt;b&gt;void&lt;/b&gt;, or takes arguments.
Such &lt;b&gt;setUp()&lt;/b&gt; methods are easy to create inadvertently,
and will not be executed by JUnit tests runners.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticSuite" displayName="&apos;suite()&apos; method not declared &apos;static&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit test case classes which contain &lt;b&gt;suite()&lt;/b&gt; methods which
are not declared &lt;b&gt;static&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnconstructableTestCase" displayName="Unconstructable JUnit TestCase">&lt;html&gt;
&lt;body&gt;
This inspection reports non-abstract JUnit test cases which do not
expose a public no-arg constructor or a public constructor which takes a single string
as an argument. Such test cases will be unrunnable by most JUnit test runners, including
IDEA&apos;s.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnitAbstractTestClassNamingConvention" displayName="JUnit abstract test class naming convention">&lt;html&gt;
&lt;body&gt;
This inspection reports abstract JUnit test classes whose names are either too short, too long, or do not follow
the specified regular expression pattern. For clarity and ease of tooling, it is a common coding
standard that abstract JUnit test classes follow a specific pattern, usually requiring that the class name end
with &quot;TestCase&quot;.
&lt;p&gt;
Use the fields provided below to specify minimum length, maximum length and regular expression expected for class names.
(Regular expressions are in standard &lt;b&gt;java.util.regex&lt;/b&gt; format.)
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="JUnit4AnnotatedMethodInJUnit3TestCase" displayName="JUnit 4 test method in class extending JUnit 3 TestCase">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit 4 @Test annotated methods which are located inside a class
extending the abstract JUnit 3 class TestCase. Mixing JUnit API&apos;s like this is
confusing and can lead to problems running the tests.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BeforeOrAfterIsPublicVoidNoArg" displayName="Malformed @Before or @After method">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit 4.0 &lt;b&gt;@Before&lt;/b&gt; or &lt;b&gt;@After&lt;/b&gt; method
is not declared
&lt;b&gt;public&lt;/b&gt;, does not return &lt;b&gt;void&lt;/b&gt;, or takes arguments.
Such methods are easy to create inadvertently, and will not be executed by JUnit tests runners.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="TeardownCallsSuperTeardown" displayName="&apos;tearDown()&apos; does not call &apos;super.tearDown()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports JUnit classes whose &lt;b&gt;tearDown()&lt;/b&gt; method
does not call &lt;b&gt;super.tearDown()&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Memory issues">
    <inspection shortName="ZeroLengthArrayInitialization" displayName="Zero-length array allocation">&lt;html&gt;
&lt;body&gt;
This inspection reports on allocations of arrays with known lengths of zero. Since array lengths in
Java are non-modifiable, it is almost always possible to share zero-length arrays, rather than repeatedly
allocating new zero-length arrays. Such sharing may provide useful optimizations in program runtime or
footprint. Note that this inspection does not report zero-length arrays allocated as static final fields,
as it is assumed that those arrays are being used to implement array sharing.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemGC" displayName="Calls to &apos;System.gc()&apos; or &apos;Runtime.gc()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any call of &lt;b&gt;System.gc()&lt;/b&gt; or &lt;b&gt;Runtime.gc()&lt;/b&gt;.
While occasionally useful in testing, explicitly triggering garbage collection via &lt;b&gt;System.gc()&lt;/b&gt; is almost always
a bad idea in production code, and can result in serious performance problems.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StringBufferField" displayName="StringBuffer field">&lt;html&gt;
&lt;body&gt;
This inspection reports fields with type
&lt;b&gt;java.lang.StringBuffer&lt;/b&gt; or &lt;b&gt;java.lang.StringBuilder&lt;/b&gt;.
StringBuffer fields can grow without limit, and are often the cause of
memory leaks.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="StaticCollection" displayName="Static collection">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;Collection&lt;/b&gt; variables declared as &lt;b&gt;static&lt;/b&gt;. While
not necessarily a problem, static collections are often causes of memory leaks, and are
therefore prohibited by some coding standards.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="XPath">
    <inspection shortName="ImplicitTypeConversion" displayName="Implicit Type Conversion">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for any implicit conversions between the predefined XPath-types STRING, NUMBER, BOOLEAN and
  NODESET. While this is usually not a problem as the conversions are well-defined by the standard, this inspection can
  help to write XSLT scripts that are more expressive about types and can even help to avoid subtle bugs:
&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;&amp;lt;xsl:if test=&quot;&lt;b&gt;foo&lt;/b&gt;&quot; /&gt;&lt;/code&gt; is not the same as &lt;code&gt;&amp;lt;xsl:if test=&quot;&lt;b&gt;string(foo)&lt;/b&gt;&quot; /&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
  The first test checks whether the element &quot;foo&quot; exists (&lt;code&gt;count(foo) &gt; 0)&lt;/code&gt;, the latter one however is only
  true if the element actually contains any text (&lt;code&gt;string-length(foo) &gt; 0&lt;/code&gt;). The plugin will then offer to
  make the type-conversion more explicit.
&lt;/p&gt;

&lt;p&gt;
  There are several options to adjust the inspection to personal preferences by offering the possibility to
  individually enable it for implicit conversions between certain types.&lt;br&gt;
&lt;/p&gt;

&lt;p&gt;
  The plugin can also be told to always flag explicit conversions that do not result in the actually expected type, such
  as &lt;code&gt;&amp;lt;xsl:if test=&quot;number(foo)&quot; /&gt;&lt;/code&gt; and provides a special option to ignore the conversion from NODESET
  to BOOLEAN by using the &lt;code&gt;string()&lt;/code&gt; function as a shortcut for writing &lt;code&gt;string-length() &gt; 0&lt;/code&gt;.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="CheckNodeTest" displayName="Check Node Test">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks whether any element/attribute names that are used in XPath-expressions are actually part of an
  associated XML file or are defined in a referenced schema. This helps to avoid problems caused by typos in
  XPath-expressions that would otherwise occur when running the script and may even then not be recognized immediately.
&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;&amp;lt;xsl:template match=&quot;&lt;b&gt;h:txtarea&lt;/b&gt;&quot; /&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p&gt;
  If the prefix &quot;h&quot; is bound to the XHTML namespace, the inspection will flag this part of the match-expression as an
  unknown element name because the correct name of the element is &quot;textarea&quot;.
&lt;/p&gt;


&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="HardwiredNamespacePrefix" displayName="Hardwired Namespace Prefix">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for comparisons of the &lt;tt&gt;name()&lt;/tt&gt;-function against strings that contain a &quot;:&quot; - which
  usually indicates a hardwired namespace-prefix in the comparison. Such code will break when run against XML that
  uses a different prefix for the same namespace.
&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;&amp;lt;xsl:if test=&quot;name() = &apos;xlink:href&apos;&quot;&gt;...&amp;lt;xsl:if&gt;&lt;/code&gt;
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="IndexZeroUsage" displayName="Use of index 0 in XPath predicates">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks for any accidental use of zero in a predicate index or in a comparision with the function
  &lt;code&gt;position()&lt;/code&gt;. Such is almost always a bug because in XPath, the index starts at one, &lt;em&gt;not&lt;/em&gt; at zero.
&lt;/p&gt;

&lt;p&gt;
  Example:
&lt;/p&gt;

&lt;p&gt;
  &lt;code&gt;//someelement[&lt;b&gt;position() = 0&lt;/b&gt;]&lt;/code&gt; or &lt;code&gt;//something[&lt;b&gt;0&lt;/b&gt;]&lt;/code&gt;
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="RedundantTypeConversion" displayName="Redundant Type Conversion">&lt;html&gt;
&lt;head&gt;
  &lt;style type=&quot;text/css&quot;&gt;
    body, table {
      font-family: Verdana, sans-serif;
      font-size: 100%;
      padding-left: 2mm;
    }

    #footer {
      font-size: 95%;
      padding-top: 10px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;p&gt;
  This inspection checks whether any type-conversion with the functions &lt;code&gt;string()&lt;/code&gt;, &lt;code&gt;number()&lt;/code&gt; or
  &lt;code&gt;boolean()&lt;/code&gt; is redundant, i.e. whether the type of argument is the same as the functions return type or if
  the expected type of the expression is of type &quot;any&quot;. While such an explicit conversion may sometimes be intentional
  to emphasize the type, this can usually be safely removed.
&lt;/p&gt;

&lt;p id=&quot;footer&quot;&gt;Powered by XPathView + XSLT-Support&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
  <group name="Threading issues">
    <inspection shortName="SynchronizedMethod" displayName="&apos;synchronized&apos; method">&lt;html&gt;
&lt;body&gt;
This inspection reports any use of the &lt;b&gt;synchronized&lt;/b&gt; modifier on methods. Some coding standards
prohibit the use of the &lt;b&gt;synchronized&lt;/b&gt; modifier, in favor of &lt;b&gt;synchronized&lt;/b&gt; statements.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonAtomicOperationOnVolatileField" displayName="Non-atomic operation on volatile field">&lt;html&gt;
&lt;body&gt;
This inspection reports any non-atomic operations on volatile fields. Non-atomic
operations on volatile fields are operations where the volatile field is read and
the value is used to update the volatile field. It is possible for the value of the
field to change between the read and write, making the operation possibly invalid.
In such cases it is better to surround the operation with a synchronized block or
make use of one of the &lt;b&gt;Atomic*&lt;/b&gt; or
&lt;b&gt;Atomic*FieldUpdater&lt;/b&gt; classes
from the &lt;b&gt;java.util.concurrent.atomic&lt;/b&gt; package.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="BusyWait" displayName="Busy wait">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to &lt;b&gt;java.lang.Thread.sleep()&lt;/b&gt; that occur inside loops. Such calls
are indicative of &quot;busy-waiting&quot;. Busy-waiting is often inefficient, and may result in unexpected deadlocks
as busy-waiting threads do not release locked resources.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizeOnLock" displayName="Synchronization on a Lock object">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;synchronized&lt;/b&gt;
block which locks on an instance of &lt;b&gt;java.util.concurrent.locks.Lock&lt;/b&gt;.
Such synchronization is almost certainly inadvertent, and appropriate versions of &lt;b&gt;.lock()&lt;/b&gt;
and &lt;b&gt;.unlock()&lt;/b&gt; should be used instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NonSynchronizedMethodOverridesSynchronizedMethod" displayName="Unsynchronized method overrides synchronized method">&lt;html&gt;
&lt;body&gt;
This inspection reports non-&lt;b&gt;synchronized&lt;/b&gt;
methods overriding &lt;b&gt;synchronized&lt;/b&gt; methods.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WaitNotInSynchronizedContext" displayName="&apos;wait()&apos; while not synchronized">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;wait()&lt;/b&gt; not made inside a corresponding synchronized
statement or synchronized method. Calling &lt;b&gt;wait()&lt;/b&gt; on an object
without holding a lock on that object will result in an IllegalMonitorStateException being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but its worth looking at.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="UnconditionalWait" displayName="Unconditional &apos;wait()&apos; call">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;.wait()&lt;/b&gt;
being called unconditionally within a synchronized context.
Normally, &lt;b&gt;.wait()&lt;/b&gt; is
used to block a thread until some condition is true. If &lt;b&gt;.wait()&lt;/b&gt;
is called unconditionally, that often indicates that the condition was checked before a lock was
acquired. In that case a data race may occur, with the condition becoming true between the time
it was checked and the time the lock was acquired. While constructs found by this inspection
are not necessarily incorrect, they are certainly worth examining.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyThreadStopSuspendResume" displayName="Call to Thread.stop(), Thread.suspend(), or Thread.resume()">&lt;html&gt;
&lt;body&gt;

                This inspection reports any calls to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Thread.stop()&lt;/font&gt;&lt;/b&gt;,
                &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Thread.suspend()&lt;/font&gt;&lt;/b&gt;, or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;Thread.resume()&lt;/font&gt;&lt;/b&gt;
                from Groovy code.
                These calls are inherently prone to data corruption and deadlock, and their use is strongly
                discouraged.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="FieldAccessedSynchronizedAndUnsynchronized" displayName="Field accessed in both synchronized and unsynchronized contexts">&lt;html&gt;
&lt;body&gt;
This inspection reports non-final fields which are accessed in both synchronized and
unsynchronized contexts. Volatile fields and accesses in constructors and initializers are ignored by this
inspection. Such &quot;partially synchronized&quot; access is often the result of a coding oversight, and may
result in unexpectedly inconsistent data structures.
&lt;p&gt;
Use the checkbox below to specify if simple getters and setters are counted as accesses too.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizationOnLocalVariableOrMethodParameter" displayName="Synchronization on local variable or method parameter">&lt;html&gt;
&lt;body&gt;
This inspection reports synchronization on a local variable or parameter. Such
synchronization has little effect, since different threads usually will have
different values for the local variable or parameter. The intent of the code
will usually be clearer if synchronization on a field is used.
&lt;p&gt;
&lt;small&gt;New in 8, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SynchronizeOnThis" displayName="Synchronization on &apos;this&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports synchronization which use &lt;b&gt;this&lt;/b&gt; as their lock
expression. Constructs reported include &lt;b&gt;synchronized&lt;/b&gt;
blocks which lock &lt;b&gt;this&lt;/b&gt;, and calls to &lt;b&gt;wait()&lt;/b&gt;,
&lt;b&gt;notify()&lt;/b&gt; or &lt;b&gt;notifyAll()&lt;/b&gt; which target &lt;b&gt;wait()&lt;/b&gt;.
Such constructs, like synchronized methods, make it hard to track just who is locking on a given
object, and make possible &quot;denial of service&quot; attacks on objects. As an alternative, consider
locking on a private instance variable, access to which can be completely controlled.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizationOnVariableInitializedWithLiteral" displayName="Synchronization on variable initialized with literal">&lt;html&gt;
&lt;body&gt;

                This inspection reports any Groovy synchronized block which locks on an object which is initilized with a
                literal. String literals are interned and Number literals can be allocated from a cache. Because of
                this, it is possible that some other part of the system which uses an object initialized with the same
                literal, is actually holding a reference to the exact same object. This can create unexpected dead-lock
                situations, if the string was thought to be private.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadLocalNotStaticFinal" displayName="ThreadLocal field not declared static final">&lt;html&gt;
&lt;body&gt;
In the most common case a &lt;b&gt;java.lang.ThreadLocal&lt;/b&gt; instance
associates state with a thread. A non-static non-final
&lt;b&gt;java.lang.ThreadLocal&lt;/b&gt; field associates state with
an instance-thread combination. This is seldom necessary and often a bug
which can cause memory leaks and possibly incorrect behavior.
&lt;p&gt;
This inspection has a quick fix to make the field &lt;b&gt;static final&lt;/b&gt;
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NotifyNotInSynchronizedContext" displayName="&apos;notify()&apos; or &apos;notifyAll()&apos; while not synchronized">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;notify()&lt;/b&gt; not made inside a corresponding synchronized
statement or synchronized method. Calling &lt;b&gt;notify()&lt;/b&gt; on an object
without holding a lock on that object will result in an IllegalMonitorStateException being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but it&apos;s worth looking at.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizationOnNonFinalField" displayName="Synchronization on non-final field">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; statements where the lock expression
is a non-&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;final&lt;/font&gt;&lt;/b&gt; field.  Such statements are unlikely to have useful semantics, as different
threads may be locking on different objects even when operating on the same object.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="VolatileLongOrDoubleField" displayName="Volatile long or double field">&lt;html&gt;
&lt;body&gt;
This inspection reports fields of type &lt;b&gt;long&lt;/b&gt; or &lt;b&gt;double&lt;/b&gt;
which are declared as &lt;b&gt;volatile&lt;/b&gt;. While Java specifies that reads
and writes from such fields are atomic, many JVM&apos;s have violated this specification. Unless you
are certain of your JVM, it is better to synchronized access to such fields rather than declare them &lt;b&gt;volatile&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WaitWhileHoldingTwoLocks" displayName="&apos;wait()&apos; while holding two locks">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;.wait()&lt;/b&gt;
being called while the current thread is holding two locks. Since the call to &lt;b&gt;.wait()&lt;/b&gt;
only frees locks on the its target, waiting with two locks held can easily lead to deadlock.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ExtendsThread" displayName="Class explicitly extends java.lang.Thread">&lt;html&gt;
&lt;body&gt;
This inspection reports any clases which extend &lt;b&gt;java.lang.Thread&lt;/b&gt;.
It is usually thought better practice to delegate to rather than extend
&lt;b&gt;java.lang.Thread&lt;/b&gt;, so that a thread creator may exert better
control over the thread&apos;s behavior, and to better localize all concurrency related operations.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NestedSynchronizedStatement" displayName="Nested &apos;synchronized&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports nested &lt;b&gt;synchronized&lt;/b&gt; statements. Nested &lt;b&gt;synchronized&lt;/b&gt; statements
are either useless (if the lock objects are identical) or prone to deadlock.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NotifyWithoutCorrespondingWait" displayName="&apos;notify()&apos; without corresponding &apos;wait()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;Object.notify()&lt;/b&gt;
or &lt;b&gt;Object.notifyAll()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Object.wait()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="MethodMayBeSynchronized" displayName="Method with synchronized block could be synchronized method">&lt;html&gt;
&lt;body&gt;
This inspection reports methods of which the body is contained in a single
&lt;b&gt;synchronized&lt;/b&gt; statement. The lock expression
for this &lt;b&gt;synchronized&lt;/b&gt; statement must be
equal to &lt;b&gt;this&lt;/b&gt; for instance methods
or ClassName.&lt;b&gt;class&lt;/b&gt; for static methods. In
such cases the synchronized statements may be replaced by their contents and the
containing method marked &lt;b&gt;synchronized&lt;/b&gt;.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SynchronizedOnLiteralObject" displayName="Synchronization on an object initialized with a literal">&lt;html&gt;
&lt;body&gt;
This inspection reports any &lt;b&gt;synchronized&lt;/b&gt;
block which locks on an object which is initialized with a literal.
String literals are interned and Number literals can be allocated from a cache.
Because of this, it is possible that some other part of the system
which uses an object initialized with the same literal, is actually holding a
reference to the exact same object. This can create unexpected dead-lock situations,
if the lock object was thought to be private.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyBusyWait" displayName="Busy wait">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports instances of calls to java.lang.Thread.sleep() that occur inside loops.  Such calls
are indicative of &quot;busy-waiting&quot;.  Busy-waiting is often inefficient, and may result in unexpected deadlocks
as busy-waiting threads do not release locked resources.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SynchronizationOnStaticField" displayName="Synchronization on &apos;static&apos; field">&lt;html&gt;
&lt;body&gt;
This inspection reports synchronization on static fields. While not strictly incorrect,
synchronization on static fields can lead to bad performance because of contention.
&lt;p&gt;
&lt;small&gt;New in 10, Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ConditionSignal" displayName="Call to &apos;signal()&apos; instead of &apos;signalAll()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;java.util.concurrent.locks.signal()&lt;/b&gt;. While occasionally useful, in almost all cases
&lt;b&gt;signalAll()&lt;/b&gt; is a better and safer choice.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUnconditionalWait" displayName="Unconditional &apos;wait&apos; call">&lt;html&gt;
&lt;body&gt;

                This inspection reports any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;.wait()&lt;/font&gt;&lt;/b&gt;
                being called unconditionally within a synchronized context in Groovy code.
                Normally, &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;.wait()&lt;/font&gt;&lt;/b&gt; is
                used to block a thread until some condition is true. If &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;.wait()&lt;/font&gt;&lt;/b&gt;
                is called unconditionally, that often indicates that the condition was checked before a lock was
                acquired. In that case a data race may occur, with the condition becoming true between the time
                it was checked and the time the lock was acquired. While constructs found by this inspection
                are not necessarily incorrect, they are certainly worth examining.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNotifyWhileNotSynchronized" displayName="&apos;notify()&apos; or &apos;notifyAll()&apos; while not synced">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports on any Groovy call to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;notify()&lt;/font&gt;&lt;/b&gt; not made inside a corresponding synchronized
statement or synchronized method.  Calling &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;notify()&lt;/font&gt;&lt;/b&gt; on an object
without holding a lock on that object will result in an IllegalMonitorStateException being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but it&apos;s worth looking at.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="AccessToStaticFieldLockedOnInstance" displayName="Access to static field locked on instance data">&lt;html&gt;
&lt;body&gt;
This inspection reports on any access to a non-constant &lt;b&gt;static&lt;/b&gt; field which is
locked on either &lt;b&gt;this&lt;/b&gt; or an instance field of &lt;b&gt;this&lt;/b&gt;.
Locking a &lt;b&gt;static&lt;/b&gt; field on instance data does not prevent the field from being
modified by other instances, and thus may result in surprising race conditions.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadPriority" displayName="Call to &apos;Thread.setPriority()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;Thread.setPriority()&lt;/b&gt;.
Modifying priorities of threads is an inherently non-portable operation, as no guarantees
are given in the Java specification of how priorities are used in scheduling threads, or even
if they are used at all.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyWhileLoopSpinsOnField" displayName="While loop spins on field">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports on any instances of Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;while&lt;/font&gt;&lt;/b&gt; loops which spin on the
value of a non-volatile field, waiting for it to be changed by another thread.  In addition to being potentially
extremely CPU intensive when little work is done inside the loop, such
loops are likely have different semantics than intended, as the Java Memory Model allows such field accesses
to be hoisted out of the loop, causing the loop to never complete even if another thread does change the
field&apos;s value.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WaitWithoutCorrespondingNotify" displayName="&apos;wait()&apos; without corresponding &apos;notify()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;Object.wait()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Object.notify()&lt;/b&gt; or
&lt;b&gt;Object.notifyAll()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="VolatileArrayField" displayName="Volatile array field">&lt;html&gt;
&lt;body&gt;
This inspection reports array fields
which are declared as &lt;b&gt;volatile&lt;/b&gt;. Such fields
may be confusing, as accessing the array itself follows the rules for &lt;b&gt;volatile&lt;/b&gt;
fields, but accessing the array&apos;s contents does not. If such volatile access is needed to array contents,
the JDK5.0 &lt;b&gt;java.util.concurrent.atomic&lt;/b&gt; classes should be used instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="DoubleCheckedLocking" displayName="Double-checked locking">&lt;html&gt;
&lt;body&gt;
This inspection reports the double-checked locking construct. For a
discussion of double-checked locking and why it is unsafe, see
&lt;a href = &quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;
&lt;p&gt;
Use the checkbox below to ignore double-checked locking on volatile fields. Using
a volatile field for double-checked locking works correctly on virtual machines which
implement the new Java Memory Model.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyWaitWhileNotSynchronized" displayName="&apos;wait()&apos; while not synced">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any call to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;wait()&lt;/font&gt;&lt;/b&gt; not made inside a corresponding synchronized
statement or synchronized method within Groovy code.  Calling &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;wait()&lt;/font&gt;&lt;/b&gt; on an object
without holding a lock on that object will result in an IllegalMonitorStateException being thrown.
Such a construct is not necessarily an error, as the necessary lock may be acquired before
the containing method is called, but its worth  looking at.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyNestedSynchronizedStatement" displayName="Nested &apos;synchronized&apos; statement">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports all instances of nested Groovy &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; statements.  Nested &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; statements
are either useless (if the lock objects are identical) or prone to deadlock.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadStopSuspendResume" displayName="Call to &apos;Thread.stop()&apos;, &apos;suspend()&apos; or &apos;resume()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;Thread.stop()&lt;/b&gt;,
&lt;b&gt;Thread.suspend()&lt;/b&gt;, or &lt;b&gt;Thread.resume()&lt;/b&gt;.
These calls are inherently prone to data corruption and deadlock, and their use is strongly
discouraged.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NotifyCalledOnCondition" displayName="&apos;notify()&apos;  or &apos;notifyAll()&apos; called on java.util.concurrent.locks.Condition object">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;notify()&lt;/b&gt;
or &lt;b&gt;notifyAll()&lt;/b&gt; on an object
of class &lt;b&gt;java.util.concurrent.locks.Condition()&lt;/b&gt;.
It is almost certain that &lt;b&gt;signal()&lt;/b&gt; or
&lt;b&gt;signalAll()&lt;/b&gt; was intended instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadStartInConstruction" displayName="Call to &apos;Thread.start()&apos; during object construction">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;start()&lt;/b&gt; on &lt;b&gt;java.lang.Thread&lt;/b&gt;
or any of its subclasses during object construction. While occasionally useful, this construct should be avoided due
to inheritance issues. Subclasses of a class which launches a thread during object construction will not have finished
any initialization logic of their own before the thread has launched.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WhileLoopSpinsOnField" displayName="&apos;while&apos; loop spins on field">&lt;html&gt;
&lt;body&gt;
This inspection reports on &lt;b&gt;while&lt;/b&gt; loops which spin on the
value of a non-volatile field, waiting for it to be changed by another thread. In addition to being potentially
extremely CPU intensive when little work is done inside the loop, such
loops are likely have different semantics than intended, as the Java Memory Model allows such field accesses
to be hoisted out of the loop, causing the loop to never complete even if another thread does change the
field&apos;s value.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizationOnThis" displayName="Synchronization on &apos;this&apos;">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of synchronization in Groovy code which use &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;this&lt;/font&gt;&lt;/b&gt; as their lock
expression.  Constructs reported include &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt;
blocks which lock &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;this&lt;/font&gt;&lt;/b&gt;, and calls to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;wait()&lt;/font&gt;&lt;/b&gt;
&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;notify()&lt;/font&gt;&lt;/b&gt; or &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;notifyAll()&lt;/font&gt;&lt;/b&gt; which target &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;wait()&lt;/font&gt;&lt;/b&gt;.
Such constructs, like synchronized methods, make it hard to track just who is locking on a given
object, and make possible &quot;denial of service&quot; attacks on objects.  As an alternative, consider
locking on a private instance variable, access to which can be completely controlled.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="EmptySynchronizedStatement" displayName="Empty &apos;synchronized&apos; statement">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;synchronized&lt;/b&gt; statements
having empty bodies. While theoretically this may be the semantics intended, this construction is
confusing, and often the result of a typo.
&lt;p&gt;
At present, this inspection is disabled in JSP files.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SleepWhileHoldingLock" displayName="Call to &apos;Thread.sleep()&apos; while synchronized">&lt;html&gt;
&lt;body&gt;
This inspection reports calls to &lt;b&gt;java.lang.Thread.sleep()&lt;/b&gt; that occur while
within a &lt;b&gt;synchronized&lt;/b&gt; block or method. Sleeping
while synchronized may result in decreased performance, poor scalability, and possibly
even deadlocking. Consider using &lt;b&gt;wait&lt;/b&gt; instead,
as it will release the lock held.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CallToNativeMethodWhileLocked" displayName="Call to a native method while locked">&lt;html&gt;
&lt;body&gt;
This inspection reports any to methods declared &lt;b&gt;native&lt;/b&gt; while in
a synchronized block or method. While not necessarily representing a problem, such calls cause
an expensive context switch, and are best kept out of synchronized contexts, if possible.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AwaitNotInLoop" displayName="&apos;await()&apos; not in loop">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;java.util.concurrent.locks.Condition.await()&lt;/b&gt; not made inside a loop.
&lt;b&gt;await()&lt;/b&gt; and related methods are normally
used to suspend a thread until a condition is signalled as true, and that condition should be checked after the &lt;b&gt;await()&lt;/b&gt;
returns. A loop is the clearest way to achieve this.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyPublicFieldAccessedInSynchronizedContext" displayName="Non-private field accessed in synchronized context">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of non-final, non-private fields which are accessed in a synchronized context in Groovy code.
A non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such &quot;partially synchronized&quot;
access may result in unexpectedly inconsistent data structures.  Accesses in constructors an initializers are ignored
for purposes of this inspection.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WaitNotInLoop" displayName="&apos;wait()&apos; not in loop">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;wait()&lt;/b&gt; not made inside a loop. &lt;b&gt;wait()&lt;/b&gt; is normally
used to suspend a thread until a condition is true, and that condition should be checked after the &lt;b&gt;wait()&lt;/b&gt;
returns. A loop is the clearest way to achieve this.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="WaitOrAwaitWithoutTimeout" displayName="&apos;wait()&apos; or &apos;await()&apos; without timeout">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;Object.wait()&lt;/b&gt; or &lt;b&gt;Condition.await()&lt;/b&gt; which
does not specify a timeout. Such calls may be dangerous in high-availability programs, as failures in one
component may result in blockages of the waiting component,
if &lt;b&gt;notify()&lt;/b&gt;/&lt;b&gt;notifyAll()&lt;/b&gt;
or &lt;b&gt;signal()&lt;/b&gt;/&lt;b&gt;signalAll()&lt;/b&gt; never
get called.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySynchronizedMethod" displayName="Synchronized method">&lt;html&gt;
&lt;body&gt;

                This inspection reports any use of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; modifier on
                Groovy methods. Some coding standards
                prohibit the use of the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; modifier, in favor of &lt;b&gt;&lt;font
                    color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; statements.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyDoubleCheckedLocking" displayName="Double-checked locking">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of the double-checked locking construct in Groovy code.  For a
discussion of double-checked locking and why it is unsafe, see
&lt;a href = &quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html
&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;
&lt;p&gt;
Use the checkbox below to ignore double-checked locking on volatile fields. Using
a volatile field for double-checked locking works correctly on Java 5 virtual machines,
but probably does not have any performance advantages over plain full synchronization
of the accessor method.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="GroovyWaitCallNotInLoop" displayName="&apos;wait()&apos; not in loop">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports on any call to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;wait()&lt;/font&gt;&lt;/b&gt; from Groovy code not made inside a loop.  &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;wait()&lt;/font&gt;&lt;/b&gt; is normally
used to suspend a thread until a condition is true, and that condition should be checked after the &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;wait()&lt;/font&gt;&lt;/b&gt;
returns.  A loop is the clearest way to achieve this.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadRun" displayName="Call to &apos;Thread.run()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;run()&lt;/b&gt; on &lt;b&gt;java.lang.Thread&lt;/b&gt; or any of its subclasses.
While occasionally intended, this is usually a mistake, with &lt;b&gt;start()&lt;/b&gt; intended instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SignalWithoutCorrespondingAwait" displayName="&apos;signal()&apos; without corresponding &apos;await()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;Condition.signal()&lt;/b&gt;
or &lt;b&gt;Condition.signalAll()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Condition.await()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ThreadYield" displayName="Call to &apos;Thread.yield()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;Thread.yield()&lt;/b&gt;.
&lt;b&gt;Thread.yield()&lt;/b&gt; has no useful guaranteed semantics,
and is often used by inexperienced programmers to mask race conditions.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AwaitWithoutCorrespondingSignal" displayName="&apos;await()&apos; without corresponding &apos;signal()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;Condition.signal()&lt;/b&gt;
or &lt;b&gt;Condition.signalAll()&lt;/b&gt;
for which no call to a corresponding &lt;b&gt;Condition.await()&lt;/b&gt;
can be found. Only calls which target fields of the current class are reported by this inspection.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovySystemRunFinalizersOnExit" displayName="Call to System.runFinalizersOnExit()">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any calls to &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;System.runFinalizersOnExity()&lt;/font&gt;&lt;/b&gt; from
    Groovy code. This call is one of the most dangerous in the Java language.  It is inherently non-thread-safe,
may result in data corruption, deadlock, and may effect parts of the program far removed from it&apos;s call point.
It is deprecated, and it&apos;s use strongly discouraged.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="WaitCalledOnCondition" displayName="&apos;wait()&apos; called on java.util.concurrent.locks.Condition object">&lt;html&gt;
&lt;body&gt;
This inspection reports on any call to &lt;b&gt;wait()&lt;/b&gt;
made on a &lt;b&gt;java.util.concurrent.locks.Condition&lt;/b&gt;
object. This is probably a programming error, and some variant of the
&lt;b&gt;await()&lt;/b&gt; method was intended instead.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SystemRunFinalizersOnExit" displayName="Call to &apos;System.runFinalizersOnExit()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;System.runFinalizersOnExit()&lt;/b&gt;.
This call is one of the most dangerous in the Java language. It is inherently non-thread-safe,
may result in data corruption, deadlock, and may effect parts of the program far removed from its call point.
It is deprecated, and its use strongly discouraged.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="ObjectNotify" displayName="Call to &apos;notify()&apos; instead of &apos;notifyAll()&apos;">&lt;html&gt;
&lt;body&gt;
This inspection reports any calls to &lt;b&gt;notify()&lt;/b&gt;. While occasionally useful, in almost all cases
&lt;b&gt;notifyAll()&lt;/b&gt; is a better choice. See Doug Lea&apos;s &lt;I&gt;Concurrent Programming in Java&lt;/I&gt; for a discussion.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="AccessToNonThreadSafeStaticFieldFromInstance" displayName="Access to non thread-safe static field from instance">&lt;html&gt;
&lt;body&gt;
This inspection reports on any access to a &lt;b&gt;static&lt;/b&gt; field
of any non-threadsafe type specified below, which is accessed from an instance field or a
non-synchronized block. It is possible that the static field is accessed from
multiple threads, which can lead to unspecified side effects.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="SafeLock" displayName="Lock acquired but not safely unlocked">
&lt;html&gt;
&lt;body&gt;
This inspection reports any Lock resource which is not acquired in front of a
&lt;b&gt;try&lt;/b&gt; block and unlocked in the corresponding
&lt;b&gt;finally&lt;/b&gt; block. Such resources may
be inadvertently leaked if an exception is thrown before the resource is closed.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="NakedNotify" displayName="&apos;notify()&apos; or &apos;notifyAll()&apos; without corresponding state change">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;.notify()&lt;/b&gt; or
&lt;b&gt;.notifyAll()&lt;/b&gt; being called without any detectable state change occurring.
Normally, &lt;b&gt;.notify()&lt;/b&gt; and &lt;b&gt;.notifyAll()&lt;/b&gt; are
used to inform other threads that a state change has occurred. That state change should occur in a synchronized
context that contains the &lt;b&gt;.notify()&lt;/b&gt; or
&lt;b&gt;.notifyAll()&lt;/b&gt; call, and prior to the call. While not having such a state change
isn&apos;t necessarily incorrect, it is certainly worth examining.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyEmptySyncBlock" displayName="Empty &apos;synchronized&apos; block">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports  any instances of &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; statements in Groovy code
having empty bodies.  While theoretically this may be the semantics intended, this construction is
confusing, and often the result of a typo.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="ThreadWithDefaultRunMethod" displayName="Instantiating a Thread with default &apos;run()&apos; method">&lt;html&gt;
&lt;body&gt;
This inspection reports Thread instances being created without specifying
a Runnable parameter or overriding the run() method. Such threads do nothing
useful.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyAccessToStaticFieldLockedOnInstance" displayName="Access to static field locked on instance data">&lt;html&gt;
&lt;body&gt;

                This inspection reports on any access to a static field of any non-threadsafe type specified below,
                which is accessed from an instance field or a non-synchronized block. It is possible that the static
                field is accessed from multiple threads, which can lead to unspecified side effects.
           &lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PublicFieldAccessedInSynchronizedContext" displayName="Non-private field accessed in synchronized context">&lt;html&gt;
&lt;body&gt;
This inspection reports non-final, non-private fields which are accessed in a synchronized context.
A non-private field cannot be guaranteed to always be accessed in a synchronized manner, and such &quot;partially synchronized&quot;
access may result in unexpectedly inconsistent data structures.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="GroovyUnsynchronizedMethodOverridesSynchronizedMethod" displayName="Unsynchronized method overrides synchronized method">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
This inspection reports any instances of non-&lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; Groovy
methods overriding &lt;b&gt;&lt;font color=&quot;#000080&quot;&gt;synchronized&lt;/font&gt;&lt;/b&gt; methods.
&lt;/font&gt;&lt;br&gt;&lt;small&gt;Powered by InspectorGroovy&lt;/small&gt;&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="SynchronizeOnNonFinalField" displayName="Synchronization on a non-final field">&lt;html&gt;
&lt;body&gt;
This inspection reports &lt;b&gt;synchronized&lt;/b&gt; statements where the lock expression
is a reference to a non-&lt;b&gt;final&lt;/b&gt; field. Such statements are unlikely to have useful semantics, as different
threads may be locking on different objects even when operating on the same object.
&lt;p&gt;
&lt;small&gt;Powered by InspectionGadgets&lt;/small&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="XML">
    <inspection shortName="DeprecatedClassUsageInspection" displayName="Deprecated API usage in XML">&lt;html&gt;
&lt;body&gt;
&lt;span style=&quot;font-family: verdana,serif; font-size: smaller;&quot;&gt;Checks for usages of deprecated classes and methods in XML&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlUnboundNsPrefix" displayName="Unbound XML namespace prefix">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection checks for unbound namespace prefixes in XML
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlWrongRootElement" displayName="Wrong root element">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection checks if root tag name is the same as in &amp;lt;doctype&amp;gt;.&lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlUnusedNamespaceDeclaration" displayName="Unused XML schema declaration">&lt;html&gt;
&lt;body&gt;
&lt;span style=&quot;font-family: verdana,serif; font-size: smaller;&quot;&gt;
  Checks for unused namespace declarations and location hints in XML
&lt;/span&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckDtdRefs" displayName="Unresolved DTD reference">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Checks consistency of &lt;b&gt;DTD&lt;/b&gt; specific references, e.g. references to XML entity or to DTD element declaration.
  The validation works in DTD or XML file types.&lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="XmlDuplicatedId" displayName="Unresolved or duplicate ID">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;This inspection checks for duplicate &quot;id&quot; attributes in XML.
&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckXmlFileWithXercesValidator" displayName="File does not pass external validation">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Thoroughly checks XML files for DTD / schema compliance using Xerces validator.
  The validation works in XML or XHTML file types.&lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
    <inspection shortName="CheckTagEmptyBody" displayName="XML tag empty body">&lt;html&gt;
&lt;body&gt;
&lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;Reports &lt;b&gt;empty&lt;/b&gt; tag body.
  The validation works in XML / JSP / JSPX / HTML/ XHTML file types.&lt;br&gt;
&lt;/font&gt;

&lt;/body&gt;
&lt;/html&gt;</inspection>
  </group>
  <group name="Pattern Validation">
    <inspection shortName="PatternOverriddenByNonAnnotatedMethod" displayName="Non-annotated Method overrides @Pattern Method">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        &lt;p&gt;
          This inspecton Checks whether a method without any &lt;code&gt;@Pattern&lt;/code&gt; or derived annotation overrides an annotated
          method from its base classes. This is not necessary for the error-highlighting inside the editor, however the
          runtime-check instrumentation doesn&apos;t pick up annotations from base-class methods.
        &lt;/p&gt;

        &lt;p&gt;
          A QuickFix is provided to add an annotation that matches the one from the base-class method. This ensures the
          runtime-check instrumentation works correctly.
        &lt;/p&gt;
      &lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PatternNotApplicable" displayName="Pattern Annotation not applicable">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        &lt;p&gt;
          Checks whether a pattern-validation annotation (&lt;code&gt;@Pattern&lt;/code&gt; or derived ones)
          is valid to be applied to the annotated element. Only elements of type &lt;code&gt;String&lt;/code&gt;
          may be annotated.
        &lt;/p&gt;

      &lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;&lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
    <inspection shortName="PatternValidation" displayName="Validate Annotated Patterns">&lt;html&gt;
&lt;body&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td valign=&quot;top&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-1&quot;&gt;
        &lt;p&gt;
          Provides on-the-fly validation for expressions passed as argments for &lt;code&gt;@Pattern&lt;/code&gt; parameters and
          values returned from &lt;code&gt;@Pattern&lt;/code&gt;-annotated methods.
        &lt;/p&gt;
      &lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td height=&quot;20&quot;&gt;
      &lt;font face=&quot;verdana&quot; size=&quot;-2&quot;&gt;
        &lt;p id=&quot;footer&quot;&gt;Powered by IntelliLang&lt;/p&gt;&lt;/font&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;
</inspection>
  </group>
</inspections>